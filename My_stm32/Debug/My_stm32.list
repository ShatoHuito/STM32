
My_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08005cd8  08005cd8  00015cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ecc  08005ecc  00020578  2**0
                  CONTENTS
  4 .ARM          00000000  08005ecc  08005ecc  00020578  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ecc  08005ecc  00020578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000578  20000000  08005ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d0c  20000578  0800644c  00020578  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002284  0800644c  00022284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020578  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d26  00000000  00000000  000205a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366d  00000000  00000000  000382c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b04f  00000000  00000000  0003dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001529f  00000000  00000000  00058cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094cdc  00000000  00000000  0006df56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102c32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  00102c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000578 	.word	0x20000578
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cc0 	.word	0x08005cc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000057c 	.word	0x2000057c
 800014c:	08005cc0 	.word	0x08005cc0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000594 	.word	0x20000594
 800017c:	20000648 	.word	0x20000648

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f001 fd0b 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f837 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f89f 	bl	80002d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000192:	f000 f86f 	bl	8000274 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_init();
 8000196:	f000 fa85 	bl	80006a4 <OLED_init>
  LCD_Clear();
 800019a:	f000 f98f 	bl	80004bc <LCD_Clear>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800019e:	4b13      	ldr	r3, [pc, #76]	; (80001ec <main+0x6c>)
 80001a0:	f107 041c 	add.w	r4, r7, #28
 80001a4:	461d      	mov	r5, r3
 80001a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001b2:	f107 031c 	add.w	r3, r7, #28
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f003 fabf 	bl	800373c <osThreadCreate>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <main+0x70>)
 80001c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80001c4:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <main+0x74>)
 80001c6:	463c      	mov	r4, r7
 80001c8:	461d      	mov	r5, r3
 80001ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80001d6:	463b      	mov	r3, r7
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f003 faae 	bl	800373c <osThreadCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a05      	ldr	r2, [pc, #20]	; (80001f8 <main+0x78>)
 80001e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001e6:	f003 faa2 	bl	800372e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <main+0x6a>
 80001ec:	08005cf0 	.word	0x08005cf0
 80001f0:	200015ac 	.word	0x200015ac
 80001f4:	08005d0c 	.word	0x08005d0c
 80001f8:	20002220 	.word	0x20002220

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	; 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	; 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f004 fda3 	bl	8004d56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000226:	2310      	movs	r3, #16
 8000228:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022a:	2300      	movs	r3, #0
 800022c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fbd0 	bl	80029d8 <HAL_RCC_OscConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800023e:	f000 f8ed 	bl	800041c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000242:	230f      	movs	r3, #15
 8000244:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fe3c 	bl	8002ed8 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000266:	f000 f8d9 	bl	800041c <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3740      	adds	r7, #64	; 0x40
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <MX_I2C1_Init+0x50>)
 800027a:	4a13      	ldr	r2, [pc, #76]	; (80002c8 <MX_I2C1_Init+0x54>)
 800027c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_I2C1_Init+0x50>)
 8000280:	4a12      	ldr	r2, [pc, #72]	; (80002cc <MX_I2C1_Init+0x58>)
 8000282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_I2C1_Init+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_I2C1_Init+0x50>)
 800028c:	2200      	movs	r2, #0
 800028e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <MX_I2C1_Init+0x50>)
 8000292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <MX_I2C1_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MX_I2C1_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <MX_I2C1_Init+0x50>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_I2C1_Init+0x50>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002b0:	4804      	ldr	r0, [pc, #16]	; (80002c4 <MX_I2C1_Init+0x50>)
 80002b2:	f001 ff47 	bl	8002144 <HAL_I2C_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002bc:	f000 f8ae 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200019c0 	.word	0x200019c0
 80002c8:	40005400 	.word	0x40005400
 80002cc:	00061a80 	.word	0x00061a80

080002d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <MX_GPIO_Init+0x7c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a18      	ldr	r2, [pc, #96]	; (800034c <MX_GPIO_Init+0x7c>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <MX_GPIO_Init+0x7c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_GPIO_Init+0x7c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a12      	ldr	r2, [pc, #72]	; (800034c <MX_GPIO_Init+0x7c>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <MX_GPIO_Init+0x7c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <MX_GPIO_Init+0x7c>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a0c      	ldr	r2, [pc, #48]	; (800034c <MX_GPIO_Init+0x7c>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <MX_GPIO_Init+0x7c>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800032c:	2305      	movs	r3, #5
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_GPIO_Init+0x80>)
 8000340:	f001 fd64 	bl	8001e0c <HAL_GPIO_Init>

}
 8000344:	bf00      	nop
 8000346:	3720      	adds	r7, #32
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40021000 	.word	0x40021000
 8000350:	40010800 	.word	0x40010800

08000354 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(key_flag_right == 0 && key_flag_left == 0)
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <StartDefaultTask+0x84>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d134      	bne.n	80003ce <StartDefaultTask+0x7a>
 8000364:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <StartDefaultTask+0x88>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d130      	bne.n	80003ce <StartDefaultTask+0x7a>
	  {
		  if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 800036c:	2104      	movs	r1, #4
 800036e:	481c      	ldr	r0, [pc, #112]	; (80003e0 <StartDefaultTask+0x8c>)
 8000370:	f001 fed0 	bl	8002114 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	2b01      	cmp	r3, #1
 8000378:	d111      	bne.n	800039e <StartDefaultTask+0x4a>
		  {
			  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET))
 800037a:	e002      	b.n	8000382 <StartDefaultTask+0x2e>
				  osDelay(1);
 800037c:	2001      	movs	r0, #1
 800037e:	f003 fa29 	bl	80037d4 <osDelay>
			  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET))
 8000382:	2104      	movs	r1, #4
 8000384:	4816      	ldr	r0, [pc, #88]	; (80003e0 <StartDefaultTask+0x8c>)
 8000386:	f001 fec5 	bl	8002114 <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d1f5      	bne.n	800037c <StartDefaultTask+0x28>
			  key_flag_right = 1;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <StartDefaultTask+0x84>)
 8000392:	2201      	movs	r2, #1
 8000394:	601a      	str	r2, [r3, #0]
			  key_flag_left = 0;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <StartDefaultTask+0x88>)
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	e017      	b.n	80003ce <StartDefaultTask+0x7a>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 800039e:	2101      	movs	r1, #1
 80003a0:	480f      	ldr	r0, [pc, #60]	; (80003e0 <StartDefaultTask+0x8c>)
 80003a2:	f001 feb7 	bl	8002114 <HAL_GPIO_ReadPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d110      	bne.n	80003ce <StartDefaultTask+0x7a>
		  {
			  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET))
 80003ac:	e002      	b.n	80003b4 <StartDefaultTask+0x60>
				  osDelay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f003 fa10 	bl	80037d4 <osDelay>
			  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET))
 80003b4:	2101      	movs	r1, #1
 80003b6:	480a      	ldr	r0, [pc, #40]	; (80003e0 <StartDefaultTask+0x8c>)
 80003b8:	f001 feac 	bl	8002114 <HAL_GPIO_ReadPin>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d1f5      	bne.n	80003ae <StartDefaultTask+0x5a>
			  key_flag_right = 0;
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <StartDefaultTask+0x84>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
			  key_flag_left = 1;
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <StartDefaultTask+0x88>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
		  }
	  }
    osDelay(1);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f003 fa00 	bl	80037d4 <osDelay>
	  if(key_flag_right == 0 && key_flag_left == 0)
 80003d4:	e7c2      	b.n	800035c <StartDefaultTask+0x8>
 80003d6:	bf00      	nop
 80003d8:	200015b0 	.word	0x200015b0
 80003dc:	20001a1c 	.word	0x20001a1c
 80003e0:	40010800 	.word	0x40010800

080003e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	  snake_init();
 80003ec:	f000 fe54 	bl	8001098 <snake_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f003 f9ef 	bl	80037d4 <osDelay>
 80003f6:	e7fb      	b.n	80003f0 <StartTask02+0xc>

080003f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d101      	bne.n	800040e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800040a:	f001 fbdf 	bl	8001bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40012c00 	.word	0x40012c00

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <sendCommand>:


I2C_HandleTypeDef hi2c1;

void sendCommand(uint8_t command_s)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af02      	add	r7, sp, #8
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	temp_ssd1306[0] = COMAND;
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <sendCommand+0x30>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
	temp_ssd1306[1] = command_s;
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <sendCommand+0x30>)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1,OLED_adress,temp_ssd1306,2,100);
 800043e:	2364      	movs	r3, #100	; 0x64
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2302      	movs	r3, #2
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <sendCommand+0x30>)
 8000446:	2178      	movs	r1, #120	; 0x78
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <sendCommand+0x34>)
 800044a:	f001 ffbf 	bl	80023cc <HAL_I2C_Master_Transmit>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000848 	.word	0x20000848
 800045c:	200019c0 	.word	0x200019c0

08000460 <LCD_Goto>:
	temp_ssd1306[1] = data_s;
	HAL_I2C_Master_Transmit(&hi2c1,OLED_adress,temp_ssd1306,2,100);
}

void LCD_Goto(unsigned char x, unsigned char y)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	460a      	mov	r2, r1
 800046a:	71fb      	strb	r3, [r7, #7]
 800046c:	4613      	mov	r3, r2
 800046e:	71bb      	strb	r3, [r7, #6]
	LCD_X = x;
 8000470:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <LCD_Goto+0x54>)
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	7013      	strb	r3, [r2, #0]
	LCD_Y = y;
 8000476:	4a10      	ldr	r2, [pc, #64]	; (80004b8 <LCD_Goto+0x58>)
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	7013      	strb	r3, [r2, #0]
	sendCommand(0xB0 + y);
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	3b50      	subs	r3, #80	; 0x50
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffd0 	bl	8000428 <sendCommand>
	sendCommand((0x02 + x) & 0x0F); //loweR case sendCommand(x & 0xf);
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	3302      	adds	r3, #2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	f003 030f 	and.w	r3, r3, #15
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ffc7 	bl	8000428 <sendCommand>
	sendCommand(0x10 | (x >> 4));//(0x10 | (x >> 4));//4
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f043 0310 	orr.w	r3, r3, #16
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ffbe 	bl	8000428 <sendCommand>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20002224 	.word	0x20002224
 80004b8:	20002225 	.word	0x20002225

080004bc <LCD_Clear>:

void LCD_Clear(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	unsigned short i;
	unsigned short x=0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	80bb      	strh	r3, [r7, #4]
	unsigned short y=0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	807b      	strh	r3, [r7, #2]
	LCD_Goto(0,0);
 80004ca:	2100      	movs	r1, #0
 80004cc:	2000      	movs	r0, #0
 80004ce:	f7ff ffc7 	bl	8000460 <LCD_Goto>

	for (i=0; i<(OLED_BUFFERSIZE); i++) //(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)
 80004d2:	2300      	movs	r3, #0
 80004d4:	80fb      	strh	r3, [r7, #6]
 80004d6:	e016      	b.n	8000506 <LCD_Clear+0x4a>
	{
		LCD_Char(' ');
 80004d8:	2020      	movs	r0, #32
 80004da:	f000 f889 	bl	80005f0 <LCD_Char>
		x ++;
 80004de:	88bb      	ldrh	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	80bb      	strh	r3, [r7, #4]
		if(x>OLED_WIDTH)
 80004e4:	88bb      	ldrh	r3, [r7, #4]
 80004e6:	2b80      	cmp	r3, #128	; 0x80
 80004e8:	d90a      	bls.n	8000500 <LCD_Clear+0x44>
		{
			x =0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	80bb      	strh	r3, [r7, #4]
			y++;
 80004ee:	887b      	ldrh	r3, [r7, #2]
 80004f0:	3301      	adds	r3, #1
 80004f2:	807b      	strh	r3, [r7, #2]
			LCD_Goto(0,y);
 80004f4:	887b      	ldrh	r3, [r7, #2]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	2000      	movs	r0, #0
 80004fc:	f7ff ffb0 	bl	8000460 <LCD_Goto>
	for (i=0; i<(OLED_BUFFERSIZE); i++) //(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	3301      	adds	r3, #1
 8000504:	80fb      	strh	r3, [r7, #6]
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800050c:	d3e4      	bcc.n	80004d8 <LCD_Clear+0x1c>
		}
	}
	LCD_X =OLED_DEFAULT_SPACE;
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <LCD_Clear+0x68>)
 8000510:	2205      	movs	r2, #5
 8000512:	701a      	strb	r2, [r3, #0]
	LCD_Y =0;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <LCD_Clear+0x6c>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20002224 	.word	0x20002224
 8000528:	20002225 	.word	0x20002225

0800052c <OLED_print_all_screen>:

void OLED_print_all_screen(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
	int i = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
	int f ;
	temp_screen[0][0] = 0x40;
 8000536:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <OLED_print_all_screen+0xbc>)
 8000538:	2240      	movs	r2, #64	; 0x40
 800053a:	701a      	strb	r2, [r3, #0]
	temp_screen[1][0] = 0x40;
 800053c:	4b2a      	ldr	r3, [pc, #168]	; (80005e8 <OLED_print_all_screen+0xbc>)
 800053e:	2240      	movs	r2, #64	; 0x40
 8000540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	temp_screen[2][0] = 0x40;
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <OLED_print_all_screen+0xbc>)
 8000546:	2240      	movs	r2, #64	; 0x40
 8000548:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	temp_screen[3][0] = 0x40;
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <OLED_print_all_screen+0xbc>)
 800054e:	2240      	movs	r2, #64	; 0x40
 8000550:	f883 2183 	strb.w	r2, [r3, #387]	; 0x183
	temp_screen[4][0] = 0x40;
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <OLED_print_all_screen+0xbc>)
 8000556:	2240      	movs	r2, #64	; 0x40
 8000558:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	temp_screen[5][0] = 0x40;
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <OLED_print_all_screen+0xbc>)
 800055e:	2240      	movs	r2, #64	; 0x40
 8000560:	f883 2285 	strb.w	r2, [r3, #645]	; 0x285
	temp_screen[6][0] = 0x40;
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <OLED_print_all_screen+0xbc>)
 8000566:	2240      	movs	r2, #64	; 0x40
 8000568:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
	temp_screen[7][0] = 0x40;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <OLED_print_all_screen+0xbc>)
 800056e:	2240      	movs	r2, #64	; 0x40
 8000570:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387

	while(i < 8)
 8000574:	e015      	b.n	80005a2 <OLED_print_all_screen+0x76>
	{
		LCD_Goto(0, i);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ff6f 	bl	8000460 <LCD_Goto>
		HAL_I2C_Master_Transmit(&hi2c1, OLED_adress, temp_screen[i++], 129, 1000);
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	1c53      	adds	r3, r2, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4613      	mov	r3, r2
 800058a:	01db      	lsls	r3, r3, #7
 800058c:	4413      	add	r3, r2
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <OLED_print_all_screen+0xbc>)
 8000590:	441a      	add	r2, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2381      	movs	r3, #129	; 0x81
 800059a:	2178      	movs	r1, #120	; 0x78
 800059c:	4813      	ldr	r0, [pc, #76]	; (80005ec <OLED_print_all_screen+0xc0>)
 800059e:	f001 ff15 	bl	80023cc <HAL_I2C_Master_Transmit>
	while(i < 8)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b07      	cmp	r3, #7
 80005a6:	dde6      	ble.n	8000576 <OLED_print_all_screen+0x4a>
	}
	i = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
	while (i < 8)
 80005ac:	e014      	b.n	80005d8 <OLED_print_all_screen+0xac>
	{
		f = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	603b      	str	r3, [r7, #0]
		while(f < 129)
 80005b2:	e00b      	b.n	80005cc <OLED_print_all_screen+0xa0>
			temp_screen[i][f++] = 0x00;
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	1c53      	adds	r3, r2, #1
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <OLED_print_all_screen+0xbc>)
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	01db      	lsls	r3, r3, #7
 80005c2:	440b      	add	r3, r1
 80005c4:	4403      	add	r3, r0
 80005c6:	4413      	add	r3, r2
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
		while(f < 129)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b80      	cmp	r3, #128	; 0x80
 80005d0:	ddf0      	ble.n	80005b4 <OLED_print_all_screen+0x88>
		i++;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
	while (i < 8)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dde7      	ble.n	80005ae <OLED_print_all_screen+0x82>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200015b8 	.word	0x200015b8
 80005ec:	200019c0 	.word	0x200019c0

080005f0 <LCD_Char>:
		i++;
	}
}

void LCD_Char(unsigned int c)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	6078      	str	r0, [r7, #4]
	unsigned char x = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
	temp_char_ssd1306[0] = 0x40;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <LCD_Char+0x78>)
 80005fe:	2240      	movs	r2, #64	; 0x40
 8000600:	701a      	strb	r2, [r3, #0]
	for (x=0; x<5; x++)
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	e00e      	b.n	8000626 <LCD_Char+0x36>
	{
		temp_char_ssd1306[x+1] = LCD_Buffer_ssd1306[c*5+x];
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4613      	mov	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	441a      	add	r2, r3
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	441a      	add	r2, r3
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	3301      	adds	r3, #1
 8000618:	4914      	ldr	r1, [pc, #80]	; (800066c <LCD_Char+0x7c>)
 800061a:	5c89      	ldrb	r1, [r1, r2]
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <LCD_Char+0x78>)
 800061e:	54d1      	strb	r1, [r2, r3]
	for (x=0; x<5; x++)
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	3301      	adds	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d9ed      	bls.n	8000608 <LCD_Char+0x18>
	}
	temp_char_ssd1306[6] = 0;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <LCD_Char+0x78>)
 800062e:	2200      	movs	r2, #0
 8000630:	719a      	strb	r2, [r3, #6]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_adress, temp_char_ssd1306, 7,1000);
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2307      	movs	r3, #7
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <LCD_Char+0x78>)
 800063c:	2178      	movs	r1, #120	; 0x78
 800063e:	480c      	ldr	r0, [pc, #48]	; (8000670 <LCD_Char+0x80>)
 8000640:	f001 fec4 	bl	80023cc <HAL_I2C_Master_Transmit>

	LCD_X += 8;
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <LCD_Char+0x84>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3308      	adds	r3, #8
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <LCD_Char+0x84>)
 800064e:	701a      	strb	r2, [r3, #0]
	if(LCD_X>OLED_WIDTH)
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <LCD_Char+0x84>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b80      	cmp	r3, #128	; 0x80
 8000656:	d902      	bls.n	800065e <LCD_Char+0x6e>
	{
		LCD_X = OLED_DEFAULT_SPACE;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <LCD_Char+0x84>)
 800065a:	2205      	movs	r2, #5
 800065c:	701a      	strb	r2, [r3, #0]
	}
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000084c 	.word	0x2000084c
 800066c:	20000000 	.word	0x20000000
 8000670:	200019c0 	.word	0x200019c0
 8000674:	20002224 	.word	0x20002224

08000678 <OLED_string>:


void OLED_string(char *string)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	while(*string != '\0')
 8000680:	e007      	b.n	8000692 <OLED_string+0x1a>
	{
		LCD_Char(*string);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ffb2 	bl	80005f0 <LCD_Char>
		string++;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3301      	adds	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
	while(*string != '\0')
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1f3      	bne.n	8000682 <OLED_string+0xa>
	}
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <OLED_init>:
	}
}


void OLED_init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
		// Turn display off
		sendCommand(OLED_DISPLAYOFF);
 80006a8:	20ae      	movs	r0, #174	; 0xae
 80006aa:	f7ff febd 	bl	8000428 <sendCommand>

		sendCommand(OLED_SETDISPLAYCLOCKDIV);
 80006ae:	20d5      	movs	r0, #213	; 0xd5
 80006b0:	f7ff feba 	bl	8000428 <sendCommand>
		sendCommand(0x80);
 80006b4:	2080      	movs	r0, #128	; 0x80
 80006b6:	f7ff feb7 	bl	8000428 <sendCommand>

		sendCommand(OLED_SETMULTIPLEX);
 80006ba:	20a8      	movs	r0, #168	; 0xa8
 80006bc:	f7ff feb4 	bl	8000428 <sendCommand>
		//sendCommand(0x1F);//128x32
		sendCommand(0x3F);//128x64
 80006c0:	203f      	movs	r0, #63	; 0x3f
 80006c2:	f7ff feb1 	bl	8000428 <sendCommand>

		sendCommand(OLED_SETDISPLAYOFFSET);
 80006c6:	20d3      	movs	r0, #211	; 0xd3
 80006c8:	f7ff feae 	bl	8000428 <sendCommand>
		sendCommand(0x00);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff feab 	bl	8000428 <sendCommand>

		sendCommand(OLED_SETSTARTLINE | 0x00);//0
 80006d2:	2040      	movs	r0, #64	; 0x40
 80006d4:	f7ff fea8 	bl	8000428 <sendCommand>

		// We use internal charge pump
		sendCommand(OLED_CHARGEPUMP);
 80006d8:	208d      	movs	r0, #141	; 0x8d
 80006da:	f7ff fea5 	bl	8000428 <sendCommand>
		sendCommand(0x14);
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff fea2 	bl	8000428 <sendCommand>

		// Horizontal memory mode
		sendCommand(OLED_MEMORYMODE);
 80006e4:	2020      	movs	r0, #32
 80006e6:	f7ff fe9f 	bl	8000428 <sendCommand>
		sendCommand(0x00);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff fe9c 	bl	8000428 <sendCommand>

		sendCommand(OLED_SEGREMAP | 0x1);
 80006f0:	20a1      	movs	r0, #161	; 0xa1
 80006f2:	f7ff fe99 	bl	8000428 <sendCommand>

		sendCommand(OLED_COMSCANDEC);
 80006f6:	20c8      	movs	r0, #200	; 0xc8
 80006f8:	f7ff fe96 	bl	8000428 <sendCommand>

		sendCommand(OLED_SETCOMPINS);
 80006fc:	20da      	movs	r0, #218	; 0xda
 80006fe:	f7ff fe93 	bl	8000428 <sendCommand>
//		sendCommand(0x02);//128x32
		sendCommand(0x12);//128x64
 8000702:	2012      	movs	r0, #18
 8000704:	f7ff fe90 	bl	8000428 <sendCommand>

		// Max contrast
		sendCommand(OLED_SETCONTRAST);
 8000708:	2081      	movs	r0, #129	; 0x81
 800070a:	f7ff fe8d 	bl	8000428 <sendCommand>
//		sendCommand(0x0F);//0xCF 15
//		sendCommand(0xCF);//0xCF 207
		sendCommand(0xFA); //250
 800070e:	20fa      	movs	r0, #250	; 0xfa
 8000710:	f7ff fe8a 	bl	8000428 <sendCommand>

		sendCommand(OLED_SETPRECHARGE);
 8000714:	20d9      	movs	r0, #217	; 0xd9
 8000716:	f7ff fe87 	bl	8000428 <sendCommand>
		sendCommand(0xF1);
 800071a:	20f1      	movs	r0, #241	; 0xf1
 800071c:	f7ff fe84 	bl	8000428 <sendCommand>

		sendCommand(OLED_SETVCOMDETECT);
 8000720:	20db      	movs	r0, #219	; 0xdb
 8000722:	f7ff fe81 	bl	8000428 <sendCommand>
//		sendCommand(0x10);//0x40
		sendCommand(0x40);//0x40
 8000726:	2040      	movs	r0, #64	; 0x40
 8000728:	f7ff fe7e 	bl	8000428 <sendCommand>

		sendCommand(OLED_DISPLAYALLON_RESUME);
 800072c:	20a4      	movs	r0, #164	; 0xa4
 800072e:	f7ff fe7b 	bl	8000428 <sendCommand>

		// Non-inverted display
		sendCommand(OLED_NORMALDISPLAY);
 8000732:	20a6      	movs	r0, #166	; 0xa6
 8000734:	f7ff fe78 	bl	8000428 <sendCommand>

		// Turn display back on
		sendCommand(OLED_DISPLAYON);
 8000738:	20af      	movs	r0, #175	; 0xaf
 800073a:	f7ff fe75 	bl	8000428 <sendCommand>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_MspInit+0x68>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_MspInit+0x68>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_MspInit+0x68>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_MspInit+0x68>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_MspInit+0x68>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x68>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	210f      	movs	r1, #15
 800077e:	f06f 0001 	mvn.w	r0, #1
 8000782:	f001 fb18 	bl	8001db6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_MspInit+0x6c>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_MspInit+0x6c>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010000 	.word	0x40010000

080007b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <HAL_I2C_MspInit+0x90>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d132      	bne.n	800083a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_I2C_MspInit+0x94>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <HAL_I2C_MspInit+0x94>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <HAL_I2C_MspInit+0x94>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f2:	2312      	movs	r3, #18
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4812      	ldr	r0, [pc, #72]	; (800084c <HAL_I2C_MspInit+0x98>)
 8000802:	f001 fb03 	bl	8001e0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_I2C_MspInit+0x9c>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
 800081c:	4a0c      	ldr	r2, [pc, #48]	; (8000850 <HAL_I2C_MspInit+0x9c>)
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_I2C_MspInit+0x94>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_I2C_MspInit+0x94>)
 8000828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_I2C_MspInit+0x94>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40005400 	.word	0x40005400
 8000848:	40021000 	.word	0x40021000
 800084c:	40010c00 	.word	0x40010c00
 8000850:	40010000 	.word	0x40010000

08000854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	2019      	movs	r0, #25
 800086a:	f001 faa4 	bl	8001db6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800086e:	2019      	movs	r0, #25
 8000870:	f001 fabd 	bl	8001dee <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <HAL_InitTick+0x9c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_InitTick+0x9c>)
 800087a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_InitTick+0x9c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800088c:	f107 0210 	add.w	r2, r7, #16
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f002 fc9a 	bl	80031d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800089c:	f002 fc84 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 80008a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <HAL_InitTick+0xa0>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_InitTick+0xa4>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_InitTick+0xa8>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_InitTick+0xa4>)
 80008b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_InitTick+0xa4>)
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_InitTick+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_InitTick+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_InitTick+0xa4>)
 80008d2:	f002 fccb 	bl	800326c <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_InitTick+0xa4>)
 80008de:	f002 fd1d 	bl	800331c <HAL_TIM_Base_Start_IT>
 80008e2:	4603      	mov	r3, r0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	20002228 	.word	0x20002228
 80008fc:	40012c00 	.word	0x40012c00

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
	...

0800092c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <TIM1_UP_IRQHandler+0x10>)
 8000932:	f002 fd45 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20002228 	.word	0x20002228

08000940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
	return 1;
 8000944:	2301      	movs	r3, #1
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <_kill>:

int _kill(int pid, int sig)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000958:	f004 f8da 	bl	8004b10 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	2216      	movs	r2, #22
 8000960:	601a      	str	r2, [r3, #0]
	return -1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_exit>:

void _exit (int status)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000976:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffe7 	bl	800094e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000980:	e7fe      	b.n	8000980 <_exit+0x12>

08000982 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e00a      	b.n	80009aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000994:	f3af 8000 	nop.w
 8000998:	4601      	mov	r1, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	60ba      	str	r2, [r7, #8]
 80009a0:	b2ca      	uxtb	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbf0      	blt.n	8000994 <_read+0x12>
	}

return len;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e009      	b.n	80009e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	60ba      	str	r2, [r7, #8]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	3301      	adds	r3, #1
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	dbf1      	blt.n	80009ce <_write+0x12>
	}
	return len;
 80009ea:	687b      	ldr	r3, [r7, #4]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_close>:

int _close(int file)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return -1;
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <_isatty>:

int _isatty(int file)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	return 1;
 8000a30:	2301      	movs	r3, #1
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d207      	bcs.n	8000a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a84:	f004 f844 	bl	8004b10 <__errno>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a92:	e009      	b.n	8000aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <_sbrk+0x64>)
 8000aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20005000 	.word	0x20005000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000854 	.word	0x20000854
 8000abc:	20002288 	.word	0x20002288

08000ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <y_pixel_bit_return>:

int snake_len = 8;
int init_flag = 0;

uint8_t y_pixel_bit_return(int y, int fl)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	int ost;
	ost = y % 4;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	425a      	negs	r2, r3
 8000ada:	f003 0303 	and.w	r3, r3, #3
 8000ade:	f002 0203 	and.w	r2, r2, #3
 8000ae2:	bf58      	it	pl
 8000ae4:	4253      	negpl	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

	if(ost == 0)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d106      	bne.n	8000afc <y_pixel_bit_return+0x30>
		return(fl == 0 ? 0x02 : 0x01);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <y_pixel_bit_return+0x2c>
 8000af4:	2302      	movs	r3, #2
 8000af6:	e020      	b.n	8000b3a <y_pixel_bit_return+0x6e>
 8000af8:	2301      	movs	r3, #1
 8000afa:	e01e      	b.n	8000b3a <y_pixel_bit_return+0x6e>
	else if(ost == 1)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d106      	bne.n	8000b10 <y_pixel_bit_return+0x44>
		return(fl == 0 ? 0x08 : 0x04);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <y_pixel_bit_return+0x40>
 8000b08:	2308      	movs	r3, #8
 8000b0a:	e016      	b.n	8000b3a <y_pixel_bit_return+0x6e>
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	e014      	b.n	8000b3a <y_pixel_bit_return+0x6e>
	else if(ost == 2)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d106      	bne.n	8000b24 <y_pixel_bit_return+0x58>
		return(fl == 0 ? 0x20 : 0x10);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <y_pixel_bit_return+0x54>
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	e00c      	b.n	8000b3a <y_pixel_bit_return+0x6e>
 8000b20:	2310      	movs	r3, #16
 8000b22:	e00a      	b.n	8000b3a <y_pixel_bit_return+0x6e>
	else if(ost == 3)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d106      	bne.n	8000b38 <y_pixel_bit_return+0x6c>
		return(fl == 0 ? 0x80 : 0x40);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <y_pixel_bit_return+0x68>
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	e002      	b.n	8000b3a <y_pixel_bit_return+0x6e>
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	e000      	b.n	8000b3a <y_pixel_bit_return+0x6e>
	return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <game_over>:

void game_over(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	LCD_Clear();
 8000b48:	f7ff fcb8 	bl	80004bc <LCD_Clear>
	LCD_Goto(40, 2);
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	2028      	movs	r0, #40	; 0x28
 8000b50:	f7ff fc86 	bl	8000460 <LCD_Goto>
	OLED_string("GAME OVER");
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <game_over+0x38>)
 8000b56:	f7ff fd8f 	bl	8000678 <OLED_string>
	LCD_Goto(32, 4);
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f7ff fc7f 	bl	8000460 <LCD_Goto>
	OLED_string("PLEASE PUSH");
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <game_over+0x3c>)
 8000b64:	f7ff fd88 	bl	8000678 <OLED_string>
	LCD_Goto(32, 6);
 8000b68:	2106      	movs	r1, #6
 8000b6a:	2020      	movs	r0, #32
 8000b6c:	f7ff fc78 	bl	8000460 <LCD_Goto>
	OLED_string("RESRT on STM");
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <game_over+0x40>)
 8000b72:	f7ff fd81 	bl	8000678 <OLED_string>

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	08005d28 	.word	0x08005d28
 8000b80:	08005d34 	.word	0x08005d34
 8000b84:	08005d40 	.word	0x08005d40

08000b88 <snake_screen_print>:

void snake_screen_print()
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
	int y = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
	int x;

	while(y < OLED_HEIGHT / 8)
 8000b92:	e014      	b.n	8000bbe <snake_screen_print+0x36>
	{
		x = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
		while(x < OLED_WIDTH + 1)
 8000b98:	e00b      	b.n	8000bb2 <snake_screen_print+0x2a>
			temp_screen[y][x++] = '\0';
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	1c53      	adds	r3, r2, #1
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	48a8      	ldr	r0, [pc, #672]	; (8000e44 <snake_screen_print+0x2bc>)
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	01db      	lsls	r3, r3, #7
 8000ba8:	440b      	add	r3, r1
 8000baa:	4403      	add	r3, r0
 8000bac:	4413      	add	r3, r2
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
		while(x < OLED_WIDTH + 1)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b80      	cmp	r3, #128	; 0x80
 8000bb6:	ddf0      	ble.n	8000b9a <snake_screen_print+0x12>
		y++;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
	while(y < OLED_HEIGHT / 8)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	dde7      	ble.n	8000b94 <snake_screen_print+0xc>
	}
	y = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
	while(y < OLED_HEIGHT / 2) // 32
 8000bc8:	e131      	b.n	8000e2e <snake_screen_print+0x2a6>
	{
		x = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
		while(x < OLED_WIDTH / 2) // 64
 8000bce:	e127      	b.n	8000e20 <snake_screen_print+0x298>
		{
			if(snake_vector[y][x] == 'R' || snake_vector[y][x] == 'U' || snake_vector[y][x] == 'D' || snake_vector[y][x] == 'L'
 8000bd0:	4a9d      	ldr	r2, [pc, #628]	; (8000e48 <snake_screen_print+0x2c0>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	441a      	add	r2, r3
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b52      	cmp	r3, #82	; 0x52
 8000be0:	d03e      	beq.n	8000c60 <snake_screen_print+0xd8>
 8000be2:	4a99      	ldr	r2, [pc, #612]	; (8000e48 <snake_screen_print+0x2c0>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	019b      	lsls	r3, r3, #6
 8000be8:	441a      	add	r2, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b55      	cmp	r3, #85	; 0x55
 8000bf2:	d035      	beq.n	8000c60 <snake_screen_print+0xd8>
 8000bf4:	4a94      	ldr	r2, [pc, #592]	; (8000e48 <snake_screen_print+0x2c0>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	441a      	add	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b44      	cmp	r3, #68	; 0x44
 8000c04:	d02c      	beq.n	8000c60 <snake_screen_print+0xd8>
 8000c06:	4a90      	ldr	r2, [pc, #576]	; (8000e48 <snake_screen_print+0x2c0>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	019b      	lsls	r3, r3, #6
 8000c0c:	441a      	add	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b4c      	cmp	r3, #76	; 0x4c
 8000c16:	d023      	beq.n	8000c60 <snake_screen_print+0xd8>
				|| snake_vector[y][x] == 'r' || snake_vector[y][x] == 'u' || snake_vector[y][x] == 'd' || snake_vector[y][x] == 'l'	)
 8000c18:	4a8b      	ldr	r2, [pc, #556]	; (8000e48 <snake_screen_print+0x2c0>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	019b      	lsls	r3, r3, #6
 8000c1e:	441a      	add	r2, r3
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b72      	cmp	r3, #114	; 0x72
 8000c28:	d01a      	beq.n	8000c60 <snake_screen_print+0xd8>
 8000c2a:	4a87      	ldr	r2, [pc, #540]	; (8000e48 <snake_screen_print+0x2c0>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	019b      	lsls	r3, r3, #6
 8000c30:	441a      	add	r2, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b75      	cmp	r3, #117	; 0x75
 8000c3a:	d011      	beq.n	8000c60 <snake_screen_print+0xd8>
 8000c3c:	4a82      	ldr	r2, [pc, #520]	; (8000e48 <snake_screen_print+0x2c0>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	441a      	add	r2, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d008      	beq.n	8000c60 <snake_screen_print+0xd8>
 8000c4e:	4a7e      	ldr	r2, [pc, #504]	; (8000e48 <snake_screen_print+0x2c0>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	019b      	lsls	r3, r3, #6
 8000c54:	441a      	add	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b6c      	cmp	r3, #108	; 0x6c
 8000c5e:	d146      	bne.n	8000cee <snake_screen_print+0x166>
			{
				temp_screen[y / 4][x * 2 + 1] |= y_pixel_bit_return(y, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff32 	bl	8000acc <y_pixel_bit_return>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461c      	mov	r4, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da00      	bge.n	8000c74 <snake_screen_print+0xec>
 8000c72:	3303      	adds	r3, #3
 8000c74:	109b      	asrs	r3, r3, #2
 8000c76:	461a      	mov	r2, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	1c59      	adds	r1, r3, #1
 8000c7e:	4871      	ldr	r0, [pc, #452]	; (8000e44 <snake_screen_print+0x2bc>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	01db      	lsls	r3, r3, #7
 8000c84:	4413      	add	r3, r2
 8000c86:	4403      	add	r3, r0
 8000c88:	440b      	add	r3, r1
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	6839      	ldr	r1, [r7, #0]
 8000c8e:	0049      	lsls	r1, r1, #1
 8000c90:	3101      	adds	r1, #1
 8000c92:	4323      	orrs	r3, r4
 8000c94:	b2dc      	uxtb	r4, r3
 8000c96:	486b      	ldr	r0, [pc, #428]	; (8000e44 <snake_screen_print+0x2bc>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	01db      	lsls	r3, r3, #7
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4403      	add	r3, r0
 8000ca0:	440b      	add	r3, r1
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	701a      	strb	r2, [r3, #0]
				temp_screen[y / 4][x * 2 + 2] |= y_pixel_bit_return(y, 1);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff0f 	bl	8000acc <y_pixel_bit_return>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461c      	mov	r4, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	da00      	bge.n	8000cba <snake_screen_print+0x132>
 8000cb8:	3303      	adds	r3, #3
 8000cba:	109b      	asrs	r3, r3, #2
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	0059      	lsls	r1, r3, #1
 8000cc4:	485f      	ldr	r0, [pc, #380]	; (8000e44 <snake_screen_print+0x2bc>)
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	01db      	lsls	r3, r3, #7
 8000cca:	4413      	add	r3, r2
 8000ccc:	4403      	add	r3, r0
 8000cce:	440b      	add	r3, r1
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	6839      	ldr	r1, [r7, #0]
 8000cd4:	3101      	adds	r1, #1
 8000cd6:	0049      	lsls	r1, r1, #1
 8000cd8:	4323      	orrs	r3, r4
 8000cda:	b2dc      	uxtb	r4, r3
 8000cdc:	4859      	ldr	r0, [pc, #356]	; (8000e44 <snake_screen_print+0x2bc>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	01db      	lsls	r3, r3, #7
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4403      	add	r3, r0
 8000ce6:	440b      	add	r3, r1
 8000ce8:	4622      	mov	r2, r4
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e095      	b.n	8000e1a <snake_screen_print+0x292>
			}
			else if(snake_vector[y][x])
 8000cee:	4a56      	ldr	r2, [pc, #344]	; (8000e48 <snake_screen_print+0x2c0>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	019b      	lsls	r3, r3, #6
 8000cf4:	441a      	add	r2, r3
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f000 808c 	beq.w	8000e1a <snake_screen_print+0x292>
			{
				temp_screen[y / 4][x * 2 + 1] |= y_pixel_bit_return(y, 0);
 8000d02:	2100      	movs	r1, #0
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fee1 	bl	8000acc <y_pixel_bit_return>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461c      	mov	r4, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	da00      	bge.n	8000d16 <snake_screen_print+0x18e>
 8000d14:	3303      	adds	r3, #3
 8000d16:	109b      	asrs	r3, r3, #2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	1c59      	adds	r1, r3, #1
 8000d20:	4848      	ldr	r0, [pc, #288]	; (8000e44 <snake_screen_print+0x2bc>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	01db      	lsls	r3, r3, #7
 8000d26:	4413      	add	r3, r2
 8000d28:	4403      	add	r3, r0
 8000d2a:	440b      	add	r3, r1
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	0049      	lsls	r1, r1, #1
 8000d32:	3101      	adds	r1, #1
 8000d34:	4323      	orrs	r3, r4
 8000d36:	b2dc      	uxtb	r4, r3
 8000d38:	4842      	ldr	r0, [pc, #264]	; (8000e44 <snake_screen_print+0x2bc>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	01db      	lsls	r3, r3, #7
 8000d3e:	4413      	add	r3, r2
 8000d40:	4403      	add	r3, r0
 8000d42:	440b      	add	r3, r1
 8000d44:	4622      	mov	r2, r4
 8000d46:	701a      	strb	r2, [r3, #0]
				temp_screen[y / 4][x * 2 + 2] |= y_pixel_bit_return(y, 1);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff febe 	bl	8000acc <y_pixel_bit_return>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461c      	mov	r4, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	da00      	bge.n	8000d5c <snake_screen_print+0x1d4>
 8000d5a:	3303      	adds	r3, #3
 8000d5c:	109b      	asrs	r3, r3, #2
 8000d5e:	461a      	mov	r2, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	0059      	lsls	r1, r3, #1
 8000d66:	4837      	ldr	r0, [pc, #220]	; (8000e44 <snake_screen_print+0x2bc>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	01db      	lsls	r3, r3, #7
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4403      	add	r3, r0
 8000d70:	440b      	add	r3, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	6839      	ldr	r1, [r7, #0]
 8000d76:	3101      	adds	r1, #1
 8000d78:	0049      	lsls	r1, r1, #1
 8000d7a:	4323      	orrs	r3, r4
 8000d7c:	b2dc      	uxtb	r4, r3
 8000d7e:	4831      	ldr	r0, [pc, #196]	; (8000e44 <snake_screen_print+0x2bc>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	01db      	lsls	r3, r3, #7
 8000d84:	4413      	add	r3, r2
 8000d86:	4403      	add	r3, r0
 8000d88:	440b      	add	r3, r1
 8000d8a:	4622      	mov	r2, r4
 8000d8c:	701a      	strb	r2, [r3, #0]
				temp_screen[y / 4][x * 2 + 1] |= y_pixel_bit_return(y, 1);
 8000d8e:	2101      	movs	r1, #1
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fe9b 	bl	8000acc <y_pixel_bit_return>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461c      	mov	r4, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da00      	bge.n	8000da2 <snake_screen_print+0x21a>
 8000da0:	3303      	adds	r3, #3
 8000da2:	109b      	asrs	r3, r3, #2
 8000da4:	461a      	mov	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	1c59      	adds	r1, r3, #1
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <snake_screen_print+0x2bc>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	01db      	lsls	r3, r3, #7
 8000db2:	4413      	add	r3, r2
 8000db4:	4403      	add	r3, r0
 8000db6:	440b      	add	r3, r1
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	0049      	lsls	r1, r1, #1
 8000dbe:	3101      	adds	r1, #1
 8000dc0:	4323      	orrs	r3, r4
 8000dc2:	b2dc      	uxtb	r4, r3
 8000dc4:	481f      	ldr	r0, [pc, #124]	; (8000e44 <snake_screen_print+0x2bc>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	01db      	lsls	r3, r3, #7
 8000dca:	4413      	add	r3, r2
 8000dcc:	4403      	add	r3, r0
 8000dce:	440b      	add	r3, r1
 8000dd0:	4622      	mov	r2, r4
 8000dd2:	701a      	strb	r2, [r3, #0]
				temp_screen[y / 4][x * 2 + 2] |= y_pixel_bit_return(y, 0);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fe78 	bl	8000acc <y_pixel_bit_return>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461c      	mov	r4, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da00      	bge.n	8000de8 <snake_screen_print+0x260>
 8000de6:	3303      	adds	r3, #3
 8000de8:	109b      	asrs	r3, r3, #2
 8000dea:	461a      	mov	r2, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	0059      	lsls	r1, r3, #1
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <snake_screen_print+0x2bc>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	01db      	lsls	r3, r3, #7
 8000df8:	4413      	add	r3, r2
 8000dfa:	4403      	add	r3, r0
 8000dfc:	440b      	add	r3, r1
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	3101      	adds	r1, #1
 8000e04:	0049      	lsls	r1, r1, #1
 8000e06:	4323      	orrs	r3, r4
 8000e08:	b2dc      	uxtb	r4, r3
 8000e0a:	480e      	ldr	r0, [pc, #56]	; (8000e44 <snake_screen_print+0x2bc>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	01db      	lsls	r3, r3, #7
 8000e10:	4413      	add	r3, r2
 8000e12:	4403      	add	r3, r0
 8000e14:	440b      	add	r3, r1
 8000e16:	4622      	mov	r2, r4
 8000e18:	701a      	strb	r2, [r3, #0]
			}
			x++;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
		while(x < OLED_WIDTH / 2) // 64
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b3f      	cmp	r3, #63	; 0x3f
 8000e24:	f77f aed4 	ble.w	8000bd0 <snake_screen_print+0x48>
		}
		y++;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	607b      	str	r3, [r7, #4]
	while(y < OLED_HEIGHT / 2) // 32
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b1f      	cmp	r3, #31
 8000e32:	f77f aeca 	ble.w	8000bca <snake_screen_print+0x42>
	}
	OLED_print_all_screen();
 8000e36:	f7ff fb79 	bl	800052c <OLED_print_all_screen>
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd90      	pop	{r4, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200015b8 	.word	0x200015b8
 8000e48:	20001a20 	.word	0x20001a20

08000e4c <snake_move>:

void snake_move()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
	int y = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
	int x;
	int tail_fl = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
	int head_fl = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]

	while(y < OLED_HEIGHT / 2) // 32
 8000e5e:	e10c      	b.n	800107a <snake_move+0x22e>
	{
		x = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
		while(x < OLED_WIDTH / 2) // 64
 8000e64:	e102      	b.n	800106c <snake_move+0x220>
		{
			if(!tail_fl && (snake_vector[y][x] == 'r' || snake_vector[y][x] == 'd' ||
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d12a      	bne.n	8000ec2 <snake_move+0x76>
 8000e6c:	4a87      	ldr	r2, [pc, #540]	; (800108c <snake_move+0x240>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	441a      	add	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b72      	cmp	r3, #114	; 0x72
 8000e7c:	d01a      	beq.n	8000eb4 <snake_move+0x68>
 8000e7e:	4a83      	ldr	r2, [pc, #524]	; (800108c <snake_move+0x240>)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	019b      	lsls	r3, r3, #6
 8000e84:	441a      	add	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b64      	cmp	r3, #100	; 0x64
 8000e8e:	d011      	beq.n	8000eb4 <snake_move+0x68>
					snake_vector[y][x] == 'l' || snake_vector[y][x] == 'u'))
 8000e90:	4a7e      	ldr	r2, [pc, #504]	; (800108c <snake_move+0x240>)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	441a      	add	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
			if(!tail_fl && (snake_vector[y][x] == 'r' || snake_vector[y][x] == 'd' ||
 8000e9e:	2b6c      	cmp	r3, #108	; 0x6c
 8000ea0:	d008      	beq.n	8000eb4 <snake_move+0x68>
					snake_vector[y][x] == 'l' || snake_vector[y][x] == 'u'))
 8000ea2:	4a7a      	ldr	r2, [pc, #488]	; (800108c <snake_move+0x240>)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	019b      	lsls	r3, r3, #6
 8000ea8:	441a      	add	r2, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b75      	cmp	r3, #117	; 0x75
 8000eb2:	d106      	bne.n	8000ec2 <snake_move+0x76>
			{
				tail_fl = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
				tail_move(x, y);
 8000eb8:	68f9      	ldr	r1, [r7, #12]
 8000eba:	68b8      	ldr	r0, [r7, #8]
 8000ebc:	f000 f9b2 	bl	8001224 <tail_move>
 8000ec0:	e0cb      	b.n	800105a <snake_move+0x20e>
			}
			else if(!head_fl && (snake_vector[y][x] == '0' || snake_vector[y][x] == '3' ||
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 80c8 	bne.w	800105a <snake_move+0x20e>
 8000eca:	4a70      	ldr	r2, [pc, #448]	; (800108c <snake_move+0x240>)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	019b      	lsls	r3, r3, #6
 8000ed0:	441a      	add	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b30      	cmp	r3, #48	; 0x30
 8000eda:	d01b      	beq.n	8000f14 <snake_move+0xc8>
 8000edc:	4a6b      	ldr	r2, [pc, #428]	; (800108c <snake_move+0x240>)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	441a      	add	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b33      	cmp	r3, #51	; 0x33
 8000eec:	d012      	beq.n	8000f14 <snake_move+0xc8>
					snake_vector[y][x] == '6' || snake_vector[y][x] == '9'))
 8000eee:	4a67      	ldr	r2, [pc, #412]	; (800108c <snake_move+0x240>)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	019b      	lsls	r3, r3, #6
 8000ef4:	441a      	add	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
			else if(!head_fl && (snake_vector[y][x] == '0' || snake_vector[y][x] == '3' ||
 8000efc:	2b36      	cmp	r3, #54	; 0x36
 8000efe:	d009      	beq.n	8000f14 <snake_move+0xc8>
					snake_vector[y][x] == '6' || snake_vector[y][x] == '9'))
 8000f00:	4a62      	ldr	r2, [pc, #392]	; (800108c <snake_move+0x240>)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	441a      	add	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b39      	cmp	r3, #57	; 0x39
 8000f10:	f040 80a3 	bne.w	800105a <snake_move+0x20e>
			{
				if(key_flag_left)
 8000f14:	4b5e      	ldr	r3, [pc, #376]	; (8001090 <snake_move+0x244>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d04a      	beq.n	8000fb2 <snake_move+0x166>
				{
					if(snake_vector[y][x] == '3')
 8000f1c:	4a5b      	ldr	r2, [pc, #364]	; (800108c <snake_move+0x240>)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	441a      	add	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4413      	add	r3, r2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b33      	cmp	r3, #51	; 0x33
 8000f2c:	d108      	bne.n	8000f40 <snake_move+0xf4>
						snake_vector[y][x] = '0';
 8000f2e:	4a57      	ldr	r2, [pc, #348]	; (800108c <snake_move+0x240>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	019b      	lsls	r3, r3, #6
 8000f34:	441a      	add	r2, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	4413      	add	r3, r2
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e034      	b.n	8000faa <snake_move+0x15e>
					else if(snake_vector[y][x] == '6')
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <snake_move+0x240>)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	019b      	lsls	r3, r3, #6
 8000f46:	441a      	add	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b36      	cmp	r3, #54	; 0x36
 8000f50:	d108      	bne.n	8000f64 <snake_move+0x118>
						snake_vector[y][x] = '3';
 8000f52:	4a4e      	ldr	r2, [pc, #312]	; (800108c <snake_move+0x240>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	019b      	lsls	r3, r3, #6
 8000f58:	441a      	add	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	2233      	movs	r2, #51	; 0x33
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e022      	b.n	8000faa <snake_move+0x15e>
					else if(snake_vector[y][x] == '9')
 8000f64:	4a49      	ldr	r2, [pc, #292]	; (800108c <snake_move+0x240>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	441a      	add	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b39      	cmp	r3, #57	; 0x39
 8000f74:	d108      	bne.n	8000f88 <snake_move+0x13c>
						snake_vector[y][x] = '6';
 8000f76:	4a45      	ldr	r2, [pc, #276]	; (800108c <snake_move+0x240>)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	019b      	lsls	r3, r3, #6
 8000f7c:	441a      	add	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	4413      	add	r3, r2
 8000f82:	2236      	movs	r2, #54	; 0x36
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e010      	b.n	8000faa <snake_move+0x15e>
					else if(snake_vector[y][x] == '0')
 8000f88:	4a40      	ldr	r2, [pc, #256]	; (800108c <snake_move+0x240>)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	441a      	add	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b30      	cmp	r3, #48	; 0x30
 8000f98:	d107      	bne.n	8000faa <snake_move+0x15e>
						snake_vector[y][x] = '9';
 8000f9a:	4a3c      	ldr	r2, [pc, #240]	; (800108c <snake_move+0x240>)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	019b      	lsls	r3, r3, #6
 8000fa0:	441a      	add	r2, r3
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	2239      	movs	r2, #57	; 0x39
 8000fa8:	701a      	strb	r2, [r3, #0]
					key_flag_left = 0;
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <snake_move+0x244>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e04d      	b.n	800104e <snake_move+0x202>
				}
				else if(key_flag_right)
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <snake_move+0x248>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d049      	beq.n	800104e <snake_move+0x202>
				{
					if(snake_vector[y][x] == '3')
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <snake_move+0x240>)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	019b      	lsls	r3, r3, #6
 8000fc0:	441a      	add	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b33      	cmp	r3, #51	; 0x33
 8000fca:	d108      	bne.n	8000fde <snake_move+0x192>
						snake_vector[y][x] = '6';
 8000fcc:	4a2f      	ldr	r2, [pc, #188]	; (800108c <snake_move+0x240>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	019b      	lsls	r3, r3, #6
 8000fd2:	441a      	add	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2236      	movs	r2, #54	; 0x36
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e034      	b.n	8001048 <snake_move+0x1fc>
					else if(snake_vector[y][x] == '6')
 8000fde:	4a2b      	ldr	r2, [pc, #172]	; (800108c <snake_move+0x240>)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	019b      	lsls	r3, r3, #6
 8000fe4:	441a      	add	r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b36      	cmp	r3, #54	; 0x36
 8000fee:	d108      	bne.n	8001002 <snake_move+0x1b6>
						snake_vector[y][x] = '9';
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <snake_move+0x240>)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	019b      	lsls	r3, r3, #6
 8000ff6:	441a      	add	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2239      	movs	r2, #57	; 0x39
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e022      	b.n	8001048 <snake_move+0x1fc>
					else if(snake_vector[y][x] == '9')
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <snake_move+0x240>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	019b      	lsls	r3, r3, #6
 8001008:	441a      	add	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b39      	cmp	r3, #57	; 0x39
 8001012:	d108      	bne.n	8001026 <snake_move+0x1da>
						snake_vector[y][x] = '0';
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <snake_move+0x240>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	019b      	lsls	r3, r3, #6
 800101a:	441a      	add	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	2230      	movs	r2, #48	; 0x30
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e010      	b.n	8001048 <snake_move+0x1fc>
					else if(snake_vector[y][x] == '0')
 8001026:	4a19      	ldr	r2, [pc, #100]	; (800108c <snake_move+0x240>)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	019b      	lsls	r3, r3, #6
 800102c:	441a      	add	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b30      	cmp	r3, #48	; 0x30
 8001036:	d107      	bne.n	8001048 <snake_move+0x1fc>
						snake_vector[y][x] = '3';
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <snake_move+0x240>)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	019b      	lsls	r3, r3, #6
 800103e:	441a      	add	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	2233      	movs	r2, #51	; 0x33
 8001046:	701a      	strb	r2, [r3, #0]
					key_flag_right = 0;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <snake_move+0x248>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
				}
				head_fl = 1;
 800104e:	2301      	movs	r3, #1
 8001050:	603b      	str	r3, [r7, #0]
				head_move(x, y);
 8001052:	68f9      	ldr	r1, [r7, #12]
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f000 fc57 	bl	8001908 <head_move>
			}
			if(tail_fl && head_fl)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <snake_move+0x21a>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10e      	bne.n	8001084 <snake_move+0x238>
				return;
			x++;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3301      	adds	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
		while(x < OLED_WIDTH / 2) // 64
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b3f      	cmp	r3, #63	; 0x3f
 8001070:	f77f aef9 	ble.w	8000e66 <snake_move+0x1a>
		}
		y++;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
	while(y < OLED_HEIGHT / 2) // 32
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b1f      	cmp	r3, #31
 800107e:	f77f aeef 	ble.w	8000e60 <snake_move+0x14>
 8001082:	e000      	b.n	8001086 <snake_move+0x23a>
				return;
 8001084:	bf00      	nop
	}
}
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20001a20 	.word	0x20001a20
 8001090:	20001a1c 	.word	0x20001a1c
 8001094:	200015b0 	.word	0x200015b0

08001098 <snake_init>:


void snake_init()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
	srand(HAL_GetTick());
 800109e:	f000 fda7 	bl	8001bf0 <HAL_GetTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 feb9 	bl	8004e1c <srand>
	int x = rand() % 64;
 80010aa:	f003 fee5 	bl	8004e78 <rand>
 80010ae:	4603      	mov	r3, r0
 80010b0:	425a      	negs	r2, r3
 80010b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010ba:	bf58      	it	pl
 80010bc:	4253      	negpl	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
	int y = rand() % 32;
 80010c0:	f003 feda 	bl	8004e78 <rand>
 80010c4:	4603      	mov	r3, r0
 80010c6:	425a      	negs	r2, r3
 80010c8:	f003 031f 	and.w	r3, r3, #31
 80010cc:	f002 021f 	and.w	r2, r2, #31
 80010d0:	bf58      	it	pl
 80010d2:	4253      	negpl	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
//	x = 25;
//	y = 4;
	int i = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
	while(i < snake_len)
 80010da:	e00c      	b.n	80010f6 <snake_init+0x5e>
	{
		snake_vector[y][x + i] = 'R';
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	494c      	ldr	r1, [pc, #304]	; (8001214 <snake_init+0x17c>)
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	0192      	lsls	r2, r2, #6
 80010e8:	440a      	add	r2, r1
 80010ea:	4413      	add	r3, r2
 80010ec:	2252      	movs	r2, #82	; 0x52
 80010ee:	701a      	strb	r2, [r3, #0]
		i++;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
	while(i < snake_len)
 80010f6:	4b48      	ldr	r3, [pc, #288]	; (8001218 <snake_init+0x180>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbed      	blt.n	80010dc <snake_init+0x44>
	}
	snake_vector[y][x] = 'r';
 8001100:	4a44      	ldr	r2, [pc, #272]	; (8001214 <snake_init+0x17c>)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	019b      	lsls	r3, r3, #6
 8001106:	441a      	add	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	2272      	movs	r2, #114	; 0x72
 800110e:	701a      	strb	r2, [r3, #0]
	snake_vector[y][x + i - 1] = '3';
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	3b01      	subs	r3, #1
 8001118:	493e      	ldr	r1, [pc, #248]	; (8001214 <snake_init+0x17c>)
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	0192      	lsls	r2, r2, #6
 800111e:	440a      	add	r2, r1
 8001120:	4413      	add	r3, r2
 8001122:	2233      	movs	r2, #51	; 0x33
 8001124:	701a      	strb	r2, [r3, #0]
	x = rand() % 64;
 8001126:	f003 fea7 	bl	8004e78 <rand>
 800112a:	4603      	mov	r3, r0
 800112c:	425a      	negs	r2, r3
 800112e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001132:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001136:	bf58      	it	pl
 8001138:	4253      	negpl	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
	y = rand() % 32;
 800113c:	f003 fe9c 	bl	8004e78 <rand>
 8001140:	4603      	mov	r3, r0
 8001142:	425a      	negs	r2, r3
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	f002 021f 	and.w	r2, r2, #31
 800114c:	bf58      	it	pl
 800114e:	4253      	negpl	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
	snake_vector[y][x] = 'T';
 8001152:	4a30      	ldr	r2, [pc, #192]	; (8001214 <snake_init+0x17c>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	441a      	add	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	2254      	movs	r2, #84	; 0x54
 8001160:	701a      	strb	r2, [r3, #0]
	snake_screen_print();
 8001162:	f7ff fd11 	bl	8000b88 <snake_screen_print>
	while(1)
	{
		HAL_Delay(40);
 8001166:	2028      	movs	r0, #40	; 0x28
 8001168:	f000 fd4c 	bl	8001c04 <HAL_Delay>
		snake_move();
 800116c:	f7ff fe6e 	bl	8000e4c <snake_move>
		if(eat_flag)
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <snake_init+0x184>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d040      	beq.n	80011fa <snake_init+0x162>
		{
			x = rand() % 64;
 8001178:	f003 fe7e 	bl	8004e78 <rand>
 800117c:	4603      	mov	r3, r0
 800117e:	425a      	negs	r2, r3
 8001180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001184:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001188:	bf58      	it	pl
 800118a:	4253      	negpl	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
			y = rand() % 32;
 800118e:	f003 fe73 	bl	8004e78 <rand>
 8001192:	4603      	mov	r3, r0
 8001194:	425a      	negs	r2, r3
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	f002 021f 	and.w	r2, r2, #31
 800119e:	bf58      	it	pl
 80011a0:	4253      	negpl	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
			while(snake_vector[y][x] != '\0')
 80011a4:	e015      	b.n	80011d2 <snake_init+0x13a>
			{
				x = rand() % 64;
 80011a6:	f003 fe67 	bl	8004e78 <rand>
 80011aa:	4603      	mov	r3, r0
 80011ac:	425a      	negs	r2, r3
 80011ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011b6:	bf58      	it	pl
 80011b8:	4253      	negpl	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
				y = rand() % 32;
 80011bc:	f003 fe5c 	bl	8004e78 <rand>
 80011c0:	4603      	mov	r3, r0
 80011c2:	425a      	negs	r2, r3
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	f002 021f 	and.w	r2, r2, #31
 80011cc:	bf58      	it	pl
 80011ce:	4253      	negpl	r3, r2
 80011d0:	60bb      	str	r3, [r7, #8]
			while(snake_vector[y][x] != '\0')
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <snake_init+0x17c>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	019b      	lsls	r3, r3, #6
 80011d8:	441a      	add	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1e0      	bne.n	80011a6 <snake_init+0x10e>
			}
			snake_vector[y][x] = 'T';
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <snake_init+0x17c>)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	441a      	add	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	2254      	movs	r2, #84	; 0x54
 80011f2:	701a      	strb	r2, [r3, #0]
			eat_flag = 0;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <snake_init+0x184>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
		}
		snake_screen_print();
 80011fa:	f7ff fcc5 	bl	8000b88 <snake_screen_print>
		if(game_over_flag)
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <snake_init+0x188>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0af      	beq.n	8001166 <snake_init+0xce>
		{
			game_over();
 8001206:	f7ff fc9d 	bl	8000b44 <game_over>
			return;
 800120a:	bf00      	nop
		}
	}
}
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20001a20 	.word	0x20001a20
 8001218:	20000504 	.word	0x20000504
 800121c:	20001a14 	.word	0x20001a14
 8001220:	200015b4 	.word	0x200015b4

08001224 <tail_move>:
#include "snake.h"


void tail_move(int x, int y)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	int tmp_x = x;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]
	int tmp_y = y;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	60bb      	str	r3, [r7, #8]
	if(snake_vector[y][x] == 'r')
 8001236:	4aa5      	ldr	r2, [pc, #660]	; (80014cc <tail_move+0x2a8>)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	019b      	lsls	r3, r3, #6
 800123c:	441a      	add	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b72      	cmp	r3, #114	; 0x72
 8001246:	f040 80ce 	bne.w	80013e6 <tail_move+0x1c2>
	{
		x = ((x + 1) < OLED_WIDTH / 2) ? x : -1;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b3e      	cmp	r3, #62	; 0x3e
 800124e:	dc01      	bgt.n	8001254 <tail_move+0x30>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	e001      	b.n	8001258 <tail_move+0x34>
 8001254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001258:	607b      	str	r3, [r7, #4]
		if(snake_vector[y][x + 1] == 'Z' || snake_vector[y][x + 1] == 'X' || snake_vector[y][x + 1] == 'C' || snake_vector[y][x + 1] == 'V')
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3301      	adds	r3, #1
 800125e:	499b      	ldr	r1, [pc, #620]	; (80014cc <tail_move+0x2a8>)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	0192      	lsls	r2, r2, #6
 8001264:	440a      	add	r2, r1
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b5a      	cmp	r3, #90	; 0x5a
 800126c:	d01d      	beq.n	80012aa <tail_move+0x86>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	4996      	ldr	r1, [pc, #600]	; (80014cc <tail_move+0x2a8>)
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	0192      	lsls	r2, r2, #6
 8001278:	440a      	add	r2, r1
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b58      	cmp	r3, #88	; 0x58
 8001280:	d013      	beq.n	80012aa <tail_move+0x86>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3301      	adds	r3, #1
 8001286:	4991      	ldr	r1, [pc, #580]	; (80014cc <tail_move+0x2a8>)
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	0192      	lsls	r2, r2, #6
 800128c:	440a      	add	r2, r1
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b43      	cmp	r3, #67	; 0x43
 8001294:	d009      	beq.n	80012aa <tail_move+0x86>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3301      	adds	r3, #1
 800129a:	498c      	ldr	r1, [pc, #560]	; (80014cc <tail_move+0x2a8>)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	0192      	lsls	r2, r2, #6
 80012a0:	440a      	add	r2, r1
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b56      	cmp	r3, #86	; 0x56
 80012a8:	d108      	bne.n	80012bc <tail_move+0x98>
			snake_vector[y][x] = 'r';
 80012aa:	4a88      	ldr	r2, [pc, #544]	; (80014cc <tail_move+0x2a8>)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	019b      	lsls	r3, r3, #6
 80012b0:	441a      	add	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	2272      	movs	r2, #114	; 0x72
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e007      	b.n	80012cc <tail_move+0xa8>
		else
			snake_vector[tmp_y][tmp_x] = '\0';
 80012bc:	4a83      	ldr	r2, [pc, #524]	; (80014cc <tail_move+0x2a8>)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	441a      	add	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
		if(snake_vector[y][x + 1] == 'R')		snake_vector[y][x + 1] = 'r';
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3301      	adds	r3, #1
 80012d0:	497e      	ldr	r1, [pc, #504]	; (80014cc <tail_move+0x2a8>)
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	0192      	lsls	r2, r2, #6
 80012d6:	440a      	add	r2, r1
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b52      	cmp	r3, #82	; 0x52
 80012de:	d109      	bne.n	80012f4 <tail_move+0xd0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	4979      	ldr	r1, [pc, #484]	; (80014cc <tail_move+0x2a8>)
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	0192      	lsls	r2, r2, #6
 80012ea:	440a      	add	r2, r1
 80012ec:	4413      	add	r3, r2
 80012ee:	2272      	movs	r2, #114	; 0x72
 80012f0:	701a      	strb	r2, [r3, #0]
		else if(snake_vector[y - 1][x] == 'Z')	snake_vector[y - 1][x] = 'L';
		else if(snake_vector[y - 1][x] == 'X')	snake_vector[y - 1][x] = 'R';
		else if(snake_vector[y - 1][x] == 'C')	snake_vector[y - 1][x] = 'U';
		else if(snake_vector[y - 1][x] == 'V')	snake_vector[y - 1][x] = 'D';
	}
}
 80012f2:	e301      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x + 1] == 'D')	snake_vector[y][x + 1] = 'd';
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4974      	ldr	r1, [pc, #464]	; (80014cc <tail_move+0x2a8>)
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	0192      	lsls	r2, r2, #6
 80012fe:	440a      	add	r2, r1
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b44      	cmp	r3, #68	; 0x44
 8001306:	d109      	bne.n	800131c <tail_move+0xf8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3301      	adds	r3, #1
 800130c:	496f      	ldr	r1, [pc, #444]	; (80014cc <tail_move+0x2a8>)
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	0192      	lsls	r2, r2, #6
 8001312:	440a      	add	r2, r1
 8001314:	4413      	add	r3, r2
 8001316:	2264      	movs	r2, #100	; 0x64
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	e2ed      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x + 1] == 'U')	snake_vector[y][x + 1] = 'u';
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3301      	adds	r3, #1
 8001320:	496a      	ldr	r1, [pc, #424]	; (80014cc <tail_move+0x2a8>)
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	0192      	lsls	r2, r2, #6
 8001326:	440a      	add	r2, r1
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b55      	cmp	r3, #85	; 0x55
 800132e:	d109      	bne.n	8001344 <tail_move+0x120>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3301      	adds	r3, #1
 8001334:	4965      	ldr	r1, [pc, #404]	; (80014cc <tail_move+0x2a8>)
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	0192      	lsls	r2, r2, #6
 800133a:	440a      	add	r2, r1
 800133c:	4413      	add	r3, r2
 800133e:	2275      	movs	r2, #117	; 0x75
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	e2d9      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x + 1] == 'Z')	snake_vector[y][x + 1] = 'L';
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3301      	adds	r3, #1
 8001348:	4960      	ldr	r1, [pc, #384]	; (80014cc <tail_move+0x2a8>)
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	0192      	lsls	r2, r2, #6
 800134e:	440a      	add	r2, r1
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b5a      	cmp	r3, #90	; 0x5a
 8001356:	d109      	bne.n	800136c <tail_move+0x148>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	495b      	ldr	r1, [pc, #364]	; (80014cc <tail_move+0x2a8>)
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	0192      	lsls	r2, r2, #6
 8001362:	440a      	add	r2, r1
 8001364:	4413      	add	r3, r2
 8001366:	224c      	movs	r2, #76	; 0x4c
 8001368:	701a      	strb	r2, [r3, #0]
}
 800136a:	e2c5      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x + 1] == 'X')	snake_vector[y][x + 1] = 'R';
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	4956      	ldr	r1, [pc, #344]	; (80014cc <tail_move+0x2a8>)
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	0192      	lsls	r2, r2, #6
 8001376:	440a      	add	r2, r1
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b58      	cmp	r3, #88	; 0x58
 800137e:	d109      	bne.n	8001394 <tail_move+0x170>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	4951      	ldr	r1, [pc, #324]	; (80014cc <tail_move+0x2a8>)
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	0192      	lsls	r2, r2, #6
 800138a:	440a      	add	r2, r1
 800138c:	4413      	add	r3, r2
 800138e:	2252      	movs	r2, #82	; 0x52
 8001390:	701a      	strb	r2, [r3, #0]
}
 8001392:	e2b1      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x + 1] == 'C')	snake_vector[y][x + 1] = 'U';
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3301      	adds	r3, #1
 8001398:	494c      	ldr	r1, [pc, #304]	; (80014cc <tail_move+0x2a8>)
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	0192      	lsls	r2, r2, #6
 800139e:	440a      	add	r2, r1
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b43      	cmp	r3, #67	; 0x43
 80013a6:	d109      	bne.n	80013bc <tail_move+0x198>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4947      	ldr	r1, [pc, #284]	; (80014cc <tail_move+0x2a8>)
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	0192      	lsls	r2, r2, #6
 80013b2:	440a      	add	r2, r1
 80013b4:	4413      	add	r3, r2
 80013b6:	2255      	movs	r2, #85	; 0x55
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	e29d      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x + 1] == 'V')	snake_vector[y][x + 1] = 'D';
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	4942      	ldr	r1, [pc, #264]	; (80014cc <tail_move+0x2a8>)
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	0192      	lsls	r2, r2, #6
 80013c6:	440a      	add	r2, r1
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b56      	cmp	r3, #86	; 0x56
 80013ce:	f040 8293 	bne.w	80018f8 <tail_move+0x6d4>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	493d      	ldr	r1, [pc, #244]	; (80014cc <tail_move+0x2a8>)
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	0192      	lsls	r2, r2, #6
 80013dc:	440a      	add	r2, r1
 80013de:	4413      	add	r3, r2
 80013e0:	2244      	movs	r2, #68	; 0x44
 80013e2:	701a      	strb	r2, [r3, #0]
}
 80013e4:	e288      	b.n	80018f8 <tail_move+0x6d4>
	else if(snake_vector[y][x] == 'l')
 80013e6:	4a39      	ldr	r2, [pc, #228]	; (80014cc <tail_move+0x2a8>)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	019b      	lsls	r3, r3, #6
 80013ec:	441a      	add	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b6c      	cmp	r3, #108	; 0x6c
 80013f6:	f040 80d0 	bne.w	800159a <tail_move+0x376>
		x = (x > 0) ? x : (OLED_WIDTH / 2);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dd01      	ble.n	8001404 <tail_move+0x1e0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	e000      	b.n	8001406 <tail_move+0x1e2>
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	607b      	str	r3, [r7, #4]
		if(snake_vector[y][x - 1] == 'Z' || snake_vector[y][x - 1] == 'X' || snake_vector[y][x - 1] == 'C' || snake_vector[y][x - 1] == 'V')
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	492f      	ldr	r1, [pc, #188]	; (80014cc <tail_move+0x2a8>)
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	0192      	lsls	r2, r2, #6
 8001412:	440a      	add	r2, r1
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b5a      	cmp	r3, #90	; 0x5a
 800141a:	d01d      	beq.n	8001458 <tail_move+0x234>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	492a      	ldr	r1, [pc, #168]	; (80014cc <tail_move+0x2a8>)
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	0192      	lsls	r2, r2, #6
 8001426:	440a      	add	r2, r1
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b58      	cmp	r3, #88	; 0x58
 800142e:	d013      	beq.n	8001458 <tail_move+0x234>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	4925      	ldr	r1, [pc, #148]	; (80014cc <tail_move+0x2a8>)
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	0192      	lsls	r2, r2, #6
 800143a:	440a      	add	r2, r1
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b43      	cmp	r3, #67	; 0x43
 8001442:	d009      	beq.n	8001458 <tail_move+0x234>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	4920      	ldr	r1, [pc, #128]	; (80014cc <tail_move+0x2a8>)
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	0192      	lsls	r2, r2, #6
 800144e:	440a      	add	r2, r1
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b56      	cmp	r3, #86	; 0x56
 8001456:	d108      	bne.n	800146a <tail_move+0x246>
			snake_vector[y][x] = 'l';
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <tail_move+0x2a8>)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	441a      	add	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	226c      	movs	r2, #108	; 0x6c
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e007      	b.n	800147a <tail_move+0x256>
			snake_vector[tmp_y][tmp_x] = '\0';
 800146a:	4a18      	ldr	r2, [pc, #96]	; (80014cc <tail_move+0x2a8>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	019b      	lsls	r3, r3, #6
 8001470:	441a      	add	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
		if(snake_vector[y][x - 1] == 'L')		snake_vector[y][x - 1] = 'l';
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3b01      	subs	r3, #1
 800147e:	4913      	ldr	r1, [pc, #76]	; (80014cc <tail_move+0x2a8>)
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	0192      	lsls	r2, r2, #6
 8001484:	440a      	add	r2, r1
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b4c      	cmp	r3, #76	; 0x4c
 800148c:	d109      	bne.n	80014a2 <tail_move+0x27e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3b01      	subs	r3, #1
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <tail_move+0x2a8>)
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	0192      	lsls	r2, r2, #6
 8001498:	440a      	add	r2, r1
 800149a:	4413      	add	r3, r2
 800149c:	226c      	movs	r2, #108	; 0x6c
 800149e:	701a      	strb	r2, [r3, #0]
}
 80014a0:	e22a      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x - 1] == 'D')	snake_vector[y][x - 1] = 'd';
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4909      	ldr	r1, [pc, #36]	; (80014cc <tail_move+0x2a8>)
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	0192      	lsls	r2, r2, #6
 80014ac:	440a      	add	r2, r1
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b44      	cmp	r3, #68	; 0x44
 80014b4:	d10c      	bne.n	80014d0 <tail_move+0x2ac>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4904      	ldr	r1, [pc, #16]	; (80014cc <tail_move+0x2a8>)
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	0192      	lsls	r2, r2, #6
 80014c0:	440a      	add	r2, r1
 80014c2:	4413      	add	r3, r2
 80014c4:	2264      	movs	r2, #100	; 0x64
 80014c6:	701a      	strb	r2, [r3, #0]
}
 80014c8:	e216      	b.n	80018f8 <tail_move+0x6d4>
 80014ca:	bf00      	nop
 80014cc:	20001a20 	.word	0x20001a20
		else if(snake_vector[y][x - 1] == 'U')	snake_vector[y][x - 1] = 'u';
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	49a4      	ldr	r1, [pc, #656]	; (8001768 <tail_move+0x544>)
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	0192      	lsls	r2, r2, #6
 80014da:	440a      	add	r2, r1
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b55      	cmp	r3, #85	; 0x55
 80014e2:	d109      	bne.n	80014f8 <tail_move+0x2d4>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	499f      	ldr	r1, [pc, #636]	; (8001768 <tail_move+0x544>)
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	0192      	lsls	r2, r2, #6
 80014ee:	440a      	add	r2, r1
 80014f0:	4413      	add	r3, r2
 80014f2:	2275      	movs	r2, #117	; 0x75
 80014f4:	701a      	strb	r2, [r3, #0]
}
 80014f6:	e1ff      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x - 1] == 'Z')	snake_vector[y][x - 1] = 'L';
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	499a      	ldr	r1, [pc, #616]	; (8001768 <tail_move+0x544>)
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	0192      	lsls	r2, r2, #6
 8001502:	440a      	add	r2, r1
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b5a      	cmp	r3, #90	; 0x5a
 800150a:	d109      	bne.n	8001520 <tail_move+0x2fc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	4995      	ldr	r1, [pc, #596]	; (8001768 <tail_move+0x544>)
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	0192      	lsls	r2, r2, #6
 8001516:	440a      	add	r2, r1
 8001518:	4413      	add	r3, r2
 800151a:	224c      	movs	r2, #76	; 0x4c
 800151c:	701a      	strb	r2, [r3, #0]
}
 800151e:	e1eb      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x - 1] == 'X')	snake_vector[y][x - 1] = 'R';
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	4990      	ldr	r1, [pc, #576]	; (8001768 <tail_move+0x544>)
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	0192      	lsls	r2, r2, #6
 800152a:	440a      	add	r2, r1
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b58      	cmp	r3, #88	; 0x58
 8001532:	d109      	bne.n	8001548 <tail_move+0x324>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	498b      	ldr	r1, [pc, #556]	; (8001768 <tail_move+0x544>)
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	0192      	lsls	r2, r2, #6
 800153e:	440a      	add	r2, r1
 8001540:	4413      	add	r3, r2
 8001542:	2252      	movs	r2, #82	; 0x52
 8001544:	701a      	strb	r2, [r3, #0]
}
 8001546:	e1d7      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x - 1] == 'C')	snake_vector[y][x - 1] = 'U';
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	4986      	ldr	r1, [pc, #536]	; (8001768 <tail_move+0x544>)
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	0192      	lsls	r2, r2, #6
 8001552:	440a      	add	r2, r1
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b43      	cmp	r3, #67	; 0x43
 800155a:	d109      	bne.n	8001570 <tail_move+0x34c>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	4981      	ldr	r1, [pc, #516]	; (8001768 <tail_move+0x544>)
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	0192      	lsls	r2, r2, #6
 8001566:	440a      	add	r2, r1
 8001568:	4413      	add	r3, r2
 800156a:	2255      	movs	r2, #85	; 0x55
 800156c:	701a      	strb	r2, [r3, #0]
}
 800156e:	e1c3      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y][x - 1] == 'V')	snake_vector[y][x - 1] = 'D';
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	497c      	ldr	r1, [pc, #496]	; (8001768 <tail_move+0x544>)
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	0192      	lsls	r2, r2, #6
 800157a:	440a      	add	r2, r1
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b56      	cmp	r3, #86	; 0x56
 8001582:	f040 81b9 	bne.w	80018f8 <tail_move+0x6d4>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3b01      	subs	r3, #1
 800158a:	4977      	ldr	r1, [pc, #476]	; (8001768 <tail_move+0x544>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	0192      	lsls	r2, r2, #6
 8001590:	440a      	add	r2, r1
 8001592:	4413      	add	r3, r2
 8001594:	2244      	movs	r2, #68	; 0x44
 8001596:	701a      	strb	r2, [r3, #0]
}
 8001598:	e1ae      	b.n	80018f8 <tail_move+0x6d4>
	else if(snake_vector[y][x] == 'd')
 800159a:	4a73      	ldr	r2, [pc, #460]	; (8001768 <tail_move+0x544>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	019b      	lsls	r3, r3, #6
 80015a0:	441a      	add	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b64      	cmp	r3, #100	; 0x64
 80015aa:	f040 80ce 	bne.w	800174a <tail_move+0x526>
		y = ((y + 1) < OLED_HEIGHT / 2) ? y : -1;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b1e      	cmp	r3, #30
 80015b2:	dc01      	bgt.n	80015b8 <tail_move+0x394>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	e001      	b.n	80015bc <tail_move+0x398>
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015bc:	603b      	str	r3, [r7, #0]
		if(snake_vector[y + 1][x] == 'Z' || snake_vector[y + 1][x] == 'X' || snake_vector[y + 1][x] == 'C' || snake_vector[y + 1][x] == 'V')
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	4a69      	ldr	r2, [pc, #420]	; (8001768 <tail_move+0x544>)
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	441a      	add	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b5a      	cmp	r3, #90	; 0x5a
 80015d0:	d01d      	beq.n	800160e <tail_move+0x3ea>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4a64      	ldr	r2, [pc, #400]	; (8001768 <tail_move+0x544>)
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	441a      	add	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b58      	cmp	r3, #88	; 0x58
 80015e4:	d013      	beq.n	800160e <tail_move+0x3ea>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a5f      	ldr	r2, [pc, #380]	; (8001768 <tail_move+0x544>)
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	441a      	add	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b43      	cmp	r3, #67	; 0x43
 80015f8:	d009      	beq.n	800160e <tail_move+0x3ea>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a5a      	ldr	r2, [pc, #360]	; (8001768 <tail_move+0x544>)
 8001600:	019b      	lsls	r3, r3, #6
 8001602:	441a      	add	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b56      	cmp	r3, #86	; 0x56
 800160c:	d108      	bne.n	8001620 <tail_move+0x3fc>
			snake_vector[y][x] = 'd';
 800160e:	4a56      	ldr	r2, [pc, #344]	; (8001768 <tail_move+0x544>)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	019b      	lsls	r3, r3, #6
 8001614:	441a      	add	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	2264      	movs	r2, #100	; 0x64
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <tail_move+0x40c>
			snake_vector[tmp_y][tmp_x] = '\0';
 8001620:	4a51      	ldr	r2, [pc, #324]	; (8001768 <tail_move+0x544>)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	441a      	add	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
		if(snake_vector[y + 1][x] == 'D')		snake_vector[y + 1][x] = 'd';
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <tail_move+0x544>)
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	441a      	add	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b44      	cmp	r3, #68	; 0x44
 8001642:	d109      	bne.n	8001658 <tail_move+0x434>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a47      	ldr	r2, [pc, #284]	; (8001768 <tail_move+0x544>)
 800164a:	019b      	lsls	r3, r3, #6
 800164c:	441a      	add	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	2264      	movs	r2, #100	; 0x64
 8001654:	701a      	strb	r2, [r3, #0]
}
 8001656:	e14f      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y + 1][x] == 'R')	snake_vector[y + 1][x] = 'r';
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	4a42      	ldr	r2, [pc, #264]	; (8001768 <tail_move+0x544>)
 800165e:	019b      	lsls	r3, r3, #6
 8001660:	441a      	add	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b52      	cmp	r3, #82	; 0x52
 800166a:	d109      	bne.n	8001680 <tail_move+0x45c>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a3d      	ldr	r2, [pc, #244]	; (8001768 <tail_move+0x544>)
 8001672:	019b      	lsls	r3, r3, #6
 8001674:	441a      	add	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	2272      	movs	r2, #114	; 0x72
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	e13b      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y + 1][x] == 'L')	snake_vector[y + 1][x] = 'l';
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <tail_move+0x544>)
 8001686:	019b      	lsls	r3, r3, #6
 8001688:	441a      	add	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b4c      	cmp	r3, #76	; 0x4c
 8001692:	d109      	bne.n	80016a8 <tail_move+0x484>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a33      	ldr	r2, [pc, #204]	; (8001768 <tail_move+0x544>)
 800169a:	019b      	lsls	r3, r3, #6
 800169c:	441a      	add	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	226c      	movs	r2, #108	; 0x6c
 80016a4:	701a      	strb	r2, [r3, #0]
}
 80016a6:	e127      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y + 1][x] == 'Z')	snake_vector[y + 1][x] = 'L';
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a2e      	ldr	r2, [pc, #184]	; (8001768 <tail_move+0x544>)
 80016ae:	019b      	lsls	r3, r3, #6
 80016b0:	441a      	add	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b5a      	cmp	r3, #90	; 0x5a
 80016ba:	d109      	bne.n	80016d0 <tail_move+0x4ac>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a29      	ldr	r2, [pc, #164]	; (8001768 <tail_move+0x544>)
 80016c2:	019b      	lsls	r3, r3, #6
 80016c4:	441a      	add	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	224c      	movs	r2, #76	; 0x4c
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	e113      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y + 1][x] == 'X')	snake_vector[y + 1][x] = 'R';
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <tail_move+0x544>)
 80016d6:	019b      	lsls	r3, r3, #6
 80016d8:	441a      	add	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b58      	cmp	r3, #88	; 0x58
 80016e2:	d109      	bne.n	80016f8 <tail_move+0x4d4>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <tail_move+0x544>)
 80016ea:	019b      	lsls	r3, r3, #6
 80016ec:	441a      	add	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	2252      	movs	r2, #82	; 0x52
 80016f4:	701a      	strb	r2, [r3, #0]
}
 80016f6:	e0ff      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y + 1][x] == 'C')	snake_vector[y + 1][x] = 'U';
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <tail_move+0x544>)
 80016fe:	019b      	lsls	r3, r3, #6
 8001700:	441a      	add	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b43      	cmp	r3, #67	; 0x43
 800170a:	d109      	bne.n	8001720 <tail_move+0x4fc>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <tail_move+0x544>)
 8001712:	019b      	lsls	r3, r3, #6
 8001714:	441a      	add	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	2255      	movs	r2, #85	; 0x55
 800171c:	701a      	strb	r2, [r3, #0]
}
 800171e:	e0eb      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y + 1][x] == 'V')	snake_vector[y + 1][x] = 'D';
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a10      	ldr	r2, [pc, #64]	; (8001768 <tail_move+0x544>)
 8001726:	019b      	lsls	r3, r3, #6
 8001728:	441a      	add	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b56      	cmp	r3, #86	; 0x56
 8001732:	f040 80e1 	bne.w	80018f8 <tail_move+0x6d4>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <tail_move+0x544>)
 800173c:	019b      	lsls	r3, r3, #6
 800173e:	441a      	add	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	2244      	movs	r2, #68	; 0x44
 8001746:	701a      	strb	r2, [r3, #0]
}
 8001748:	e0d6      	b.n	80018f8 <tail_move+0x6d4>
	else if(snake_vector[y][x] == 'u')
 800174a:	4a07      	ldr	r2, [pc, #28]	; (8001768 <tail_move+0x544>)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	019b      	lsls	r3, r3, #6
 8001750:	441a      	add	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b75      	cmp	r3, #117	; 0x75
 800175a:	f040 80cd 	bne.w	80018f8 <tail_move+0x6d4>
		y = (y > 0) ? y : (OLED_HEIGHT / 2);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd03      	ble.n	800176c <tail_move+0x548>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	e002      	b.n	800176e <tail_move+0x54a>
 8001768:	20001a20 	.word	0x20001a20
 800176c:	2320      	movs	r3, #32
 800176e:	603b      	str	r3, [r7, #0]
		if(snake_vector[y - 1][x] == 'Z' || snake_vector[y - 1][x] == 'X' || snake_vector[y - 1][x] == 'C' || snake_vector[y - 1][x] == 'V')
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3b01      	subs	r3, #1
 8001774:	4a63      	ldr	r2, [pc, #396]	; (8001904 <tail_move+0x6e0>)
 8001776:	019b      	lsls	r3, r3, #6
 8001778:	441a      	add	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b5a      	cmp	r3, #90	; 0x5a
 8001782:	d01d      	beq.n	80017c0 <tail_move+0x59c>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3b01      	subs	r3, #1
 8001788:	4a5e      	ldr	r2, [pc, #376]	; (8001904 <tail_move+0x6e0>)
 800178a:	019b      	lsls	r3, r3, #6
 800178c:	441a      	add	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b58      	cmp	r3, #88	; 0x58
 8001796:	d013      	beq.n	80017c0 <tail_move+0x59c>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3b01      	subs	r3, #1
 800179c:	4a59      	ldr	r2, [pc, #356]	; (8001904 <tail_move+0x6e0>)
 800179e:	019b      	lsls	r3, r3, #6
 80017a0:	441a      	add	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b43      	cmp	r3, #67	; 0x43
 80017aa:	d009      	beq.n	80017c0 <tail_move+0x59c>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	4a54      	ldr	r2, [pc, #336]	; (8001904 <tail_move+0x6e0>)
 80017b2:	019b      	lsls	r3, r3, #6
 80017b4:	441a      	add	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b56      	cmp	r3, #86	; 0x56
 80017be:	d108      	bne.n	80017d2 <tail_move+0x5ae>
			snake_vector[y][x] = 'u';
 80017c0:	4a50      	ldr	r2, [pc, #320]	; (8001904 <tail_move+0x6e0>)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	441a      	add	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	2275      	movs	r2, #117	; 0x75
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e007      	b.n	80017e2 <tail_move+0x5be>
			snake_vector[tmp_y][tmp_x] = '\0';
 80017d2:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <tail_move+0x6e0>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	019b      	lsls	r3, r3, #6
 80017d8:	441a      	add	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4413      	add	r3, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
		if(snake_vector[y - 1][x] == 'U')		snake_vector[y - 1][x] = 'u';
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	4a47      	ldr	r2, [pc, #284]	; (8001904 <tail_move+0x6e0>)
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	441a      	add	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b55      	cmp	r3, #85	; 0x55
 80017f4:	d109      	bne.n	800180a <tail_move+0x5e6>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	4a42      	ldr	r2, [pc, #264]	; (8001904 <tail_move+0x6e0>)
 80017fc:	019b      	lsls	r3, r3, #6
 80017fe:	441a      	add	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	2275      	movs	r2, #117	; 0x75
 8001806:	701a      	strb	r2, [r3, #0]
}
 8001808:	e076      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y - 1][x] == 'R')	snake_vector[y - 1][x] = 'r';
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	4a3d      	ldr	r2, [pc, #244]	; (8001904 <tail_move+0x6e0>)
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	441a      	add	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b52      	cmp	r3, #82	; 0x52
 800181c:	d109      	bne.n	8001832 <tail_move+0x60e>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a38      	ldr	r2, [pc, #224]	; (8001904 <tail_move+0x6e0>)
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	441a      	add	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	2272      	movs	r2, #114	; 0x72
 800182e:	701a      	strb	r2, [r3, #0]
}
 8001830:	e062      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y - 1][x] == 'L')	snake_vector[y - 1][x] = 'l';
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	3b01      	subs	r3, #1
 8001836:	4a33      	ldr	r2, [pc, #204]	; (8001904 <tail_move+0x6e0>)
 8001838:	019b      	lsls	r3, r3, #6
 800183a:	441a      	add	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b4c      	cmp	r3, #76	; 0x4c
 8001844:	d109      	bne.n	800185a <tail_move+0x636>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	3b01      	subs	r3, #1
 800184a:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <tail_move+0x6e0>)
 800184c:	019b      	lsls	r3, r3, #6
 800184e:	441a      	add	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	226c      	movs	r2, #108	; 0x6c
 8001856:	701a      	strb	r2, [r3, #0]
}
 8001858:	e04e      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y - 1][x] == 'Z')	snake_vector[y - 1][x] = 'L';
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a29      	ldr	r2, [pc, #164]	; (8001904 <tail_move+0x6e0>)
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	441a      	add	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b5a      	cmp	r3, #90	; 0x5a
 800186c:	d109      	bne.n	8001882 <tail_move+0x65e>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3b01      	subs	r3, #1
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <tail_move+0x6e0>)
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	441a      	add	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	224c      	movs	r2, #76	; 0x4c
 800187e:	701a      	strb	r2, [r3, #0]
}
 8001880:	e03a      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y - 1][x] == 'X')	snake_vector[y - 1][x] = 'R';
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	4a1f      	ldr	r2, [pc, #124]	; (8001904 <tail_move+0x6e0>)
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	441a      	add	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b58      	cmp	r3, #88	; 0x58
 8001894:	d109      	bne.n	80018aa <tail_move+0x686>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <tail_move+0x6e0>)
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	441a      	add	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	2252      	movs	r2, #82	; 0x52
 80018a6:	701a      	strb	r2, [r3, #0]
}
 80018a8:	e026      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y - 1][x] == 'C')	snake_vector[y - 1][x] = 'U';
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <tail_move+0x6e0>)
 80018b0:	019b      	lsls	r3, r3, #6
 80018b2:	441a      	add	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b43      	cmp	r3, #67	; 0x43
 80018bc:	d109      	bne.n	80018d2 <tail_move+0x6ae>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <tail_move+0x6e0>)
 80018c4:	019b      	lsls	r3, r3, #6
 80018c6:	441a      	add	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	2255      	movs	r2, #85	; 0x55
 80018ce:	701a      	strb	r2, [r3, #0]
}
 80018d0:	e012      	b.n	80018f8 <tail_move+0x6d4>
		else if(snake_vector[y - 1][x] == 'V')	snake_vector[y - 1][x] = 'D';
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <tail_move+0x6e0>)
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	441a      	add	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b56      	cmp	r3, #86	; 0x56
 80018e4:	d108      	bne.n	80018f8 <tail_move+0x6d4>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	4a06      	ldr	r2, [pc, #24]	; (8001904 <tail_move+0x6e0>)
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	441a      	add	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	2244      	movs	r2, #68	; 0x44
 80018f6:	701a      	strb	r2, [r3, #0]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20001a20 	.word	0x20001a20

08001908 <head_move>:

void head_move(int x, int y)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	if(snake_vector[y][x] == '3')
 8001912:	4a8d      	ldr	r2, [pc, #564]	; (8001b48 <head_move+0x240>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	019b      	lsls	r3, r3, #6
 8001918:	441a      	add	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b33      	cmp	r3, #51	; 0x33
 8001922:	d13c      	bne.n	800199e <head_move+0x96>
	{
		snake_vector[y][x] = 'R';
 8001924:	4a88      	ldr	r2, [pc, #544]	; (8001b48 <head_move+0x240>)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	441a      	add	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	2252      	movs	r2, #82	; 0x52
 8001932:	701a      	strb	r2, [r3, #0]
		x = ((x + 1) < OLED_WIDTH / 2) ? x : -1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b3e      	cmp	r3, #62	; 0x3e
 8001938:	dc01      	bgt.n	800193e <head_move+0x36>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	e001      	b.n	8001942 <head_move+0x3a>
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001942:	607b      	str	r3, [r7, #4]
		if(snake_vector[y][x + 1] == 'T')
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3301      	adds	r3, #1
 8001948:	497f      	ldr	r1, [pc, #508]	; (8001b48 <head_move+0x240>)
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	0192      	lsls	r2, r2, #6
 800194e:	440a      	add	r2, r1
 8001950:	4413      	add	r3, r2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b54      	cmp	r3, #84	; 0x54
 8001956:	d10b      	bne.n	8001970 <head_move+0x68>
		{
			snake_vector[y][x] = 'X';
 8001958:	4a7b      	ldr	r2, [pc, #492]	; (8001b48 <head_move+0x240>)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	441a      	add	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	2258      	movs	r2, #88	; 0x58
 8001966:	701a      	strb	r2, [r3, #0]
			eat_flag = 1;
 8001968:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <head_move+0x244>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e00c      	b.n	800198a <head_move+0x82>
		}
		else if(snake_vector[y][x + 1])
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3301      	adds	r3, #1
 8001974:	4974      	ldr	r1, [pc, #464]	; (8001b48 <head_move+0x240>)
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	0192      	lsls	r2, r2, #6
 800197a:	440a      	add	r2, r1
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <head_move+0x82>
			game_over_flag = 1;
 8001984:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <head_move+0x248>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
		snake_vector[y][x + 1] = '3';
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3301      	adds	r3, #1
 800198e:	496e      	ldr	r1, [pc, #440]	; (8001b48 <head_move+0x240>)
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	0192      	lsls	r2, r2, #6
 8001994:	440a      	add	r2, r1
 8001996:	4413      	add	r3, r2
 8001998:	2233      	movs	r2, #51	; 0x33
 800199a:	701a      	strb	r2, [r3, #0]
		}
		else if(snake_vector[y - 1][x])
			game_over_flag = 1;
		snake_vector[y - 1][x] = '0';
	}
}
 800199c:	e0ce      	b.n	8001b3c <head_move+0x234>
	else if(snake_vector[y][x] == '6')
 800199e:	4a6a      	ldr	r2, [pc, #424]	; (8001b48 <head_move+0x240>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	019b      	lsls	r3, r3, #6
 80019a4:	441a      	add	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b36      	cmp	r3, #54	; 0x36
 80019ae:	d13c      	bne.n	8001a2a <head_move+0x122>
		snake_vector[y][x] = 'D';
 80019b0:	4a65      	ldr	r2, [pc, #404]	; (8001b48 <head_move+0x240>)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	019b      	lsls	r3, r3, #6
 80019b6:	441a      	add	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	2244      	movs	r2, #68	; 0x44
 80019be:	701a      	strb	r2, [r3, #0]
		y = ((y + 1) < OLED_HEIGHT / 2) ? y : -1;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b1e      	cmp	r3, #30
 80019c4:	dc01      	bgt.n	80019ca <head_move+0xc2>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	e001      	b.n	80019ce <head_move+0xc6>
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ce:	603b      	str	r3, [r7, #0]
		if(snake_vector[y + 1][x] == 'T')
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4a5c      	ldr	r2, [pc, #368]	; (8001b48 <head_move+0x240>)
 80019d6:	019b      	lsls	r3, r3, #6
 80019d8:	441a      	add	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b54      	cmp	r3, #84	; 0x54
 80019e2:	d10b      	bne.n	80019fc <head_move+0xf4>
			snake_vector[y][x] = 'V';
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <head_move+0x240>)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	019b      	lsls	r3, r3, #6
 80019ea:	441a      	add	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	2256      	movs	r2, #86	; 0x56
 80019f2:	701a      	strb	r2, [r3, #0]
			eat_flag = 1;
 80019f4:	4b55      	ldr	r3, [pc, #340]	; (8001b4c <head_move+0x244>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e00c      	b.n	8001a16 <head_move+0x10e>
		else if(snake_vector[y + 1][x])
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <head_move+0x240>)
 8001a02:	019b      	lsls	r3, r3, #6
 8001a04:	441a      	add	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <head_move+0x10e>
			game_over_flag = 1;
 8001a10:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <head_move+0x248>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
		snake_vector[y + 1][x] = '6';
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <head_move+0x240>)
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	441a      	add	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	2236      	movs	r2, #54	; 0x36
 8001a26:	701a      	strb	r2, [r3, #0]
}
 8001a28:	e088      	b.n	8001b3c <head_move+0x234>
	else if(snake_vector[y][x] == '9')
 8001a2a:	4a47      	ldr	r2, [pc, #284]	; (8001b48 <head_move+0x240>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	019b      	lsls	r3, r3, #6
 8001a30:	441a      	add	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b39      	cmp	r3, #57	; 0x39
 8001a3a:	d13b      	bne.n	8001ab4 <head_move+0x1ac>
		snake_vector[y][x] = 'L';
 8001a3c:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <head_move+0x240>)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	441a      	add	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	224c      	movs	r2, #76	; 0x4c
 8001a4a:	701a      	strb	r2, [r3, #0]
		x = (x > 0) ? x : (OLED_WIDTH / 2);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dd01      	ble.n	8001a56 <head_move+0x14e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	e000      	b.n	8001a58 <head_move+0x150>
 8001a56:	2340      	movs	r3, #64	; 0x40
 8001a58:	607b      	str	r3, [r7, #4]
		if(snake_vector[y][x - 1] == 'T')
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	493a      	ldr	r1, [pc, #232]	; (8001b48 <head_move+0x240>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	0192      	lsls	r2, r2, #6
 8001a64:	440a      	add	r2, r1
 8001a66:	4413      	add	r3, r2
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b54      	cmp	r3, #84	; 0x54
 8001a6c:	d10b      	bne.n	8001a86 <head_move+0x17e>
			snake_vector[y][x] = 'Z';
 8001a6e:	4a36      	ldr	r2, [pc, #216]	; (8001b48 <head_move+0x240>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	019b      	lsls	r3, r3, #6
 8001a74:	441a      	add	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	225a      	movs	r2, #90	; 0x5a
 8001a7c:	701a      	strb	r2, [r3, #0]
			eat_flag = 1;
 8001a7e:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <head_move+0x244>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e00c      	b.n	8001aa0 <head_move+0x198>
		else if(snake_vector[y][x - 1])
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	492f      	ldr	r1, [pc, #188]	; (8001b48 <head_move+0x240>)
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	0192      	lsls	r2, r2, #6
 8001a90:	440a      	add	r2, r1
 8001a92:	4413      	add	r3, r2
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <head_move+0x198>
			game_over_flag = 1;
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <head_move+0x248>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
		snake_vector[y][x - 1] = '9';
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	4928      	ldr	r1, [pc, #160]	; (8001b48 <head_move+0x240>)
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	0192      	lsls	r2, r2, #6
 8001aaa:	440a      	add	r2, r1
 8001aac:	4413      	add	r3, r2
 8001aae:	2239      	movs	r2, #57	; 0x39
 8001ab0:	701a      	strb	r2, [r3, #0]
}
 8001ab2:	e043      	b.n	8001b3c <head_move+0x234>
	else if(snake_vector[y][x] == '0')
 8001ab4:	4a24      	ldr	r2, [pc, #144]	; (8001b48 <head_move+0x240>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	441a      	add	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b30      	cmp	r3, #48	; 0x30
 8001ac4:	d13a      	bne.n	8001b3c <head_move+0x234>
		snake_vector[y][x] = 'U';
 8001ac6:	4a20      	ldr	r2, [pc, #128]	; (8001b48 <head_move+0x240>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	019b      	lsls	r3, r3, #6
 8001acc:	441a      	add	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	2255      	movs	r2, #85	; 0x55
 8001ad4:	701a      	strb	r2, [r3, #0]
		y = (y > 0) ? y : (OLED_HEIGHT / 2);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dd01      	ble.n	8001ae0 <head_move+0x1d8>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	e000      	b.n	8001ae2 <head_move+0x1da>
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	603b      	str	r3, [r7, #0]
		if(snake_vector[y - 1][x] == 'T')
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <head_move+0x240>)
 8001aea:	019b      	lsls	r3, r3, #6
 8001aec:	441a      	add	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b54      	cmp	r3, #84	; 0x54
 8001af6:	d10b      	bne.n	8001b10 <head_move+0x208>
			snake_vector[y][x] = 'C';
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <head_move+0x240>)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	441a      	add	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	2243      	movs	r2, #67	; 0x43
 8001b06:	701a      	strb	r2, [r3, #0]
			eat_flag = 1;
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <head_move+0x244>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e00c      	b.n	8001b2a <head_move+0x222>
		else if(snake_vector[y - 1][x])
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <head_move+0x240>)
 8001b16:	019b      	lsls	r3, r3, #6
 8001b18:	441a      	add	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <head_move+0x222>
			game_over_flag = 1;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <head_move+0x248>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
		snake_vector[y - 1][x] = '0';
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <head_move+0x240>)
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	441a      	add	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	2230      	movs	r2, #48	; 0x30
 8001b3a:	701a      	strb	r2, [r3, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20001a20 	.word	0x20001a20
 8001b4c:	20001a14 	.word	0x20001a14
 8001b50:	200015b4 	.word	0x200015b4

08001b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	; (8001b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	; (8001b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	; (8001b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b7a:	f7fe ffa1 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f003 f8c3 	bl	8004d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b82:	f7fe fafd 	bl	8000180 <main>
  bx lr
 8001b86:	4770      	bx	lr
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000578 	.word	0x20000578
  ldr r2, =_sidata
 8001b90:	08005ed4 	.word	0x08005ed4
  ldr r2, =_sbss
 8001b94:	20000578 	.word	0x20000578
  ldr r4, =_ebss
 8001b98:	20002284 	.word	0x20002284

08001b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_Init+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_Init+0x28>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f8f5 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f7fe fe4c 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7fe fdc2 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000

08001bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x1c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x20>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_IncTick+0x20>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	2000050c 	.word	0x2000050c
 8001bec:	20002270 	.word	0x20002270

08001bf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_GetTick+0x10>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	20002270 	.word	0x20002270

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff fff0 	bl	8001bf0 <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffe0 	bl	8001bf0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000050c 	.word	0x2000050c

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4906      	ldr	r1, [pc, #24]	; (8001ce4 <__NVIC_EnableIRQ+0x34>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff4f 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff64 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ffb2 	bl	8001d3c <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff81 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff57 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b08b      	sub	sp, #44	; 0x2c
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e169      	b.n	80020f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e20:	2201      	movs	r2, #1
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 8158 	bne.w	80020ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a9a      	ldr	r2, [pc, #616]	; (80020ac <HAL_GPIO_Init+0x2a0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d05e      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e48:	4a98      	ldr	r2, [pc, #608]	; (80020ac <HAL_GPIO_Init+0x2a0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d875      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e4e:	4a98      	ldr	r2, [pc, #608]	; (80020b0 <HAL_GPIO_Init+0x2a4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d058      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e54:	4a96      	ldr	r2, [pc, #600]	; (80020b0 <HAL_GPIO_Init+0x2a4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d86f      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e5a:	4a96      	ldr	r2, [pc, #600]	; (80020b4 <HAL_GPIO_Init+0x2a8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d052      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e60:	4a94      	ldr	r2, [pc, #592]	; (80020b4 <HAL_GPIO_Init+0x2a8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d869      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e66:	4a94      	ldr	r2, [pc, #592]	; (80020b8 <HAL_GPIO_Init+0x2ac>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d04c      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e6c:	4a92      	ldr	r2, [pc, #584]	; (80020b8 <HAL_GPIO_Init+0x2ac>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d863      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e72:	4a92      	ldr	r2, [pc, #584]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d046      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
 8001e78:	4a90      	ldr	r2, [pc, #576]	; (80020bc <HAL_GPIO_Init+0x2b0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d85d      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d82a      	bhi.n	8001ed8 <HAL_GPIO_Init+0xcc>
 8001e82:	2b12      	cmp	r3, #18
 8001e84:	d859      	bhi.n	8001f3a <HAL_GPIO_Init+0x12e>
 8001e86:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <HAL_GPIO_Init+0x80>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001ee1 	.word	0x08001ee1
 8001e94:	08001ef3 	.word	0x08001ef3
 8001e98:	08001f35 	.word	0x08001f35
 8001e9c:	08001f3b 	.word	0x08001f3b
 8001ea0:	08001f3b 	.word	0x08001f3b
 8001ea4:	08001f3b 	.word	0x08001f3b
 8001ea8:	08001f3b 	.word	0x08001f3b
 8001eac:	08001f3b 	.word	0x08001f3b
 8001eb0:	08001f3b 	.word	0x08001f3b
 8001eb4:	08001f3b 	.word	0x08001f3b
 8001eb8:	08001f3b 	.word	0x08001f3b
 8001ebc:	08001f3b 	.word	0x08001f3b
 8001ec0:	08001f3b 	.word	0x08001f3b
 8001ec4:	08001f3b 	.word	0x08001f3b
 8001ec8:	08001f3b 	.word	0x08001f3b
 8001ecc:	08001f3b 	.word	0x08001f3b
 8001ed0:	08001ee9 	.word	0x08001ee9
 8001ed4:	08001efd 	.word	0x08001efd
 8001ed8:	4a79      	ldr	r2, [pc, #484]	; (80020c0 <HAL_GPIO_Init+0x2b4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ede:	e02c      	b.n	8001f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e029      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	3304      	adds	r3, #4
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e024      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	623b      	str	r3, [r7, #32]
          break;
 8001efa:	e01f      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	330c      	adds	r3, #12
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e01a      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e013      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	611a      	str	r2, [r3, #16]
          break;
 8001f26:	e009      	b.n	8001f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	615a      	str	r2, [r3, #20]
          break;
 8001f32:	e003      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x130>
          break;
 8001f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	d801      	bhi.n	8001f46 <HAL_GPIO_Init+0x13a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	e001      	b.n	8001f4a <HAL_GPIO_Init+0x13e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	d802      	bhi.n	8001f58 <HAL_GPIO_Init+0x14c>
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	e002      	b.n	8001f5e <HAL_GPIO_Init+0x152>
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	3b08      	subs	r3, #8
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	210f      	movs	r1, #15
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	401a      	ands	r2, r3
 8001f70:	6a39      	ldr	r1, [r7, #32]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80b1 	beq.w	80020ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a4c      	ldr	r2, [pc, #304]	; (80020c4 <HAL_GPIO_Init+0x2b8>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_GPIO_Init+0x2b8>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fa4:	4a48      	ldr	r2, [pc, #288]	; (80020c8 <HAL_GPIO_Init+0x2bc>)
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <HAL_GPIO_Init+0x2c0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_GPIO_Init+0x1ec>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3f      	ldr	r2, [pc, #252]	; (80020d0 <HAL_GPIO_Init+0x2c4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3e      	ldr	r2, [pc, #248]	; (80020d4 <HAL_GPIO_Init+0x2c8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_Init+0x1e4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3d      	ldr	r2, [pc, #244]	; (80020d8 <HAL_GPIO_Init+0x2cc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_GPIO_Init+0x1e0>
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e006      	b.n	8001ffa <HAL_GPIO_Init+0x1ee>
 8001fec:	2304      	movs	r3, #4
 8001fee:	e004      	b.n	8001ffa <HAL_GPIO_Init+0x1ee>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e002      	b.n	8001ffa <HAL_GPIO_Init+0x1ee>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_GPIO_Init+0x1ee>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	f002 0203 	and.w	r2, r2, #3
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	4093      	lsls	r3, r2
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800200a:	492f      	ldr	r1, [pc, #188]	; (80020c8 <HAL_GPIO_Init+0x2bc>)
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	492c      	ldr	r1, [pc, #176]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	4928      	ldr	r1, [pc, #160]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4922      	ldr	r1, [pc, #136]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	491e      	ldr	r1, [pc, #120]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002064:	4013      	ands	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4918      	ldr	r1, [pc, #96]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	4914      	ldr	r1, [pc, #80]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d021      	beq.n	80020e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
 80020a8:	e021      	b.n	80020ee <HAL_GPIO_Init+0x2e2>
 80020aa:	bf00      	nop
 80020ac:	10320000 	.word	0x10320000
 80020b0:	10310000 	.word	0x10310000
 80020b4:	10220000 	.word	0x10220000
 80020b8:	10210000 	.word	0x10210000
 80020bc:	10120000 	.word	0x10120000
 80020c0:	10110000 	.word	0x10110000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40010800 	.word	0x40010800
 80020d0:	40010c00 	.word	0x40010c00
 80020d4:	40011000 	.word	0x40011000
 80020d8:	40011400 	.word	0x40011400
 80020dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_GPIO_Init+0x304>)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4909      	ldr	r1, [pc, #36]	; (8002110 <HAL_GPIO_Init+0x304>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	3301      	adds	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f47f ae8e 	bne.w	8001e20 <HAL_GPIO_Init+0x14>
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	372c      	adds	r7, #44	; 0x2c
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e001      	b.n	8002136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
	...

08002144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e12b      	b.n	80023ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fb22 	bl	80007b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a8:	f000 ffea 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 80021ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a81      	ldr	r2, [pc, #516]	; (80023b8 <HAL_I2C_Init+0x274>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d807      	bhi.n	80021c8 <HAL_I2C_Init+0x84>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a80      	ldr	r2, [pc, #512]	; (80023bc <HAL_I2C_Init+0x278>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	bf94      	ite	ls
 80021c0:	2301      	movls	r3, #1
 80021c2:	2300      	movhi	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e006      	b.n	80021d6 <HAL_I2C_Init+0x92>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a7d      	ldr	r2, [pc, #500]	; (80023c0 <HAL_I2C_Init+0x27c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	bf94      	ite	ls
 80021d0:	2301      	movls	r3, #1
 80021d2:	2300      	movhi	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0e7      	b.n	80023ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4a78      	ldr	r2, [pc, #480]	; (80023c4 <HAL_I2C_Init+0x280>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0c9b      	lsrs	r3, r3, #18
 80021e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a6a      	ldr	r2, [pc, #424]	; (80023b8 <HAL_I2C_Init+0x274>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d802      	bhi.n	8002218 <HAL_I2C_Init+0xd4>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	e009      	b.n	800222c <HAL_I2C_Init+0xe8>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	4a69      	ldr	r2, [pc, #420]	; (80023c8 <HAL_I2C_Init+0x284>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	099b      	lsrs	r3, r3, #6
 800222a:	3301      	adds	r3, #1
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800223e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	495c      	ldr	r1, [pc, #368]	; (80023b8 <HAL_I2C_Init+0x274>)
 8002248:	428b      	cmp	r3, r1
 800224a:	d819      	bhi.n	8002280 <HAL_I2C_Init+0x13c>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e59      	subs	r1, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fbb1 f3f3 	udiv	r3, r1, r3
 800225a:	1c59      	adds	r1, r3, #1
 800225c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002260:	400b      	ands	r3, r1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_I2C_Init+0x138>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1e59      	subs	r1, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fbb1 f3f3 	udiv	r3, r1, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227a:	e051      	b.n	8002320 <HAL_I2C_Init+0x1dc>
 800227c:	2304      	movs	r3, #4
 800227e:	e04f      	b.n	8002320 <HAL_I2C_Init+0x1dc>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d111      	bne.n	80022ac <HAL_I2C_Init+0x168>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	440b      	add	r3, r1
 8002296:	fbb0 f3f3 	udiv	r3, r0, r3
 800229a:	3301      	adds	r3, #1
 800229c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	e012      	b.n	80022d2 <HAL_I2C_Init+0x18e>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e58      	subs	r0, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	0099      	lsls	r1, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Init+0x196>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e022      	b.n	8002320 <HAL_I2C_Init+0x1dc>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10e      	bne.n	8002300 <HAL_I2C_Init+0x1bc>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1e58      	subs	r0, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	440b      	add	r3, r1
 80022f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022fe:	e00f      	b.n	8002320 <HAL_I2C_Init+0x1dc>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1e58      	subs	r0, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	0099      	lsls	r1, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	fbb0 f3f3 	udiv	r3, r0, r3
 8002316:	3301      	adds	r3, #1
 8002318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	6809      	ldr	r1, [r1, #0]
 8002324:	4313      	orrs	r3, r2
 8002326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800234e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6911      	ldr	r1, [r2, #16]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68d2      	ldr	r2, [r2, #12]
 800235a:	4311      	orrs	r1, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	000186a0 	.word	0x000186a0
 80023bc:	001e847f 	.word	0x001e847f
 80023c0:	003d08ff 	.word	0x003d08ff
 80023c4:	431bde83 	.word	0x431bde83
 80023c8:	10624dd3 	.word	0x10624dd3

080023cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	461a      	mov	r2, r3
 80023d8:	460b      	mov	r3, r1
 80023da:	817b      	strh	r3, [r7, #10]
 80023dc:	4613      	mov	r3, r2
 80023de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fc06 	bl	8001bf0 <HAL_GetTick>
 80023e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	f040 80e0 	bne.w	80025b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2319      	movs	r3, #25
 80023fa:	2201      	movs	r2, #1
 80023fc:	4970      	ldr	r1, [pc, #448]	; (80025c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f964 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800240a:	2302      	movs	r3, #2
 800240c:	e0d3      	b.n	80025b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_I2C_Master_Transmit+0x50>
 8002418:	2302      	movs	r3, #2
 800241a:	e0cc      	b.n	80025b6 <HAL_I2C_Master_Transmit+0x1ea>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d007      	beq.n	8002442 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2221      	movs	r2, #33	; 0x21
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2210      	movs	r2, #16
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	893a      	ldrh	r2, [r7, #8]
 8002472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a50      	ldr	r2, [pc, #320]	; (80025c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002484:	8979      	ldrh	r1, [r7, #10]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	6a3a      	ldr	r2, [r7, #32]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f89c 	bl	80025c8 <I2C_MasterRequestWrite>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e08d      	b.n	80025b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024b0:	e066      	b.n	8002580 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	6a39      	ldr	r1, [r7, #32]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f9de 	bl	8002878 <I2C_WaitOnTXEFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d107      	bne.n	80024da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06b      	b.n	80025b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b04      	cmp	r3, #4
 800251a:	d11b      	bne.n	8002554 <HAL_I2C_Master_Transmit+0x188>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d017      	beq.n	8002554 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6a39      	ldr	r1, [r7, #32]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f9ce 	bl	80028fa <I2C_WaitOnBTFFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	2b04      	cmp	r3, #4
 800256a:	d107      	bne.n	800257c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e01a      	b.n	80025b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	d194      	bne.n	80024b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	00100002 	.word	0x00100002
 80025c4:	ffff0000 	.word	0xffff0000

080025c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d006      	beq.n	80025f2 <I2C_MasterRequestWrite+0x2a>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d003      	beq.n	80025f2 <I2C_MasterRequestWrite+0x2a>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f0:	d108      	bne.n	8002604 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e00b      	b.n	800261c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	2b12      	cmp	r3, #18
 800260a:	d107      	bne.n	800261c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f84f 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	d103      	bne.n	800264c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e035      	b.n	80026bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002658:	d108      	bne.n	800266c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002668:	611a      	str	r2, [r3, #16]
 800266a:	e01b      	b.n	80026a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800266c:	897b      	ldrh	r3, [r7, #10]
 800266e:	11db      	asrs	r3, r3, #7
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 0306 	and.w	r3, r3, #6
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f063 030f 	orn	r3, r3, #15
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	490e      	ldr	r1, [pc, #56]	; (80026c4 <I2C_MasterRequestWrite+0xfc>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f875 	bl	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e010      	b.n	80026bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <I2C_MasterRequestWrite+0x100>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f865 	bl	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	00010008 	.word	0x00010008
 80026c8:	00010002 	.word	0x00010002

080026cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026dc:	e025      	b.n	800272a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e4:	d021      	beq.n	800272a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7ff fa83 	bl	8001bf0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d116      	bne.n	800272a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0220 	orr.w	r2, r3, #32
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e023      	b.n	8002772 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10d      	bne.n	8002750 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4013      	ands	r3, r2
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	e00c      	b.n	800276a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	429a      	cmp	r2, r3
 800276e:	d0b6      	beq.n	80026de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002788:	e051      	b.n	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002798:	d123      	bne.n	80027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f043 0204 	orr.w	r2, r3, #4
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e046      	b.n	8002870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e8:	d021      	beq.n	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ea:	f7ff fa01 	bl	8001bf0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d302      	bcc.n	8002800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d116      	bne.n	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f043 0220 	orr.w	r2, r3, #32
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e020      	b.n	8002870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d10c      	bne.n	8002852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4013      	ands	r3, r2
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf14      	ite	ne
 800284a:	2301      	movne	r3, #1
 800284c:	2300      	moveq	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	e00b      	b.n	800286a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	43da      	mvns	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d18d      	bne.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002884:	e02d      	b.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f878 	bl	800297c <I2C_IsAcknowledgeFailed>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e02d      	b.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289c:	d021      	beq.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7ff f9a7 	bl	8001bf0 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f043 0220 	orr.w	r2, r3, #32
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e007      	b.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	2b80      	cmp	r3, #128	; 0x80
 80028ee:	d1ca      	bne.n	8002886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002906:	e02d      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f837 	bl	800297c <I2C_IsAcknowledgeFailed>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e02d      	b.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291e:	d021      	beq.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002920:	f7ff f966 	bl	8001bf0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	d302      	bcc.n	8002936 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e007      	b.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d1ca      	bne.n	8002908 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d11b      	bne.n	80029cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800299c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f043 0204 	orr.w	r2, r3, #4
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e26c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8087 	beq.w	8002b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d112      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
 8002a10:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1e:	4b89      	ldr	r3, [pc, #548]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d06c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x12c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d168      	bne.n	8002b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e246      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x76>
 8002a40:	4b80      	ldr	r3, [pc, #512]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a7f      	ldr	r2, [pc, #508]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e02e      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x98>
 8002a56:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a77      	ldr	r2, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01d      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0xbc>
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6e      	ldr	r2, [pc, #440]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a94:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6a      	ldr	r2, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a67      	ldr	r2, [pc, #412]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff f89c 	bl	8001bf0 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7ff f898 	bl	8001bf0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1fa      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xe4>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff f888 	bl	8001bf0 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7ff f884 	bl	8001bf0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1e6      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b53      	ldr	r3, [pc, #332]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x10c>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1ba      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4939      	ldr	r1, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7ff f83d 	bl	8001bf0 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7ff f839 	bl	8001bf0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e19b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4927      	ldr	r1, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e015      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f81c 	bl	8001bf0 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7ff f818 	bl	8001bf0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e17a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03a      	beq.n	8002c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7fe fffc 	bl	8001bf0 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fe fff8 	bl	8001bf0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e15a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f000 fb08 	bl	8003230 <RCC_Delay>
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7fe ffe2 	bl	8001bf0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe ffde 	bl	8001bf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d908      	bls.n	8002c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e140      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	42420000 	.word	0x42420000
 8002c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b9e      	ldr	r3, [pc, #632]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e9      	bne.n	8002c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a6 	beq.w	8002db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b97      	ldr	r3, [pc, #604]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a93      	ldr	r2, [pc, #588]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b8e      	ldr	r3, [pc, #568]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7fe ff9f 	bl	8001bf0 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7fe ff9b 	bl	8001bf0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0fd      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x312>
 8002cdc:	4b7b      	ldr	r3, [pc, #492]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a7a      	ldr	r2, [pc, #488]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x334>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a72      	ldr	r2, [pc, #456]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x356>
 8002d14:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a6c      	ldr	r2, [pc, #432]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6213      	str	r3, [r2, #32]
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a63      	ldr	r2, [pc, #396]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe ff4f 	bl	8001bf0 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe ff4b 	bl	8001bf0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0ab      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x37e>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe ff39 	bl	8001bf0 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe ff35 	bl	8001bf0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e095      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8081 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d061      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d146      	bne.n	8002e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe ff09 	bl	8001bf0 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe ff05 	bl	8001bf0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e067      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	492d      	ldr	r1, [pc, #180]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a19      	ldr	r1, [r3, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	4927      	ldr	r1, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fed9 	bl	8001bf0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe fed5 	bl	8001bf0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e037      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x46a>
 8002e60:	e02f      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fec2 	bl	8001bf0 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe febe 	bl	8001bf0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e020      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x498>
 8002e8e:	e018      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e013      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42420060 	.word	0x42420060

08002ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0d0      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4965      	ldr	r1, [pc, #404]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d040      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d115      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e073      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06b      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fe12 	bl	8001bf0 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe fe0e 	bl	8001bf0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e053      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d210      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	4922      	ldr	r1, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f821 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490a      	ldr	r1, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fbe4 	bl	8000854 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
 80030a0:	08005d68 	.word	0x08005d68
 80030a4:	20000500 	.word	0x20000500
 80030a8:	20000508 	.word	0x20000508

080030ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b490      	push	{r4, r7}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030b4:	1d3c      	adds	r4, r7, #4
 80030b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030bc:	f240 2301 	movw	r3, #513	; 0x201
 80030c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d002      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x40>
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d003      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x46>
 80030ea:	e02d      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030ee:	623b      	str	r3, [r7, #32]
      break;
 80030f0:	e02d      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	0c9b      	lsrs	r3, r3, #18
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030fe:	4413      	add	r3, r2
 8003100:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003104:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0c5b      	lsrs	r3, r3, #17
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311e:	4413      	add	r3, r2
 8003120:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003124:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312a:	fb02 f203 	mul.w	r2, r2, r3
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e004      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_RCC_GetSysClockFreq+0xbc>)
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	623b      	str	r3, [r7, #32]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 800314a:	623b      	str	r3, [r7, #32]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	6a3b      	ldr	r3, [r7, #32]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc90      	pop	{r4, r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	08005d50 	.word	0x08005d50
 8003160:	40021000 	.word	0x40021000
 8003164:	007a1200 	.word	0x007a1200
 8003168:	003d0900 	.word	0x003d0900

0800316c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003170:	4b02      	ldr	r3, [pc, #8]	; (800317c <HAL_RCC_GetHCLKFreq+0x10>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	20000500 	.word	0x20000500

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003184:	f7ff fff2 	bl	800316c <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08005d78 	.word	0x08005d78

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ac:	f7ff ffde 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	0adb      	lsrs	r3, r3, #11
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08005d78 	.word	0x08005d78

080031d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	220f      	movs	r2, #15
 80031de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_RCC_GetClockConfig+0x58>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0203 	and.w	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031ec:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <HAL_RCC_GetClockConfig+0x58>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_GetClockConfig+0x58>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_RCC_GetClockConfig+0x58>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	08db      	lsrs	r3, r3, #3
 800320a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_GetClockConfig+0x5c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0207 	and.w	r2, r3, #7
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40021000 	.word	0x40021000
 800322c:	40022000 	.word	0x40022000

08003230 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <RCC_Delay+0x34>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <RCC_Delay+0x38>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0a5b      	lsrs	r3, r3, #9
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800324c:	bf00      	nop
  }
  while (Delay --);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1e5a      	subs	r2, r3, #1
 8003252:	60fa      	str	r2, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f9      	bne.n	800324c <RCC_Delay+0x1c>
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	20000500 	.word	0x20000500
 8003268:	10624dd3 	.word	0x10624dd3

0800326c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e041      	b.n	8003302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f839 	bl	800330a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f000 f9b4 	bl	8003618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e03a      	b.n	80033aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_TIM_Base_Start_IT+0x98>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x58>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335e:	d009      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x58>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x58>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a13      	ldr	r2, [pc, #76]	; (80033bc <HAL_TIM_Base_Start_IT+0xa0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d010      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e007      	b.n	80033a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800

080033c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0202 	mvn.w	r2, #2
 80033ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8ed 	bl	80035e2 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8e0 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f8ef 	bl	80035f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0204 	mvn.w	r2, #4
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8c3 	bl	80035e2 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8b6 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f8c5 	bl	80035f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b08      	cmp	r3, #8
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0208 	mvn.w	r2, #8
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f899 	bl	80035e2 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f88c 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f89b 	bl	80035f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0210 	mvn.w	r2, #16
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2208      	movs	r2, #8
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f86f 	bl	80035e2 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f862 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f871 	bl	80035f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0201 	mvn.w	r2, #1
 800353c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fc ff5a 	bl	80003f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b80      	cmp	r3, #128	; 0x80
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d107      	bne.n	8003570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8bf 	bl	80036ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d10e      	bne.n	800359c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d107      	bne.n	800359c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f835 	bl	8003606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d10e      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d107      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0220 	mvn.w	r2, #32
 80035c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f88a 	bl	80036dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a29      	ldr	r2, [pc, #164]	; (80036d0 <TIM_Base_SetConfig+0xb8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00b      	beq.n	8003648 <TIM_Base_SetConfig+0x30>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d007      	beq.n	8003648 <TIM_Base_SetConfig+0x30>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <TIM_Base_SetConfig+0xbc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x30>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <TIM_Base_SetConfig+0xc0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <TIM_Base_SetConfig+0xb8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_Base_SetConfig+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d007      	beq.n	800367a <TIM_Base_SetConfig+0x62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <TIM_Base_SetConfig+0xbc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_Base_SetConfig+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <TIM_Base_SetConfig+0xc0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a07      	ldr	r2, [pc, #28]	; (80036d0 <TIM_Base_SetConfig+0xb8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d103      	bne.n	80036c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	615a      	str	r2, [r3, #20]
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800

080036dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800370e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003712:	2b84      	cmp	r3, #132	; 0x84
 8003714:	d005      	beq.n	8003722 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003716:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4413      	add	r3, r2
 800371e:	3303      	adds	r3, #3
 8003720:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003722:	68fb      	ldr	r3, [r7, #12]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003732:	f000 fae7 	bl	8003d04 <vTaskStartScheduler>
  
  return osOK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}

0800373c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af04      	add	r7, sp, #16
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d020      	beq.n	8003790 <osThreadCreate+0x54>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01c      	beq.n	8003790 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685c      	ldr	r4, [r3, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681d      	ldr	r5, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691e      	ldr	r6, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ffc9 	bl	8003700 <makeFreeRtosPriority>
 800376e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003778:	9202      	str	r2, [sp, #8]
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	9100      	str	r1, [sp, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	4632      	mov	r2, r6
 8003782:	4629      	mov	r1, r5
 8003784:	4620      	mov	r0, r4
 8003786:	f000 f8e8 	bl	800395a <xTaskCreateStatic>
 800378a:	4603      	mov	r3, r0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	e01c      	b.n	80037ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685c      	ldr	r4, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800379c:	b29e      	uxth	r6, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ffab 	bl	8003700 <makeFreeRtosPriority>
 80037aa:	4602      	mov	r2, r0
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	9200      	str	r2, [sp, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4632      	mov	r2, r6
 80037b8:	4629      	mov	r1, r5
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 f929 	bl	8003a12 <xTaskCreate>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d001      	beq.n	80037ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037ca:	68fb      	ldr	r3, [r7, #12]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <osDelay+0x16>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	e000      	b.n	80037ec <osDelay+0x18>
 80037ea:	2301      	movs	r3, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fa55 	bl	8003c9c <vTaskDelay>
  
  return osOK;
 80037f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f103 0208 	add.w	r2, r3, #8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003814:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f103 0208 	add.w	r2, r3, #8
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f103 0208 	add.w	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ae:	d103      	bne.n	80038b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e00c      	b.n	80038d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3308      	adds	r3, #8
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e002      	b.n	80038c6 <vListInsert+0x2e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d2f6      	bcs.n	80038c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	601a      	str	r2, [r3, #0]
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6852      	ldr	r2, [r2, #4]
 8003928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d103      	bne.n	800393c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800395a:	b580      	push	{r7, lr}
 800395c:	b08e      	sub	sp, #56	; 0x38
 800395e:	af04      	add	r7, sp, #16
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <xTaskCreateStatic+0x46>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	61fb      	str	r3, [r7, #28]
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039a0:	23b4      	movs	r3, #180	; 0xb4
 80039a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2bb4      	cmp	r3, #180	; 0xb4
 80039a8:	d00a      	beq.n	80039c0 <xTaskCreateStatic+0x66>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	61bb      	str	r3, [r7, #24]
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01e      	beq.n	8003a04 <xTaskCreateStatic+0xaa>
 80039c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01b      	beq.n	8003a04 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039de:	2300      	movs	r3, #0
 80039e0:	9303      	str	r3, [sp, #12]
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	9302      	str	r3, [sp, #8]
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f850 	bl	8003a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039fe:	f000 f8e3 	bl	8003bc8 <prvAddNewTaskToReadyList>
 8003a02:	e001      	b.n	8003a08 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a08:	697b      	ldr	r3, [r7, #20]
	}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3728      	adds	r7, #40	; 0x28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b08c      	sub	sp, #48	; 0x30
 8003a16:	af04      	add	r7, sp, #16
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fe9a 	bl	8004760 <pvPortMalloc>
 8003a2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00e      	beq.n	8003a52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a34:	20b4      	movs	r0, #180	; 0xb4
 8003a36:	f000 fe93 	bl	8004760 <pvPortMalloc>
 8003a3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30
 8003a48:	e005      	b.n	8003a56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f000 ff4c 	bl	80048e8 <vPortFree>
 8003a50:	e001      	b.n	8003a56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a64:	88fa      	ldrh	r2, [r7, #6]
 8003a66:	2300      	movs	r3, #0
 8003a68:	9303      	str	r3, [sp, #12]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	9302      	str	r3, [sp, #8]
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f80e 	bl	8003a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a80:	69f8      	ldr	r0, [r7, #28]
 8003a82:	f000 f8a1 	bl	8003bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	e002      	b.n	8003a92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a92:	69bb      	ldr	r3, [r7, #24]
	}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f023 0307 	bic.w	r3, r3, #7
 8003ac2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	617b      	str	r3, [r7, #20]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e012      	b.n	8003b10 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	7819      	ldrb	r1, [r3, #0]
 8003af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	3334      	adds	r3, #52	; 0x34
 8003afa:	460a      	mov	r2, r1
 8003afc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d9e9      	bls.n	8003aea <prvInitialiseNewTask+0x4e>
 8003b16:	e000      	b.n	8003b1a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003b18:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	2b06      	cmp	r3, #6
 8003b26:	d901      	bls.n	8003b2c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b28:	2306      	movs	r3, #6
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	3304      	adds	r3, #4
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fe79 	bl	800383a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fe74 	bl	800383a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	f1c3 0207 	rsb	r2, r3, #7
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	334c      	adds	r3, #76	; 0x4c
 8003b7c:	2260      	movs	r2, #96	; 0x60
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 f8e8 	bl	8004d56 <memset>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <prvInitialiseNewTask+0x120>)
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <prvInitialiseNewTask+0x124>)
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <prvInitialiseNewTask+0x128>)
 8003b96:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	69b8      	ldr	r0, [r7, #24]
 8003b9e:	f000 fc29 	bl	80043f4 <pxPortInitialiseStack>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	08005da0 	.word	0x08005da0
 8003bc0:	08005dc0 	.word	0x08005dc0
 8003bc4:	08005d80 	.word	0x08005d80

08003bc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bd0:	f000 fd04 	bl	80045dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <prvAddNewTaskToReadyList+0xb8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	4a29      	ldr	r2, [pc, #164]	; (8003c80 <prvAddNewTaskToReadyList+0xb8>)
 8003bdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bde:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <prvAddNewTaskToReadyList+0xbc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003be6:	4a27      	ldr	r2, [pc, #156]	; (8003c84 <prvAddNewTaskToReadyList+0xbc>)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <prvAddNewTaskToReadyList+0xb8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d110      	bne.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bf4:	f000 fad2 	bl	800419c <prvInitialiseTaskLists>
 8003bf8:	e00d      	b.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <prvAddNewTaskToReadyList+0xc0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <prvAddNewTaskToReadyList+0xbc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d802      	bhi.n	8003c16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c10:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <prvAddNewTaskToReadyList+0xbc>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <prvAddNewTaskToReadyList+0xc4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <prvAddNewTaskToReadyList+0xc4>)
 8003c1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	2201      	movs	r2, #1
 8003c26:	409a      	lsls	r2, r3
 8003c28:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	4a18      	ldr	r2, [pc, #96]	; (8003c90 <prvAddNewTaskToReadyList+0xc8>)
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <prvAddNewTaskToReadyList+0xcc>)
 8003c40:	441a      	add	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f7ff fe02 	bl	8003852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c4e:	f000 fcf5 	bl	800463c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <prvAddNewTaskToReadyList+0xc0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00e      	beq.n	8003c78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <prvAddNewTaskToReadyList+0xbc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d207      	bcs.n	8003c78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <prvAddNewTaskToReadyList+0xd0>)
 8003c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000958 	.word	0x20000958
 8003c84:	20000858 	.word	0x20000858
 8003c88:	20000964 	.word	0x20000964
 8003c8c:	20000974 	.word	0x20000974
 8003c90:	20000960 	.word	0x20000960
 8003c94:	2000085c 	.word	0x2000085c
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d017      	beq.n	8003cde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <vTaskDelay+0x60>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <vTaskDelay+0x30>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	60bb      	str	r3, [r7, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ccc:	f000 f884 	bl	8003dd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fb28 	bl	8004328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cd8:	f000 f88c 	bl	8003df4 <xTaskResumeAll>
 8003cdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <vTaskDelay+0x64>)
 8003ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000980 	.word	0x20000980
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d12:	463a      	mov	r2, r7
 8003d14:	1d39      	adds	r1, r7, #4
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc fa18 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d20:	6839      	ldr	r1, [r7, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	9202      	str	r2, [sp, #8]
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	460a      	mov	r2, r1
 8003d32:	4921      	ldr	r1, [pc, #132]	; (8003db8 <vTaskStartScheduler+0xb4>)
 8003d34:	4821      	ldr	r0, [pc, #132]	; (8003dbc <vTaskStartScheduler+0xb8>)
 8003d36:	f7ff fe10 	bl	800395a <xTaskCreateStatic>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <vTaskStartScheduler+0xbc>)
 8003d3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d40:	4b1f      	ldr	r3, [pc, #124]	; (8003dc0 <vTaskStartScheduler+0xbc>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e001      	b.n	8003d52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d11b      	bne.n	8003d90 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	613b      	str	r3, [r7, #16]
}
 8003d6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d6c:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <vTaskStartScheduler+0xc0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	334c      	adds	r3, #76	; 0x4c
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <vTaskStartScheduler+0xc4>)
 8003d74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <vTaskStartScheduler+0xc8>)
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <vTaskStartScheduler+0xcc>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <vTaskStartScheduler+0xd0>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d8a:	f000 fbb5 	bl	80044f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d8e:	e00e      	b.n	8003dae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d96:	d10a      	bne.n	8003dae <vTaskStartScheduler+0xaa>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <vTaskStartScheduler+0xa8>
}
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	08005d60 	.word	0x08005d60
 8003dbc:	0800416d 	.word	0x0800416d
 8003dc0:	2000097c 	.word	0x2000097c
 8003dc4:	20000858 	.word	0x20000858
 8003dc8:	20000514 	.word	0x20000514
 8003dcc:	20000978 	.word	0x20000978
 8003dd0:	20000964 	.word	0x20000964
 8003dd4:	2000095c 	.word	0x2000095c

08003dd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <vTaskSuspendAll+0x18>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a03      	ldr	r2, [pc, #12]	; (8003df0 <vTaskSuspendAll+0x18>)
 8003de4:	6013      	str	r3, [r2, #0]
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000980 	.word	0x20000980

08003df4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	603b      	str	r3, [r7, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e20:	f000 fbdc 	bl	80045dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e24:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	4a37      	ldr	r2, [pc, #220]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e2e:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <xTaskResumeAll+0x114>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d161      	bne.n	8003efa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e36:	4b35      	ldr	r3, [pc, #212]	; (8003f0c <xTaskResumeAll+0x118>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d05d      	beq.n	8003efa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e3e:	e02e      	b.n	8003e9e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e40:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <xTaskResumeAll+0x11c>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3318      	adds	r3, #24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fd5b 	bl	8003908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fd56 	bl	8003908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	2201      	movs	r2, #1
 8003e62:	409a      	lsls	r2, r3
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <xTaskResumeAll+0x120>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <xTaskResumeAll+0x120>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <xTaskResumeAll+0x124>)
 8003e7c:	441a      	add	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7ff fce4 	bl	8003852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <xTaskResumeAll+0x128>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e98:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <xTaskResumeAll+0x11c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1cc      	bne.n	8003e40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eac:	f000 fa18 	bl	80042e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <xTaskResumeAll+0x130>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ebc:	f000 f836 	bl	8003f2c <xTaskIncrementTick>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f1      	bne.n	8003ebc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <xTaskResumeAll+0x130>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <xTaskResumeAll+0x12c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eea:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <xTaskResumeAll+0x134>)
 8003eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003efa:	f000 fb9f 	bl	800463c <vPortExitCritical>

	return xAlreadyYielded;
 8003efe:	68bb      	ldr	r3, [r7, #8]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000980 	.word	0x20000980
 8003f0c:	20000958 	.word	0x20000958
 8003f10:	20000918 	.word	0x20000918
 8003f14:	20000960 	.word	0x20000960
 8003f18:	2000085c 	.word	0x2000085c
 8003f1c:	20000858 	.word	0x20000858
 8003f20:	2000096c 	.word	0x2000096c
 8003f24:	20000968 	.word	0x20000968
 8003f28:	e000ed04 	.word	0xe000ed04

08003f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f36:	4b51      	ldr	r3, [pc, #324]	; (800407c <xTaskIncrementTick+0x150>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 808d 	bne.w	800405a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <xTaskIncrementTick+0x154>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f48:	4a4d      	ldr	r2, [pc, #308]	; (8004080 <xTaskIncrementTick+0x154>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d120      	bne.n	8003f96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f54:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <xTaskIncrementTick+0x158>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	603b      	str	r3, [r7, #0]
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <xTaskIncrementTick+0x46>
 8003f74:	4b43      	ldr	r3, [pc, #268]	; (8004084 <xTaskIncrementTick+0x158>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	4b43      	ldr	r3, [pc, #268]	; (8004088 <xTaskIncrementTick+0x15c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a41      	ldr	r2, [pc, #260]	; (8004084 <xTaskIncrementTick+0x158>)
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4a41      	ldr	r2, [pc, #260]	; (8004088 <xTaskIncrementTick+0x15c>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b40      	ldr	r3, [pc, #256]	; (800408c <xTaskIncrementTick+0x160>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a3f      	ldr	r2, [pc, #252]	; (800408c <xTaskIncrementTick+0x160>)
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	f000 f9a5 	bl	80042e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f96:	4b3e      	ldr	r3, [pc, #248]	; (8004090 <xTaskIncrementTick+0x164>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d34d      	bcc.n	800403c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa0:	4b38      	ldr	r3, [pc, #224]	; (8004084 <xTaskIncrementTick+0x158>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <xTaskIncrementTick+0x82>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <xTaskIncrementTick+0x84>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <xTaskIncrementTick+0x164>)
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fba:	601a      	str	r2, [r3, #0]
					break;
 8003fbc:	e03e      	b.n	800403c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fbe:	4b31      	ldr	r3, [pc, #196]	; (8004084 <xTaskIncrementTick+0x158>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d203      	bcs.n	8003fde <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fd6:	4a2e      	ldr	r2, [pc, #184]	; (8004090 <xTaskIncrementTick+0x164>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6013      	str	r3, [r2, #0]
						break;
 8003fdc:	e02e      	b.n	800403c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fc90 	bl	8003908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3318      	adds	r3, #24
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fc87 	bl	8003908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <xTaskIncrementTick+0x168>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	4a22      	ldr	r2, [pc, #136]	; (8004094 <xTaskIncrementTick+0x168>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <xTaskIncrementTick+0x16c>)
 800401a:	441a      	add	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f7ff fc15 	bl	8003852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <xTaskIncrementTick+0x170>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	429a      	cmp	r2, r3
 8004034:	d3b4      	bcc.n	8003fa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004036:	2301      	movs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800403a:	e7b1      	b.n	8003fa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <xTaskIncrementTick+0x170>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	4915      	ldr	r1, [pc, #84]	; (8004098 <xTaskIncrementTick+0x16c>)
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d907      	bls.n	8004064 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e004      	b.n	8004064 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <xTaskIncrementTick+0x174>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <xTaskIncrementTick+0x174>)
 8004062:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <xTaskIncrementTick+0x178>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004070:	697b      	ldr	r3, [r7, #20]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000980 	.word	0x20000980
 8004080:	2000095c 	.word	0x2000095c
 8004084:	20000910 	.word	0x20000910
 8004088:	20000914 	.word	0x20000914
 800408c:	20000970 	.word	0x20000970
 8004090:	20000978 	.word	0x20000978
 8004094:	20000960 	.word	0x20000960
 8004098:	2000085c 	.word	0x2000085c
 800409c:	20000858 	.word	0x20000858
 80040a0:	20000968 	.word	0x20000968
 80040a4:	2000096c 	.word	0x2000096c

080040a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ae:	4b29      	ldr	r3, [pc, #164]	; (8004154 <vTaskSwitchContext+0xac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <vTaskSwitchContext+0xb0>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040bc:	e044      	b.n	8004148 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <vTaskSwitchContext+0xb0>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040c4:	4b25      	ldr	r3, [pc, #148]	; (800415c <vTaskSwitchContext+0xb4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040d2:	7afb      	ldrb	r3, [r7, #11]
 80040d4:	f1c3 031f 	rsb	r3, r3, #31
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	4921      	ldr	r1, [pc, #132]	; (8004160 <vTaskSwitchContext+0xb8>)
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <vTaskSwitchContext+0x5c>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
}
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <vTaskSwitchContext+0x5a>
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4a14      	ldr	r2, [pc, #80]	; (8004160 <vTaskSwitchContext+0xb8>)
 8004110:	4413      	add	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3308      	adds	r3, #8
 8004126:	429a      	cmp	r2, r3
 8004128:	d104      	bne.n	8004134 <vTaskSwitchContext+0x8c>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <vTaskSwitchContext+0xbc>)
 800413c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <vTaskSwitchContext+0xbc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	334c      	adds	r3, #76	; 0x4c
 8004144:	4a08      	ldr	r2, [pc, #32]	; (8004168 <vTaskSwitchContext+0xc0>)
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000980 	.word	0x20000980
 8004158:	2000096c 	.word	0x2000096c
 800415c:	20000960 	.word	0x20000960
 8004160:	2000085c 	.word	0x2000085c
 8004164:	20000858 	.word	0x20000858
 8004168:	20000514 	.word	0x20000514

0800416c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004174:	f000 f852 	bl	800421c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <prvIdleTask+0x28>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d9f9      	bls.n	8004174 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <prvIdleTask+0x2c>)
 8004182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004190:	e7f0      	b.n	8004174 <prvIdleTask+0x8>
 8004192:	bf00      	nop
 8004194:	2000085c 	.word	0x2000085c
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	e00c      	b.n	80041c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <prvInitialiseTaskLists+0x60>)
 80041b4:	4413      	add	r3, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fb20 	bl	80037fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3301      	adds	r3, #1
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d9ef      	bls.n	80041a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041c8:	480d      	ldr	r0, [pc, #52]	; (8004200 <prvInitialiseTaskLists+0x64>)
 80041ca:	f7ff fb17 	bl	80037fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041ce:	480d      	ldr	r0, [pc, #52]	; (8004204 <prvInitialiseTaskLists+0x68>)
 80041d0:	f7ff fb14 	bl	80037fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041d4:	480c      	ldr	r0, [pc, #48]	; (8004208 <prvInitialiseTaskLists+0x6c>)
 80041d6:	f7ff fb11 	bl	80037fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041da:	480c      	ldr	r0, [pc, #48]	; (800420c <prvInitialiseTaskLists+0x70>)
 80041dc:	f7ff fb0e 	bl	80037fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041e0:	480b      	ldr	r0, [pc, #44]	; (8004210 <prvInitialiseTaskLists+0x74>)
 80041e2:	f7ff fb0b 	bl	80037fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <prvInitialiseTaskLists+0x78>)
 80041e8:	4a05      	ldr	r2, [pc, #20]	; (8004200 <prvInitialiseTaskLists+0x64>)
 80041ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <prvInitialiseTaskLists+0x7c>)
 80041ee:	4a05      	ldr	r2, [pc, #20]	; (8004204 <prvInitialiseTaskLists+0x68>)
 80041f0:	601a      	str	r2, [r3, #0]
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	2000085c 	.word	0x2000085c
 8004200:	200008e8 	.word	0x200008e8
 8004204:	200008fc 	.word	0x200008fc
 8004208:	20000918 	.word	0x20000918
 800420c:	2000092c 	.word	0x2000092c
 8004210:	20000944 	.word	0x20000944
 8004214:	20000910 	.word	0x20000910
 8004218:	20000914 	.word	0x20000914

0800421c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004222:	e019      	b.n	8004258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004224:	f000 f9da 	bl	80045dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <prvCheckTasksWaitingTermination+0x50>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3304      	adds	r3, #4
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fb67 	bl	8003908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800423a:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <prvCheckTasksWaitingTermination+0x54>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3b01      	subs	r3, #1
 8004240:	4a0b      	ldr	r2, [pc, #44]	; (8004270 <prvCheckTasksWaitingTermination+0x54>)
 8004242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <prvCheckTasksWaitingTermination+0x58>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <prvCheckTasksWaitingTermination+0x58>)
 800424c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800424e:	f000 f9f5 	bl	800463c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f810 	bl	8004278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <prvCheckTasksWaitingTermination+0x58>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e1      	bne.n	8004224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2000092c 	.word	0x2000092c
 8004270:	20000958 	.word	0x20000958
 8004274:	20000940 	.word	0x20000940

08004278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	334c      	adds	r3, #76	; 0x4c
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fe45 	bl	8004f14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fb25 	bl	80048e8 <vPortFree>
				vPortFree( pxTCB );
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fb22 	bl	80048e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042a4:	e018      	b.n	80042d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d103      	bne.n	80042b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fb19 	bl	80048e8 <vPortFree>
	}
 80042b6:	e00f      	b.n	80042d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d00a      	beq.n	80042d8 <prvDeleteTCB+0x60>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60fb      	str	r3, [r7, #12]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <prvDeleteTCB+0x5e>
	}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042e6:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <prvResetNextTaskUnblockTime+0x40>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <prvResetNextTaskUnblockTime+0x14>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <prvResetNextTaskUnblockTime+0x16>
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <prvResetNextTaskUnblockTime+0x44>)
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004300:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004302:	e008      	b.n	8004316 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <prvResetNextTaskUnblockTime+0x40>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <prvResetNextTaskUnblockTime+0x44>)
 8004314:	6013      	str	r3, [r2, #0]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr
 8004320:	20000910 	.word	0x20000910
 8004324:	20000978 	.word	0x20000978

08004328 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004332:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004338:	4b28      	ldr	r3, [pc, #160]	; (80043dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fae2 	bl	8003908 <uxListRemove>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	2201      	movs	r2, #1
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43da      	mvns	r2, r3
 8004358:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4013      	ands	r3, r2
 800435e:	4a20      	ldr	r2, [pc, #128]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004360:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004368:	d10a      	bne.n	8004380 <prvAddCurrentTaskToDelayedList+0x58>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3304      	adds	r3, #4
 8004376:	4619      	mov	r1, r3
 8004378:	481a      	ldr	r0, [pc, #104]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800437a:	f7ff fa6a 	bl	8003852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800437e:	e026      	b.n	80043ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	429a      	cmp	r2, r3
 8004396:	d209      	bcs.n	80043ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7ff fa77 	bl	8003898 <vListInsert>
}
 80043aa:	e010      	b.n	80043ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7ff fa6d 	bl	8003898 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d202      	bcs.n	80043ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043c8:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6013      	str	r3, [r2, #0]
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	2000095c 	.word	0x2000095c
 80043dc:	20000858 	.word	0x20000858
 80043e0:	20000960 	.word	0x20000960
 80043e4:	20000944 	.word	0x20000944
 80043e8:	20000914 	.word	0x20000914
 80043ec:	20000910 	.word	0x20000910
 80043f0:	20000978 	.word	0x20000978

080043f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b04      	subs	r3, #4
 8004404:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800440c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3b04      	subs	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b04      	subs	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004424:	4a08      	ldr	r2, [pc, #32]	; (8004448 <pxPortInitialiseStack+0x54>)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3b14      	subs	r3, #20
 800442e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3b20      	subs	r3, #32
 800443a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800443c:	68fb      	ldr	r3, [r7, #12]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	0800444d 	.word	0x0800444d

0800444c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <prvTaskExitError+0x54>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445e:	d00a      	beq.n	8004476 <prvTaskExitError+0x2a>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	60fb      	str	r3, [r7, #12]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <prvTaskExitError+0x28>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
}
 8004488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800448a:	bf00      	nop
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0fc      	beq.n	800448c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000510 	.word	0x20000510
	...

080044b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <pxCurrentTCBConst2>)
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044ba:	f380 8809 	msr	PSP, r0
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f380 8811 	msr	BASEPRI, r0
 80044ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80044ce:	4770      	bx	lr

080044d0 <pxCurrentTCBConst2>:
 80044d0:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80044d8:	4806      	ldr	r0, [pc, #24]	; (80044f4 <prvPortStartFirstTask+0x1c>)
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	6800      	ldr	r0, [r0, #0]
 80044de:	f380 8808 	msr	MSP, r0
 80044e2:	b662      	cpsie	i
 80044e4:	b661      	cpsie	f
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	df00      	svc	0
 80044f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044f2:	bf00      	nop
 80044f4:	e000ed08 	.word	0xe000ed08

080044f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <xPortStartScheduler+0xd0>)
 8004500:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	22ff      	movs	r2, #255	; 0xff
 800450e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004520:	b2da      	uxtb	r2, r3
 8004522:	4b2a      	ldr	r3, [pc, #168]	; (80045cc <xPortStartScheduler+0xd4>)
 8004524:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004526:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <xPortStartScheduler+0xd8>)
 8004528:	2207      	movs	r2, #7
 800452a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800452c:	e009      	b.n	8004542 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800452e:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <xPortStartScheduler+0xd8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3b01      	subs	r3, #1
 8004534:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <xPortStartScheduler+0xd8>)
 8004536:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	b2db      	uxtb	r3, r3
 8004540:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b80      	cmp	r3, #128	; 0x80
 800454c:	d0ef      	beq.n	800452e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800454e:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <xPortStartScheduler+0xd8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f1c3 0307 	rsb	r3, r3, #7
 8004556:	2b04      	cmp	r3, #4
 8004558:	d00a      	beq.n	8004570 <xPortStartScheduler+0x78>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	60bb      	str	r3, [r7, #8]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004570:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <xPortStartScheduler+0xd8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <xPortStartScheduler+0xd8>)
 8004578:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <xPortStartScheduler+0xd8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <xPortStartScheduler+0xd8>)
 8004584:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <xPortStartScheduler+0xdc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <xPortStartScheduler+0xdc>)
 8004594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800459a:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <xPortStartScheduler+0xdc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a0d      	ldr	r2, [pc, #52]	; (80045d4 <xPortStartScheduler+0xdc>)
 80045a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045a6:	f000 f8b9 	bl	800471c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <xPortStartScheduler+0xe0>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045b0:	f7ff ff92 	bl	80044d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045b4:	f7ff fd78 	bl	80040a8 <vTaskSwitchContext>
	prvTaskExitError();
 80045b8:	f7ff ff48 	bl	800444c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	e000e400 	.word	0xe000e400
 80045cc:	20000984 	.word	0x20000984
 80045d0:	20000988 	.word	0x20000988
 80045d4:	e000ed20 	.word	0xe000ed20
 80045d8:	20000510 	.word	0x20000510

080045dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	607b      	str	r3, [r7, #4]
}
 80045f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <vPortEnterCritical+0x58>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <vPortEnterCritical+0x58>)
 80045fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <vPortEnterCritical+0x58>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10f      	bne.n	8004628 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <vPortEnterCritical+0x5c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <vPortEnterCritical+0x4c>
	__asm volatile
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	603b      	str	r3, [r7, #0]
}
 8004624:	bf00      	nop
 8004626:	e7fe      	b.n	8004626 <vPortEnterCritical+0x4a>
	}
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000510 	.word	0x20000510
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004642:	4b11      	ldr	r3, [pc, #68]	; (8004688 <vPortExitCritical+0x4c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <vPortExitCritical+0x24>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	607b      	str	r3, [r7, #4]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <vPortExitCritical+0x4c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3b01      	subs	r3, #1
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <vPortExitCritical+0x4c>)
 8004668:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <vPortExitCritical+0x4c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <vPortExitCritical+0x42>
 8004672:	2300      	movs	r3, #0
 8004674:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800467c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	20000510 	.word	0x20000510
 800468c:	00000000 	.word	0x00000000

08004690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004690:	f3ef 8009 	mrs	r0, PSP
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <pxCurrentTCBConst>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046a0:	6010      	str	r0, [r2, #0]
 80046a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80046a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046aa:	f380 8811 	msr	BASEPRI, r0
 80046ae:	f7ff fcfb 	bl	80040a8 <vTaskSwitchContext>
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8811 	msr	BASEPRI, r0
 80046ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	6808      	ldr	r0, [r1, #0]
 80046c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046c6:	f380 8809 	msr	PSP, r0
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	4770      	bx	lr

080046d0 <pxCurrentTCBConst>:
 80046d0:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop

080046d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	607b      	str	r3, [r7, #4]
}
 80046f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046f2:	f7ff fc1b 	bl	8003f2c <xTaskIncrementTick>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <SysTick_Handler+0x40>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	f383 8811 	msr	BASEPRI, r3
}
 800470e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <vPortSetupTimerInterrupt+0x30>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <vPortSetupTimerInterrupt+0x34>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <vPortSetupTimerInterrupt+0x38>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a09      	ldr	r2, [pc, #36]	; (8004758 <vPortSetupTimerInterrupt+0x3c>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	099b      	lsrs	r3, r3, #6
 8004738:	4a08      	ldr	r2, [pc, #32]	; (800475c <vPortSetupTimerInterrupt+0x40>)
 800473a:	3b01      	subs	r3, #1
 800473c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800473e:	4b03      	ldr	r3, [pc, #12]	; (800474c <vPortSetupTimerInterrupt+0x30>)
 8004740:	2207      	movs	r2, #7
 8004742:	601a      	str	r2, [r3, #0]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr
 800474c:	e000e010 	.word	0xe000e010
 8004750:	e000e018 	.word	0xe000e018
 8004754:	20000500 	.word	0x20000500
 8004758:	10624dd3 	.word	0x10624dd3
 800475c:	e000e014 	.word	0xe000e014

08004760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800476c:	f7ff fb34 	bl	8003dd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004770:	4b58      	ldr	r3, [pc, #352]	; (80048d4 <pvPortMalloc+0x174>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004778:	f000 f910 	bl	800499c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800477c:	4b56      	ldr	r3, [pc, #344]	; (80048d8 <pvPortMalloc+0x178>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 808e 	bne.w	80048a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01d      	beq.n	80047cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004790:	2208      	movs	r2, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d014      	beq.n	80047cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	3308      	adds	r3, #8
 80047aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <pvPortMalloc+0x6c>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	617b      	str	r3, [r7, #20]
}
 80047c8:	bf00      	nop
 80047ca:	e7fe      	b.n	80047ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d069      	beq.n	80048a6 <pvPortMalloc+0x146>
 80047d2:	4b42      	ldr	r3, [pc, #264]	; (80048dc <pvPortMalloc+0x17c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d864      	bhi.n	80048a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047dc:	4b40      	ldr	r3, [pc, #256]	; (80048e0 <pvPortMalloc+0x180>)
 80047de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047e0:	4b3f      	ldr	r3, [pc, #252]	; (80048e0 <pvPortMalloc+0x180>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047e6:	e004      	b.n	80047f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d903      	bls.n	8004804 <pvPortMalloc+0xa4>
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f1      	bne.n	80047e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <pvPortMalloc+0x174>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	429a      	cmp	r2, r3
 800480c:	d04b      	beq.n	80048a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2208      	movs	r2, #8
 8004814:	4413      	add	r3, r2
 8004816:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	1ad2      	subs	r2, r2, r3
 8004828:	2308      	movs	r3, #8
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	429a      	cmp	r2, r3
 800482e:	d91f      	bls.n	8004870 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <pvPortMalloc+0xf8>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	613b      	str	r3, [r7, #16]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800486a:	69b8      	ldr	r0, [r7, #24]
 800486c:	f000 f8f8 	bl	8004a60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <pvPortMalloc+0x17c>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <pvPortMalloc+0x17c>)
 800487c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800487e:	4b17      	ldr	r3, [pc, #92]	; (80048dc <pvPortMalloc+0x17c>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <pvPortMalloc+0x184>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d203      	bcs.n	8004892 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800488a:	4b14      	ldr	r3, [pc, #80]	; (80048dc <pvPortMalloc+0x17c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <pvPortMalloc+0x184>)
 8004890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <pvPortMalloc+0x178>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	431a      	orrs	r2, r3
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048a6:	f7ff faa5 	bl	8003df4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <pvPortMalloc+0x16a>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	60fb      	str	r3, [r7, #12]
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <pvPortMalloc+0x168>
	return pvReturn;
 80048ca:	69fb      	ldr	r3, [r7, #28]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3728      	adds	r7, #40	; 0x28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20001594 	.word	0x20001594
 80048d8:	200015a0 	.word	0x200015a0
 80048dc:	20001598 	.word	0x20001598
 80048e0:	2000158c 	.word	0x2000158c
 80048e4:	2000159c 	.word	0x2000159c

080048e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d048      	beq.n	800498c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048fa:	2308      	movs	r3, #8
 80048fc:	425b      	negs	r3, r3
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4413      	add	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <vPortFree+0xac>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <vPortFree+0x44>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	60fb      	str	r3, [r7, #12]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <vPortFree+0x62>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	60bb      	str	r3, [r7, #8]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4b11      	ldr	r3, [pc, #68]	; (8004994 <vPortFree+0xac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d019      	beq.n	800498c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d115      	bne.n	800498c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <vPortFree+0xac>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	43db      	mvns	r3, r3
 800496a:	401a      	ands	r2, r3
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004970:	f7ff fa32 	bl	8003dd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <vPortFree+0xb0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4413      	add	r3, r2
 800497e:	4a06      	ldr	r2, [pc, #24]	; (8004998 <vPortFree+0xb0>)
 8004980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004982:	6938      	ldr	r0, [r7, #16]
 8004984:	f000 f86c 	bl	8004a60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004988:	f7ff fa34 	bl	8003df4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800498c:	bf00      	nop
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	200015a0 	.word	0x200015a0
 8004998:	20001598 	.word	0x20001598

0800499c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80049a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049a8:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <prvHeapInit+0xac>)
 80049aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00c      	beq.n	80049d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3307      	adds	r3, #7
 80049ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0307 	bic.w	r3, r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	4a1f      	ldr	r2, [pc, #124]	; (8004a48 <prvHeapInit+0xac>)
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049d4:	4a1d      	ldr	r2, [pc, #116]	; (8004a4c <prvHeapInit+0xb0>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049da:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <prvHeapInit+0xb0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4413      	add	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049e8:	2208      	movs	r2, #8
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a15      	ldr	r2, [pc, #84]	; (8004a50 <prvHeapInit+0xb4>)
 80049fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049fe:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <prvHeapInit+0xb4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <prvHeapInit+0xb4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	1ad2      	subs	r2, r2, r3
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <prvHeapInit+0xb4>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <prvHeapInit+0xb8>)
 8004a2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <prvHeapInit+0xbc>)
 8004a32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <prvHeapInit+0xc0>)
 8004a36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a3a:	601a      	str	r2, [r3, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	2000098c 	.word	0x2000098c
 8004a4c:	2000158c 	.word	0x2000158c
 8004a50:	20001594 	.word	0x20001594
 8004a54:	2000159c 	.word	0x2000159c
 8004a58:	20001598 	.word	0x20001598
 8004a5c:	200015a0 	.word	0x200015a0

08004a60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a68:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <prvInsertBlockIntoFreeList+0xa8>)
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e002      	b.n	8004a74 <prvInsertBlockIntoFreeList+0x14>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d8f7      	bhi.n	8004a6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4413      	add	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d108      	bne.n	8004aa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	441a      	add	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d118      	bne.n	8004ae8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <prvInsertBlockIntoFreeList+0xac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d00d      	beq.n	8004ade <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e008      	b.n	8004af0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <prvInsertBlockIntoFreeList+0xac>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e003      	b.n	8004af0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d002      	beq.n	8004afe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	2000158c 	.word	0x2000158c
 8004b0c:	20001594 	.word	0x20001594

08004b10 <__errno>:
 8004b10:	4b01      	ldr	r3, [pc, #4]	; (8004b18 <__errno+0x8>)
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000514 	.word	0x20000514

08004b1c <std>:
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	e9c0 3300 	strd	r3, r3, [r0]
 8004b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b2a:	6083      	str	r3, [r0, #8]
 8004b2c:	8181      	strh	r1, [r0, #12]
 8004b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b30:	81c2      	strh	r2, [r0, #14]
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	4619      	mov	r1, r3
 8004b36:	2208      	movs	r2, #8
 8004b38:	305c      	adds	r0, #92	; 0x5c
 8004b3a:	f000 f90c 	bl	8004d56 <memset>
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <std+0x38>)
 8004b40:	6224      	str	r4, [r4, #32]
 8004b42:	6263      	str	r3, [r4, #36]	; 0x24
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <std+0x3c>)
 8004b46:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <std+0x40>)
 8004b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <std+0x44>)
 8004b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	bf00      	nop
 8004b54:	08004fed 	.word	0x08004fed
 8004b58:	0800500f 	.word	0x0800500f
 8004b5c:	08005047 	.word	0x08005047
 8004b60:	0800506b 	.word	0x0800506b

08004b64 <_cleanup_r>:
 8004b64:	4901      	ldr	r1, [pc, #4]	; (8004b6c <_cleanup_r+0x8>)
 8004b66:	f000 b8af 	b.w	8004cc8 <_fwalk_reent>
 8004b6a:	bf00      	nop
 8004b6c:	08005201 	.word	0x08005201

08004b70 <__sfmoreglue>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	2568      	movs	r5, #104	; 0x68
 8004b74:	1e4a      	subs	r2, r1, #1
 8004b76:	4355      	muls	r5, r2
 8004b78:	460e      	mov	r6, r1
 8004b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b7e:	f000 f8f3 	bl	8004d68 <_malloc_r>
 8004b82:	4604      	mov	r4, r0
 8004b84:	b140      	cbz	r0, 8004b98 <__sfmoreglue+0x28>
 8004b86:	2100      	movs	r1, #0
 8004b88:	e9c0 1600 	strd	r1, r6, [r0]
 8004b8c:	300c      	adds	r0, #12
 8004b8e:	60a0      	str	r0, [r4, #8]
 8004b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b94:	f000 f8df 	bl	8004d56 <memset>
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}

08004b9c <__sfp_lock_acquire>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <__sfp_lock_acquire+0x8>)
 8004b9e:	f000 b8d8 	b.w	8004d52 <__retarget_lock_acquire_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	2000227c 	.word	0x2000227c

08004ba8 <__sfp_lock_release>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	; (8004bb0 <__sfp_lock_release+0x8>)
 8004baa:	f000 b8d3 	b.w	8004d54 <__retarget_lock_release_recursive>
 8004bae:	bf00      	nop
 8004bb0:	2000227c 	.word	0x2000227c

08004bb4 <__sinit_lock_acquire>:
 8004bb4:	4801      	ldr	r0, [pc, #4]	; (8004bbc <__sinit_lock_acquire+0x8>)
 8004bb6:	f000 b8cc 	b.w	8004d52 <__retarget_lock_acquire_recursive>
 8004bba:	bf00      	nop
 8004bbc:	20002277 	.word	0x20002277

08004bc0 <__sinit_lock_release>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	; (8004bc8 <__sinit_lock_release+0x8>)
 8004bc2:	f000 b8c7 	b.w	8004d54 <__retarget_lock_release_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	20002277 	.word	0x20002277

08004bcc <__sinit>:
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4604      	mov	r4, r0
 8004bd0:	f7ff fff0 	bl	8004bb4 <__sinit_lock_acquire>
 8004bd4:	69a3      	ldr	r3, [r4, #24]
 8004bd6:	b11b      	cbz	r3, 8004be0 <__sinit+0x14>
 8004bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bdc:	f7ff bff0 	b.w	8004bc0 <__sinit_lock_release>
 8004be0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be4:	6523      	str	r3, [r4, #80]	; 0x50
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <__sinit+0x68>)
 8004be8:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <__sinit+0x6c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	bf08      	it	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	bf08      	it	eq
 8004bf8:	61a3      	streq	r3, [r4, #24]
 8004bfa:	f000 f81f 	bl	8004c3c <__sfp>
 8004bfe:	6060      	str	r0, [r4, #4]
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 f81b 	bl	8004c3c <__sfp>
 8004c06:	60a0      	str	r0, [r4, #8]
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 f817 	bl	8004c3c <__sfp>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2104      	movs	r1, #4
 8004c12:	60e0      	str	r0, [r4, #12]
 8004c14:	6860      	ldr	r0, [r4, #4]
 8004c16:	f7ff ff81 	bl	8004b1c <std>
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	2109      	movs	r1, #9
 8004c1e:	68a0      	ldr	r0, [r4, #8]
 8004c20:	f7ff ff7c 	bl	8004b1c <std>
 8004c24:	2202      	movs	r2, #2
 8004c26:	2112      	movs	r1, #18
 8004c28:	68e0      	ldr	r0, [r4, #12]
 8004c2a:	f7ff ff77 	bl	8004b1c <std>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	61a3      	str	r3, [r4, #24]
 8004c32:	e7d1      	b.n	8004bd8 <__sinit+0xc>
 8004c34:	08005de0 	.word	0x08005de0
 8004c38:	08004b65 	.word	0x08004b65

08004c3c <__sfp>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	4607      	mov	r7, r0
 8004c40:	f7ff ffac 	bl	8004b9c <__sfp_lock_acquire>
 8004c44:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <__sfp+0x84>)
 8004c46:	681e      	ldr	r6, [r3, #0]
 8004c48:	69b3      	ldr	r3, [r6, #24]
 8004c4a:	b913      	cbnz	r3, 8004c52 <__sfp+0x16>
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f7ff ffbd 	bl	8004bcc <__sinit>
 8004c52:	3648      	adds	r6, #72	; 0x48
 8004c54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	d503      	bpl.n	8004c64 <__sfp+0x28>
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	b30b      	cbz	r3, 8004ca4 <__sfp+0x68>
 8004c60:	6836      	ldr	r6, [r6, #0]
 8004c62:	e7f7      	b.n	8004c54 <__sfp+0x18>
 8004c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c68:	b9d5      	cbnz	r5, 8004ca0 <__sfp+0x64>
 8004c6a:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <__sfp+0x88>)
 8004c6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c70:	60e3      	str	r3, [r4, #12]
 8004c72:	6665      	str	r5, [r4, #100]	; 0x64
 8004c74:	f000 f86c 	bl	8004d50 <__retarget_lock_init_recursive>
 8004c78:	f7ff ff96 	bl	8004ba8 <__sfp_lock_release>
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	4629      	mov	r1, r5
 8004c80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c88:	6025      	str	r5, [r4, #0]
 8004c8a:	61a5      	str	r5, [r4, #24]
 8004c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c90:	f000 f861 	bl	8004d56 <memset>
 8004c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca0:	3468      	adds	r4, #104	; 0x68
 8004ca2:	e7d9      	b.n	8004c58 <__sfp+0x1c>
 8004ca4:	2104      	movs	r1, #4
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f7ff ff62 	bl	8004b70 <__sfmoreglue>
 8004cac:	4604      	mov	r4, r0
 8004cae:	6030      	str	r0, [r6, #0]
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d1d5      	bne.n	8004c60 <__sfp+0x24>
 8004cb4:	f7ff ff78 	bl	8004ba8 <__sfp_lock_release>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	e7ee      	b.n	8004c9c <__sfp+0x60>
 8004cbe:	bf00      	nop
 8004cc0:	08005de0 	.word	0x08005de0
 8004cc4:	ffff0001 	.word	0xffff0001

08004cc8 <_fwalk_reent>:
 8004cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ccc:	4606      	mov	r6, r0
 8004cce:	4688      	mov	r8, r1
 8004cd0:	2700      	movs	r7, #0
 8004cd2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cda:	f1b9 0901 	subs.w	r9, r9, #1
 8004cde:	d505      	bpl.n	8004cec <_fwalk_reent+0x24>
 8004ce0:	6824      	ldr	r4, [r4, #0]
 8004ce2:	2c00      	cmp	r4, #0
 8004ce4:	d1f7      	bne.n	8004cd6 <_fwalk_reent+0xe>
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cec:	89ab      	ldrh	r3, [r5, #12]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d907      	bls.n	8004d02 <_fwalk_reent+0x3a>
 8004cf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	d003      	beq.n	8004d02 <_fwalk_reent+0x3a>
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	47c0      	blx	r8
 8004d00:	4307      	orrs	r7, r0
 8004d02:	3568      	adds	r5, #104	; 0x68
 8004d04:	e7e9      	b.n	8004cda <_fwalk_reent+0x12>
	...

08004d08 <__libc_init_array>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	4d0c      	ldr	r5, [pc, #48]	; (8004d40 <__libc_init_array+0x38>)
 8004d0e:	4c0d      	ldr	r4, [pc, #52]	; (8004d44 <__libc_init_array+0x3c>)
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	42a6      	cmp	r6, r4
 8004d16:	d109      	bne.n	8004d2c <__libc_init_array+0x24>
 8004d18:	f000 ffd2 	bl	8005cc0 <_init>
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	4d0a      	ldr	r5, [pc, #40]	; (8004d48 <__libc_init_array+0x40>)
 8004d20:	4c0a      	ldr	r4, [pc, #40]	; (8004d4c <__libc_init_array+0x44>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	42a6      	cmp	r6, r4
 8004d28:	d105      	bne.n	8004d36 <__libc_init_array+0x2e>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d30:	4798      	blx	r3
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7ee      	b.n	8004d14 <__libc_init_array+0xc>
 8004d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3a:	4798      	blx	r3
 8004d3c:	3601      	adds	r6, #1
 8004d3e:	e7f2      	b.n	8004d26 <__libc_init_array+0x1e>
 8004d40:	08005ecc 	.word	0x08005ecc
 8004d44:	08005ecc 	.word	0x08005ecc
 8004d48:	08005ecc 	.word	0x08005ecc
 8004d4c:	08005ed0 	.word	0x08005ed0

08004d50 <__retarget_lock_init_recursive>:
 8004d50:	4770      	bx	lr

08004d52 <__retarget_lock_acquire_recursive>:
 8004d52:	4770      	bx	lr

08004d54 <__retarget_lock_release_recursive>:
 8004d54:	4770      	bx	lr

08004d56 <memset>:
 8004d56:	4603      	mov	r3, r0
 8004d58:	4402      	add	r2, r0
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d100      	bne.n	8004d60 <memset+0xa>
 8004d5e:	4770      	bx	lr
 8004d60:	f803 1b01 	strb.w	r1, [r3], #1
 8004d64:	e7f9      	b.n	8004d5a <memset+0x4>
	...

08004d68 <_malloc_r>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	1ccd      	adds	r5, r1, #3
 8004d6c:	f025 0503 	bic.w	r5, r5, #3
 8004d70:	3508      	adds	r5, #8
 8004d72:	2d0c      	cmp	r5, #12
 8004d74:	bf38      	it	cc
 8004d76:	250c      	movcc	r5, #12
 8004d78:	2d00      	cmp	r5, #0
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	db01      	blt.n	8004d82 <_malloc_r+0x1a>
 8004d7e:	42a9      	cmp	r1, r5
 8004d80:	d903      	bls.n	8004d8a <_malloc_r+0x22>
 8004d82:	230c      	movs	r3, #12
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	2000      	movs	r0, #0
 8004d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8a:	f000 faa1 	bl	80052d0 <__malloc_lock>
 8004d8e:	4921      	ldr	r1, [pc, #132]	; (8004e14 <_malloc_r+0xac>)
 8004d90:	680a      	ldr	r2, [r1, #0]
 8004d92:	4614      	mov	r4, r2
 8004d94:	b99c      	cbnz	r4, 8004dbe <_malloc_r+0x56>
 8004d96:	4f20      	ldr	r7, [pc, #128]	; (8004e18 <_malloc_r+0xb0>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	b923      	cbnz	r3, 8004da6 <_malloc_r+0x3e>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f000 f914 	bl	8004fcc <_sbrk_r>
 8004da4:	6038      	str	r0, [r7, #0]
 8004da6:	4629      	mov	r1, r5
 8004da8:	4630      	mov	r0, r6
 8004daa:	f000 f90f 	bl	8004fcc <_sbrk_r>
 8004dae:	1c43      	adds	r3, r0, #1
 8004db0:	d123      	bne.n	8004dfa <_malloc_r+0x92>
 8004db2:	230c      	movs	r3, #12
 8004db4:	4630      	mov	r0, r6
 8004db6:	6033      	str	r3, [r6, #0]
 8004db8:	f000 fa90 	bl	80052dc <__malloc_unlock>
 8004dbc:	e7e3      	b.n	8004d86 <_malloc_r+0x1e>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	1b5b      	subs	r3, r3, r5
 8004dc2:	d417      	bmi.n	8004df4 <_malloc_r+0x8c>
 8004dc4:	2b0b      	cmp	r3, #11
 8004dc6:	d903      	bls.n	8004dd0 <_malloc_r+0x68>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	441c      	add	r4, r3
 8004dcc:	6025      	str	r5, [r4, #0]
 8004dce:	e004      	b.n	8004dda <_malloc_r+0x72>
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	42a2      	cmp	r2, r4
 8004dd4:	bf0c      	ite	eq
 8004dd6:	600b      	streq	r3, [r1, #0]
 8004dd8:	6053      	strne	r3, [r2, #4]
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f000 fa7e 	bl	80052dc <__malloc_unlock>
 8004de0:	f104 000b 	add.w	r0, r4, #11
 8004de4:	1d23      	adds	r3, r4, #4
 8004de6:	f020 0007 	bic.w	r0, r0, #7
 8004dea:	1ac2      	subs	r2, r0, r3
 8004dec:	d0cc      	beq.n	8004d88 <_malloc_r+0x20>
 8004dee:	1a1b      	subs	r3, r3, r0
 8004df0:	50a3      	str	r3, [r4, r2]
 8004df2:	e7c9      	b.n	8004d88 <_malloc_r+0x20>
 8004df4:	4622      	mov	r2, r4
 8004df6:	6864      	ldr	r4, [r4, #4]
 8004df8:	e7cc      	b.n	8004d94 <_malloc_r+0x2c>
 8004dfa:	1cc4      	adds	r4, r0, #3
 8004dfc:	f024 0403 	bic.w	r4, r4, #3
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d0e3      	beq.n	8004dcc <_malloc_r+0x64>
 8004e04:	1a21      	subs	r1, r4, r0
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f8e0 	bl	8004fcc <_sbrk_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d1dd      	bne.n	8004dcc <_malloc_r+0x64>
 8004e10:	e7cf      	b.n	8004db2 <_malloc_r+0x4a>
 8004e12:	bf00      	nop
 8004e14:	200015a4 	.word	0x200015a4
 8004e18:	200015a8 	.word	0x200015a8

08004e1c <srand>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <srand+0x44>)
 8004e20:	4604      	mov	r4, r0
 8004e22:	681d      	ldr	r5, [r3, #0]
 8004e24:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004e26:	b9b3      	cbnz	r3, 8004e56 <srand+0x3a>
 8004e28:	2018      	movs	r0, #24
 8004e2a:	f000 fa49 	bl	80052c0 <malloc>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	63a8      	str	r0, [r5, #56]	; 0x38
 8004e32:	b920      	cbnz	r0, 8004e3e <srand+0x22>
 8004e34:	2142      	movs	r1, #66	; 0x42
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <srand+0x48>)
 8004e38:	480b      	ldr	r0, [pc, #44]	; (8004e68 <srand+0x4c>)
 8004e3a:	f000 f92d 	bl	8005098 <__assert_func>
 8004e3e:	490b      	ldr	r1, [pc, #44]	; (8004e6c <srand+0x50>)
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <srand+0x54>)
 8004e42:	e9c0 1300 	strd	r1, r3, [r0]
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <srand+0x58>)
 8004e48:	2100      	movs	r1, #0
 8004e4a:	6083      	str	r3, [r0, #8]
 8004e4c:	230b      	movs	r3, #11
 8004e4e:	8183      	strh	r3, [r0, #12]
 8004e50:	2001      	movs	r0, #1
 8004e52:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004e56:	2200      	movs	r2, #0
 8004e58:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004e5a:	611c      	str	r4, [r3, #16]
 8004e5c:	615a      	str	r2, [r3, #20]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000514 	.word	0x20000514
 8004e64:	08005de4 	.word	0x08005de4
 8004e68:	08005dfb 	.word	0x08005dfb
 8004e6c:	abcd330e 	.word	0xabcd330e
 8004e70:	e66d1234 	.word	0xe66d1234
 8004e74:	0005deec 	.word	0x0005deec

08004e78 <rand>:
 8004e78:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <rand+0x60>)
 8004e7a:	b510      	push	{r4, lr}
 8004e7c:	681c      	ldr	r4, [r3, #0]
 8004e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e80:	b9b3      	cbnz	r3, 8004eb0 <rand+0x38>
 8004e82:	2018      	movs	r0, #24
 8004e84:	f000 fa1c 	bl	80052c0 <malloc>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	63a0      	str	r0, [r4, #56]	; 0x38
 8004e8c:	b920      	cbnz	r0, 8004e98 <rand+0x20>
 8004e8e:	214e      	movs	r1, #78	; 0x4e
 8004e90:	4b12      	ldr	r3, [pc, #72]	; (8004edc <rand+0x64>)
 8004e92:	4813      	ldr	r0, [pc, #76]	; (8004ee0 <rand+0x68>)
 8004e94:	f000 f900 	bl	8005098 <__assert_func>
 8004e98:	4912      	ldr	r1, [pc, #72]	; (8004ee4 <rand+0x6c>)
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <rand+0x70>)
 8004e9c:	e9c0 1300 	strd	r1, r3, [r0]
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <rand+0x74>)
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6083      	str	r3, [r0, #8]
 8004ea6:	230b      	movs	r3, #11
 8004ea8:	8183      	strh	r3, [r0, #12]
 8004eaa:	2001      	movs	r0, #1
 8004eac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004eb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004eb2:	480f      	ldr	r0, [pc, #60]	; (8004ef0 <rand+0x78>)
 8004eb4:	690a      	ldr	r2, [r1, #16]
 8004eb6:	694b      	ldr	r3, [r1, #20]
 8004eb8:	4350      	muls	r0, r2
 8004eba:	4c0e      	ldr	r4, [pc, #56]	; (8004ef4 <rand+0x7c>)
 8004ebc:	fb04 0003 	mla	r0, r4, r3, r0
 8004ec0:	fba2 3404 	umull	r3, r4, r2, r4
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	4404      	add	r4, r0
 8004ec8:	f144 0000 	adc.w	r0, r4, #0
 8004ecc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004ed0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000514 	.word	0x20000514
 8004edc:	08005de4 	.word	0x08005de4
 8004ee0:	08005dfb 	.word	0x08005dfb
 8004ee4:	abcd330e 	.word	0xabcd330e
 8004ee8:	e66d1234 	.word	0xe66d1234
 8004eec:	0005deec 	.word	0x0005deec
 8004ef0:	5851f42d 	.word	0x5851f42d
 8004ef4:	4c957f2d 	.word	0x4c957f2d

08004ef8 <cleanup_glue>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	460c      	mov	r4, r1
 8004efc:	6809      	ldr	r1, [r1, #0]
 8004efe:	4605      	mov	r5, r0
 8004f00:	b109      	cbz	r1, 8004f06 <cleanup_glue+0xe>
 8004f02:	f7ff fff9 	bl	8004ef8 <cleanup_glue>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f0e:	f000 b9eb 	b.w	80052e8 <_free_r>
	...

08004f14 <_reclaim_reent>:
 8004f14:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <_reclaim_reent+0xb4>)
 8004f16:	b570      	push	{r4, r5, r6, lr}
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4283      	cmp	r3, r0
 8004f1e:	d051      	beq.n	8004fc4 <_reclaim_reent+0xb0>
 8004f20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f22:	b143      	cbz	r3, 8004f36 <_reclaim_reent+0x22>
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d14a      	bne.n	8004fc0 <_reclaim_reent+0xac>
 8004f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	b111      	cbz	r1, 8004f36 <_reclaim_reent+0x22>
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 f9d9 	bl	80052e8 <_free_r>
 8004f36:	6961      	ldr	r1, [r4, #20]
 8004f38:	b111      	cbz	r1, 8004f40 <_reclaim_reent+0x2c>
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f000 f9d4 	bl	80052e8 <_free_r>
 8004f40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f42:	b111      	cbz	r1, 8004f4a <_reclaim_reent+0x36>
 8004f44:	4620      	mov	r0, r4
 8004f46:	f000 f9cf 	bl	80052e8 <_free_r>
 8004f4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f4c:	b111      	cbz	r1, 8004f54 <_reclaim_reent+0x40>
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 f9ca 	bl	80052e8 <_free_r>
 8004f54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004f56:	b111      	cbz	r1, 8004f5e <_reclaim_reent+0x4a>
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f000 f9c5 	bl	80052e8 <_free_r>
 8004f5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004f60:	b111      	cbz	r1, 8004f68 <_reclaim_reent+0x54>
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 f9c0 	bl	80052e8 <_free_r>
 8004f68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f6a:	b111      	cbz	r1, 8004f72 <_reclaim_reent+0x5e>
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f000 f9bb 	bl	80052e8 <_free_r>
 8004f72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004f74:	b111      	cbz	r1, 8004f7c <_reclaim_reent+0x68>
 8004f76:	4620      	mov	r0, r4
 8004f78:	f000 f9b6 	bl	80052e8 <_free_r>
 8004f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7e:	b111      	cbz	r1, 8004f86 <_reclaim_reent+0x72>
 8004f80:	4620      	mov	r0, r4
 8004f82:	f000 f9b1 	bl	80052e8 <_free_r>
 8004f86:	69a3      	ldr	r3, [r4, #24]
 8004f88:	b1e3      	cbz	r3, 8004fc4 <_reclaim_reent+0xb0>
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f8e:	4798      	blx	r3
 8004f90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f92:	b1b9      	cbz	r1, 8004fc4 <_reclaim_reent+0xb0>
 8004f94:	4620      	mov	r0, r4
 8004f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f9a:	f7ff bfad 	b.w	8004ef8 <cleanup_glue>
 8004f9e:	5949      	ldr	r1, [r1, r5]
 8004fa0:	b941      	cbnz	r1, 8004fb4 <_reclaim_reent+0xa0>
 8004fa2:	3504      	adds	r5, #4
 8004fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa6:	2d80      	cmp	r5, #128	; 0x80
 8004fa8:	68d9      	ldr	r1, [r3, #12]
 8004faa:	d1f8      	bne.n	8004f9e <_reclaim_reent+0x8a>
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 f99b 	bl	80052e8 <_free_r>
 8004fb2:	e7ba      	b.n	8004f2a <_reclaim_reent+0x16>
 8004fb4:	680e      	ldr	r6, [r1, #0]
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 f996 	bl	80052e8 <_free_r>
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	e7ef      	b.n	8004fa0 <_reclaim_reent+0x8c>
 8004fc0:	2500      	movs	r5, #0
 8004fc2:	e7ef      	b.n	8004fa4 <_reclaim_reent+0x90>
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000514 	.word	0x20000514

08004fcc <_sbrk_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4d05      	ldr	r5, [pc, #20]	; (8004fe8 <_sbrk_r+0x1c>)
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	f7fb fd3c 	bl	8000a54 <_sbrk>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	d102      	bne.n	8004fe6 <_sbrk_r+0x1a>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	b103      	cbz	r3, 8004fe6 <_sbrk_r+0x1a>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}
 8004fe8:	20002280 	.word	0x20002280

08004fec <__sread>:
 8004fec:	b510      	push	{r4, lr}
 8004fee:	460c      	mov	r4, r1
 8004ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff4:	f000 fcb2 	bl	800595c <_read_r>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	bfab      	itete	ge
 8004ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8005000:	181b      	addge	r3, r3, r0
 8005002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005006:	bfac      	ite	ge
 8005008:	6563      	strge	r3, [r4, #84]	; 0x54
 800500a:	81a3      	strhlt	r3, [r4, #12]
 800500c:	bd10      	pop	{r4, pc}

0800500e <__swrite>:
 800500e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005012:	461f      	mov	r7, r3
 8005014:	898b      	ldrh	r3, [r1, #12]
 8005016:	4605      	mov	r5, r0
 8005018:	05db      	lsls	r3, r3, #23
 800501a:	460c      	mov	r4, r1
 800501c:	4616      	mov	r6, r2
 800501e:	d505      	bpl.n	800502c <__swrite+0x1e>
 8005020:	2302      	movs	r3, #2
 8005022:	2200      	movs	r2, #0
 8005024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005028:	f000 f938 	bl	800529c <_lseek_r>
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	4632      	mov	r2, r6
 8005030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	4628      	mov	r0, r5
 8005038:	463b      	mov	r3, r7
 800503a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800503e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005042:	f000 b817 	b.w	8005074 <_write_r>

08005046 <__sseek>:
 8005046:	b510      	push	{r4, lr}
 8005048:	460c      	mov	r4, r1
 800504a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504e:	f000 f925 	bl	800529c <_lseek_r>
 8005052:	1c43      	adds	r3, r0, #1
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	bf15      	itete	ne
 8005058:	6560      	strne	r0, [r4, #84]	; 0x54
 800505a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800505e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005062:	81a3      	strheq	r3, [r4, #12]
 8005064:	bf18      	it	ne
 8005066:	81a3      	strhne	r3, [r4, #12]
 8005068:	bd10      	pop	{r4, pc}

0800506a <__sclose>:
 800506a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506e:	f000 b831 	b.w	80050d4 <_close_r>
	...

08005074 <_write_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	4611      	mov	r1, r2
 800507c:	2200      	movs	r2, #0
 800507e:	4d05      	ldr	r5, [pc, #20]	; (8005094 <_write_r+0x20>)
 8005080:	602a      	str	r2, [r5, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	f7fb fc9a 	bl	80009bc <_write>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	d102      	bne.n	8005092 <_write_r+0x1e>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	b103      	cbz	r3, 8005092 <_write_r+0x1e>
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	20002280 	.word	0x20002280

08005098 <__assert_func>:
 8005098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800509a:	4614      	mov	r4, r2
 800509c:	461a      	mov	r2, r3
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <__assert_func+0x2c>)
 80050a0:	4605      	mov	r5, r0
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68d8      	ldr	r0, [r3, #12]
 80050a6:	b14c      	cbz	r4, 80050bc <__assert_func+0x24>
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <__assert_func+0x30>)
 80050aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050ae:	9100      	str	r1, [sp, #0]
 80050b0:	462b      	mov	r3, r5
 80050b2:	4906      	ldr	r1, [pc, #24]	; (80050cc <__assert_func+0x34>)
 80050b4:	f000 f8e0 	bl	8005278 <fiprintf>
 80050b8:	f000 fd22 	bl	8005b00 <abort>
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <__assert_func+0x38>)
 80050be:	461c      	mov	r4, r3
 80050c0:	e7f3      	b.n	80050aa <__assert_func+0x12>
 80050c2:	bf00      	nop
 80050c4:	20000514 	.word	0x20000514
 80050c8:	08005e5a 	.word	0x08005e5a
 80050cc:	08005e67 	.word	0x08005e67
 80050d0:	08005e95 	.word	0x08005e95

080050d4 <_close_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	2300      	movs	r3, #0
 80050d8:	4d05      	ldr	r5, [pc, #20]	; (80050f0 <_close_r+0x1c>)
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	602b      	str	r3, [r5, #0]
 80050e0:	f7fb fc88 	bl	80009f4 <_close>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_close_r+0x1a>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_close_r+0x1a>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20002280 	.word	0x20002280

080050f4 <__sflush_r>:
 80050f4:	898a      	ldrh	r2, [r1, #12]
 80050f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fa:	4605      	mov	r5, r0
 80050fc:	0710      	lsls	r0, r2, #28
 80050fe:	460c      	mov	r4, r1
 8005100:	d458      	bmi.n	80051b4 <__sflush_r+0xc0>
 8005102:	684b      	ldr	r3, [r1, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	dc05      	bgt.n	8005114 <__sflush_r+0x20>
 8005108:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	dc02      	bgt.n	8005114 <__sflush_r+0x20>
 800510e:	2000      	movs	r0, #0
 8005110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005116:	2e00      	cmp	r6, #0
 8005118:	d0f9      	beq.n	800510e <__sflush_r+0x1a>
 800511a:	2300      	movs	r3, #0
 800511c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005120:	682f      	ldr	r7, [r5, #0]
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	d032      	beq.n	800518c <__sflush_r+0x98>
 8005126:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	075a      	lsls	r2, r3, #29
 800512c:	d505      	bpl.n	800513a <__sflush_r+0x46>
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	1ac0      	subs	r0, r0, r3
 8005132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005134:	b10b      	cbz	r3, 800513a <__sflush_r+0x46>
 8005136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005138:	1ac0      	subs	r0, r0, r3
 800513a:	2300      	movs	r3, #0
 800513c:	4602      	mov	r2, r0
 800513e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005140:	4628      	mov	r0, r5
 8005142:	6a21      	ldr	r1, [r4, #32]
 8005144:	47b0      	blx	r6
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	d106      	bne.n	800515a <__sflush_r+0x66>
 800514c:	6829      	ldr	r1, [r5, #0]
 800514e:	291d      	cmp	r1, #29
 8005150:	d82c      	bhi.n	80051ac <__sflush_r+0xb8>
 8005152:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <__sflush_r+0x108>)
 8005154:	40ca      	lsrs	r2, r1
 8005156:	07d6      	lsls	r6, r2, #31
 8005158:	d528      	bpl.n	80051ac <__sflush_r+0xb8>
 800515a:	2200      	movs	r2, #0
 800515c:	6062      	str	r2, [r4, #4]
 800515e:	6922      	ldr	r2, [r4, #16]
 8005160:	04d9      	lsls	r1, r3, #19
 8005162:	6022      	str	r2, [r4, #0]
 8005164:	d504      	bpl.n	8005170 <__sflush_r+0x7c>
 8005166:	1c42      	adds	r2, r0, #1
 8005168:	d101      	bne.n	800516e <__sflush_r+0x7a>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	b903      	cbnz	r3, 8005170 <__sflush_r+0x7c>
 800516e:	6560      	str	r0, [r4, #84]	; 0x54
 8005170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005172:	602f      	str	r7, [r5, #0]
 8005174:	2900      	cmp	r1, #0
 8005176:	d0ca      	beq.n	800510e <__sflush_r+0x1a>
 8005178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800517c:	4299      	cmp	r1, r3
 800517e:	d002      	beq.n	8005186 <__sflush_r+0x92>
 8005180:	4628      	mov	r0, r5
 8005182:	f000 f8b1 	bl	80052e8 <_free_r>
 8005186:	2000      	movs	r0, #0
 8005188:	6360      	str	r0, [r4, #52]	; 0x34
 800518a:	e7c1      	b.n	8005110 <__sflush_r+0x1c>
 800518c:	6a21      	ldr	r1, [r4, #32]
 800518e:	2301      	movs	r3, #1
 8005190:	4628      	mov	r0, r5
 8005192:	47b0      	blx	r6
 8005194:	1c41      	adds	r1, r0, #1
 8005196:	d1c7      	bne.n	8005128 <__sflush_r+0x34>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0c4      	beq.n	8005128 <__sflush_r+0x34>
 800519e:	2b1d      	cmp	r3, #29
 80051a0:	d001      	beq.n	80051a6 <__sflush_r+0xb2>
 80051a2:	2b16      	cmp	r3, #22
 80051a4:	d101      	bne.n	80051aa <__sflush_r+0xb6>
 80051a6:	602f      	str	r7, [r5, #0]
 80051a8:	e7b1      	b.n	800510e <__sflush_r+0x1a>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	e7ad      	b.n	8005110 <__sflush_r+0x1c>
 80051b4:	690f      	ldr	r7, [r1, #16]
 80051b6:	2f00      	cmp	r7, #0
 80051b8:	d0a9      	beq.n	800510e <__sflush_r+0x1a>
 80051ba:	0793      	lsls	r3, r2, #30
 80051bc:	bf18      	it	ne
 80051be:	2300      	movne	r3, #0
 80051c0:	680e      	ldr	r6, [r1, #0]
 80051c2:	bf08      	it	eq
 80051c4:	694b      	ldreq	r3, [r1, #20]
 80051c6:	eba6 0807 	sub.w	r8, r6, r7
 80051ca:	600f      	str	r7, [r1, #0]
 80051cc:	608b      	str	r3, [r1, #8]
 80051ce:	f1b8 0f00 	cmp.w	r8, #0
 80051d2:	dd9c      	ble.n	800510e <__sflush_r+0x1a>
 80051d4:	4643      	mov	r3, r8
 80051d6:	463a      	mov	r2, r7
 80051d8:	4628      	mov	r0, r5
 80051da:	6a21      	ldr	r1, [r4, #32]
 80051dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051de:	47b0      	blx	r6
 80051e0:	2800      	cmp	r0, #0
 80051e2:	dc06      	bgt.n	80051f2 <__sflush_r+0xfe>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	e78e      	b.n	8005110 <__sflush_r+0x1c>
 80051f2:	4407      	add	r7, r0
 80051f4:	eba8 0800 	sub.w	r8, r8, r0
 80051f8:	e7e9      	b.n	80051ce <__sflush_r+0xda>
 80051fa:	bf00      	nop
 80051fc:	20400001 	.word	0x20400001

08005200 <_fflush_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	690b      	ldr	r3, [r1, #16]
 8005204:	4605      	mov	r5, r0
 8005206:	460c      	mov	r4, r1
 8005208:	b913      	cbnz	r3, 8005210 <_fflush_r+0x10>
 800520a:	2500      	movs	r5, #0
 800520c:	4628      	mov	r0, r5
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	b118      	cbz	r0, 800521a <_fflush_r+0x1a>
 8005212:	6983      	ldr	r3, [r0, #24]
 8005214:	b90b      	cbnz	r3, 800521a <_fflush_r+0x1a>
 8005216:	f7ff fcd9 	bl	8004bcc <__sinit>
 800521a:	4b14      	ldr	r3, [pc, #80]	; (800526c <_fflush_r+0x6c>)
 800521c:	429c      	cmp	r4, r3
 800521e:	d11b      	bne.n	8005258 <_fflush_r+0x58>
 8005220:	686c      	ldr	r4, [r5, #4]
 8005222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ef      	beq.n	800520a <_fflush_r+0xa>
 800522a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800522c:	07d0      	lsls	r0, r2, #31
 800522e:	d404      	bmi.n	800523a <_fflush_r+0x3a>
 8005230:	0599      	lsls	r1, r3, #22
 8005232:	d402      	bmi.n	800523a <_fflush_r+0x3a>
 8005234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005236:	f7ff fd8c 	bl	8004d52 <__retarget_lock_acquire_recursive>
 800523a:	4628      	mov	r0, r5
 800523c:	4621      	mov	r1, r4
 800523e:	f7ff ff59 	bl	80050f4 <__sflush_r>
 8005242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005244:	4605      	mov	r5, r0
 8005246:	07da      	lsls	r2, r3, #31
 8005248:	d4e0      	bmi.n	800520c <_fflush_r+0xc>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	059b      	lsls	r3, r3, #22
 800524e:	d4dd      	bmi.n	800520c <_fflush_r+0xc>
 8005250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005252:	f7ff fd7f 	bl	8004d54 <__retarget_lock_release_recursive>
 8005256:	e7d9      	b.n	800520c <_fflush_r+0xc>
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <_fflush_r+0x70>)
 800525a:	429c      	cmp	r4, r3
 800525c:	d101      	bne.n	8005262 <_fflush_r+0x62>
 800525e:	68ac      	ldr	r4, [r5, #8]
 8005260:	e7df      	b.n	8005222 <_fflush_r+0x22>
 8005262:	4b04      	ldr	r3, [pc, #16]	; (8005274 <_fflush_r+0x74>)
 8005264:	429c      	cmp	r4, r3
 8005266:	bf08      	it	eq
 8005268:	68ec      	ldreq	r4, [r5, #12]
 800526a:	e7da      	b.n	8005222 <_fflush_r+0x22>
 800526c:	08005da0 	.word	0x08005da0
 8005270:	08005dc0 	.word	0x08005dc0
 8005274:	08005d80 	.word	0x08005d80

08005278 <fiprintf>:
 8005278:	b40e      	push	{r1, r2, r3}
 800527a:	b503      	push	{r0, r1, lr}
 800527c:	4601      	mov	r1, r0
 800527e:	ab03      	add	r3, sp, #12
 8005280:	4805      	ldr	r0, [pc, #20]	; (8005298 <fiprintf+0x20>)
 8005282:	f853 2b04 	ldr.w	r2, [r3], #4
 8005286:	6800      	ldr	r0, [r0, #0]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	f000 f8a1 	bl	80053d0 <_vfiprintf_r>
 800528e:	b002      	add	sp, #8
 8005290:	f85d eb04 	ldr.w	lr, [sp], #4
 8005294:	b003      	add	sp, #12
 8005296:	4770      	bx	lr
 8005298:	20000514 	.word	0x20000514

0800529c <_lseek_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	4611      	mov	r1, r2
 80052a4:	2200      	movs	r2, #0
 80052a6:	4d05      	ldr	r5, [pc, #20]	; (80052bc <_lseek_r+0x20>)
 80052a8:	602a      	str	r2, [r5, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f7fb fbc6 	bl	8000a3c <_lseek>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_lseek_r+0x1e>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_lseek_r+0x1e>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	20002280 	.word	0x20002280

080052c0 <malloc>:
 80052c0:	4b02      	ldr	r3, [pc, #8]	; (80052cc <malloc+0xc>)
 80052c2:	4601      	mov	r1, r0
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	f7ff bd4f 	b.w	8004d68 <_malloc_r>
 80052ca:	bf00      	nop
 80052cc:	20000514 	.word	0x20000514

080052d0 <__malloc_lock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__malloc_lock+0x8>)
 80052d2:	f7ff bd3e 	b.w	8004d52 <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	20002278 	.word	0x20002278

080052dc <__malloc_unlock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <__malloc_unlock+0x8>)
 80052de:	f7ff bd39 	b.w	8004d54 <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	20002278 	.word	0x20002278

080052e8 <_free_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4605      	mov	r5, r0
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d043      	beq.n	8005378 <_free_r+0x90>
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f0c      	subs	r4, r1, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfb8      	it	lt
 80052fa:	18e4      	addlt	r4, r4, r3
 80052fc:	f7ff ffe8 	bl	80052d0 <__malloc_lock>
 8005300:	4a1e      	ldr	r2, [pc, #120]	; (800537c <_free_r+0x94>)
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	4610      	mov	r0, r2
 8005306:	b933      	cbnz	r3, 8005316 <_free_r+0x2e>
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	6014      	str	r4, [r2, #0]
 800530c:	4628      	mov	r0, r5
 800530e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005312:	f7ff bfe3 	b.w	80052dc <__malloc_unlock>
 8005316:	42a3      	cmp	r3, r4
 8005318:	d90a      	bls.n	8005330 <_free_r+0x48>
 800531a:	6821      	ldr	r1, [r4, #0]
 800531c:	1862      	adds	r2, r4, r1
 800531e:	4293      	cmp	r3, r2
 8005320:	bf01      	itttt	eq
 8005322:	681a      	ldreq	r2, [r3, #0]
 8005324:	685b      	ldreq	r3, [r3, #4]
 8005326:	1852      	addeq	r2, r2, r1
 8005328:	6022      	streq	r2, [r4, #0]
 800532a:	6063      	str	r3, [r4, #4]
 800532c:	6004      	str	r4, [r0, #0]
 800532e:	e7ed      	b.n	800530c <_free_r+0x24>
 8005330:	461a      	mov	r2, r3
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	b10b      	cbz	r3, 800533a <_free_r+0x52>
 8005336:	42a3      	cmp	r3, r4
 8005338:	d9fa      	bls.n	8005330 <_free_r+0x48>
 800533a:	6811      	ldr	r1, [r2, #0]
 800533c:	1850      	adds	r0, r2, r1
 800533e:	42a0      	cmp	r0, r4
 8005340:	d10b      	bne.n	800535a <_free_r+0x72>
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	4401      	add	r1, r0
 8005346:	1850      	adds	r0, r2, r1
 8005348:	4283      	cmp	r3, r0
 800534a:	6011      	str	r1, [r2, #0]
 800534c:	d1de      	bne.n	800530c <_free_r+0x24>
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4401      	add	r1, r0
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	6053      	str	r3, [r2, #4]
 8005358:	e7d8      	b.n	800530c <_free_r+0x24>
 800535a:	d902      	bls.n	8005362 <_free_r+0x7a>
 800535c:	230c      	movs	r3, #12
 800535e:	602b      	str	r3, [r5, #0]
 8005360:	e7d4      	b.n	800530c <_free_r+0x24>
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	1821      	adds	r1, r4, r0
 8005366:	428b      	cmp	r3, r1
 8005368:	bf01      	itttt	eq
 800536a:	6819      	ldreq	r1, [r3, #0]
 800536c:	685b      	ldreq	r3, [r3, #4]
 800536e:	1809      	addeq	r1, r1, r0
 8005370:	6021      	streq	r1, [r4, #0]
 8005372:	6063      	str	r3, [r4, #4]
 8005374:	6054      	str	r4, [r2, #4]
 8005376:	e7c9      	b.n	800530c <_free_r+0x24>
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	200015a4 	.word	0x200015a4

08005380 <__sfputc_r>:
 8005380:	6893      	ldr	r3, [r2, #8]
 8005382:	b410      	push	{r4}
 8005384:	3b01      	subs	r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	6093      	str	r3, [r2, #8]
 800538a:	da07      	bge.n	800539c <__sfputc_r+0x1c>
 800538c:	6994      	ldr	r4, [r2, #24]
 800538e:	42a3      	cmp	r3, r4
 8005390:	db01      	blt.n	8005396 <__sfputc_r+0x16>
 8005392:	290a      	cmp	r1, #10
 8005394:	d102      	bne.n	800539c <__sfputc_r+0x1c>
 8005396:	bc10      	pop	{r4}
 8005398:	f000 baf2 	b.w	8005980 <__swbuf_r>
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	1c58      	adds	r0, r3, #1
 80053a0:	6010      	str	r0, [r2, #0]
 80053a2:	7019      	strb	r1, [r3, #0]
 80053a4:	4608      	mov	r0, r1
 80053a6:	bc10      	pop	{r4}
 80053a8:	4770      	bx	lr

080053aa <__sfputs_r>:
 80053aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ac:	4606      	mov	r6, r0
 80053ae:	460f      	mov	r7, r1
 80053b0:	4614      	mov	r4, r2
 80053b2:	18d5      	adds	r5, r2, r3
 80053b4:	42ac      	cmp	r4, r5
 80053b6:	d101      	bne.n	80053bc <__sfputs_r+0x12>
 80053b8:	2000      	movs	r0, #0
 80053ba:	e007      	b.n	80053cc <__sfputs_r+0x22>
 80053bc:	463a      	mov	r2, r7
 80053be:	4630      	mov	r0, r6
 80053c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053c4:	f7ff ffdc 	bl	8005380 <__sfputc_r>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d1f3      	bne.n	80053b4 <__sfputs_r+0xa>
 80053cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053d0 <_vfiprintf_r>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	460d      	mov	r5, r1
 80053d6:	4614      	mov	r4, r2
 80053d8:	4698      	mov	r8, r3
 80053da:	4606      	mov	r6, r0
 80053dc:	b09d      	sub	sp, #116	; 0x74
 80053de:	b118      	cbz	r0, 80053e8 <_vfiprintf_r+0x18>
 80053e0:	6983      	ldr	r3, [r0, #24]
 80053e2:	b90b      	cbnz	r3, 80053e8 <_vfiprintf_r+0x18>
 80053e4:	f7ff fbf2 	bl	8004bcc <__sinit>
 80053e8:	4b89      	ldr	r3, [pc, #548]	; (8005610 <_vfiprintf_r+0x240>)
 80053ea:	429d      	cmp	r5, r3
 80053ec:	d11b      	bne.n	8005426 <_vfiprintf_r+0x56>
 80053ee:	6875      	ldr	r5, [r6, #4]
 80053f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053f2:	07d9      	lsls	r1, r3, #31
 80053f4:	d405      	bmi.n	8005402 <_vfiprintf_r+0x32>
 80053f6:	89ab      	ldrh	r3, [r5, #12]
 80053f8:	059a      	lsls	r2, r3, #22
 80053fa:	d402      	bmi.n	8005402 <_vfiprintf_r+0x32>
 80053fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053fe:	f7ff fca8 	bl	8004d52 <__retarget_lock_acquire_recursive>
 8005402:	89ab      	ldrh	r3, [r5, #12]
 8005404:	071b      	lsls	r3, r3, #28
 8005406:	d501      	bpl.n	800540c <_vfiprintf_r+0x3c>
 8005408:	692b      	ldr	r3, [r5, #16]
 800540a:	b9eb      	cbnz	r3, 8005448 <_vfiprintf_r+0x78>
 800540c:	4629      	mov	r1, r5
 800540e:	4630      	mov	r0, r6
 8005410:	f000 fb08 	bl	8005a24 <__swsetup_r>
 8005414:	b1c0      	cbz	r0, 8005448 <_vfiprintf_r+0x78>
 8005416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005418:	07dc      	lsls	r4, r3, #31
 800541a:	d50e      	bpl.n	800543a <_vfiprintf_r+0x6a>
 800541c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005420:	b01d      	add	sp, #116	; 0x74
 8005422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005426:	4b7b      	ldr	r3, [pc, #492]	; (8005614 <_vfiprintf_r+0x244>)
 8005428:	429d      	cmp	r5, r3
 800542a:	d101      	bne.n	8005430 <_vfiprintf_r+0x60>
 800542c:	68b5      	ldr	r5, [r6, #8]
 800542e:	e7df      	b.n	80053f0 <_vfiprintf_r+0x20>
 8005430:	4b79      	ldr	r3, [pc, #484]	; (8005618 <_vfiprintf_r+0x248>)
 8005432:	429d      	cmp	r5, r3
 8005434:	bf08      	it	eq
 8005436:	68f5      	ldreq	r5, [r6, #12]
 8005438:	e7da      	b.n	80053f0 <_vfiprintf_r+0x20>
 800543a:	89ab      	ldrh	r3, [r5, #12]
 800543c:	0598      	lsls	r0, r3, #22
 800543e:	d4ed      	bmi.n	800541c <_vfiprintf_r+0x4c>
 8005440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005442:	f7ff fc87 	bl	8004d54 <__retarget_lock_release_recursive>
 8005446:	e7e9      	b.n	800541c <_vfiprintf_r+0x4c>
 8005448:	2300      	movs	r3, #0
 800544a:	9309      	str	r3, [sp, #36]	; 0x24
 800544c:	2320      	movs	r3, #32
 800544e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005452:	2330      	movs	r3, #48	; 0x30
 8005454:	f04f 0901 	mov.w	r9, #1
 8005458:	f8cd 800c 	str.w	r8, [sp, #12]
 800545c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800561c <_vfiprintf_r+0x24c>
 8005460:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005464:	4623      	mov	r3, r4
 8005466:	469a      	mov	sl, r3
 8005468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800546c:	b10a      	cbz	r2, 8005472 <_vfiprintf_r+0xa2>
 800546e:	2a25      	cmp	r2, #37	; 0x25
 8005470:	d1f9      	bne.n	8005466 <_vfiprintf_r+0x96>
 8005472:	ebba 0b04 	subs.w	fp, sl, r4
 8005476:	d00b      	beq.n	8005490 <_vfiprintf_r+0xc0>
 8005478:	465b      	mov	r3, fp
 800547a:	4622      	mov	r2, r4
 800547c:	4629      	mov	r1, r5
 800547e:	4630      	mov	r0, r6
 8005480:	f7ff ff93 	bl	80053aa <__sfputs_r>
 8005484:	3001      	adds	r0, #1
 8005486:	f000 80aa 	beq.w	80055de <_vfiprintf_r+0x20e>
 800548a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800548c:	445a      	add	r2, fp
 800548e:	9209      	str	r2, [sp, #36]	; 0x24
 8005490:	f89a 3000 	ldrb.w	r3, [sl]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80a2 	beq.w	80055de <_vfiprintf_r+0x20e>
 800549a:	2300      	movs	r3, #0
 800549c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054a4:	f10a 0a01 	add.w	sl, sl, #1
 80054a8:	9304      	str	r3, [sp, #16]
 80054aa:	9307      	str	r3, [sp, #28]
 80054ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054b0:	931a      	str	r3, [sp, #104]	; 0x68
 80054b2:	4654      	mov	r4, sl
 80054b4:	2205      	movs	r2, #5
 80054b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ba:	4858      	ldr	r0, [pc, #352]	; (800561c <_vfiprintf_r+0x24c>)
 80054bc:	f000 fb8c 	bl	8005bd8 <memchr>
 80054c0:	9a04      	ldr	r2, [sp, #16]
 80054c2:	b9d8      	cbnz	r0, 80054fc <_vfiprintf_r+0x12c>
 80054c4:	06d1      	lsls	r1, r2, #27
 80054c6:	bf44      	itt	mi
 80054c8:	2320      	movmi	r3, #32
 80054ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ce:	0713      	lsls	r3, r2, #28
 80054d0:	bf44      	itt	mi
 80054d2:	232b      	movmi	r3, #43	; 0x2b
 80054d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054d8:	f89a 3000 	ldrb.w	r3, [sl]
 80054dc:	2b2a      	cmp	r3, #42	; 0x2a
 80054de:	d015      	beq.n	800550c <_vfiprintf_r+0x13c>
 80054e0:	4654      	mov	r4, sl
 80054e2:	2000      	movs	r0, #0
 80054e4:	f04f 0c0a 	mov.w	ip, #10
 80054e8:	9a07      	ldr	r2, [sp, #28]
 80054ea:	4621      	mov	r1, r4
 80054ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f0:	3b30      	subs	r3, #48	; 0x30
 80054f2:	2b09      	cmp	r3, #9
 80054f4:	d94e      	bls.n	8005594 <_vfiprintf_r+0x1c4>
 80054f6:	b1b0      	cbz	r0, 8005526 <_vfiprintf_r+0x156>
 80054f8:	9207      	str	r2, [sp, #28]
 80054fa:	e014      	b.n	8005526 <_vfiprintf_r+0x156>
 80054fc:	eba0 0308 	sub.w	r3, r0, r8
 8005500:	fa09 f303 	lsl.w	r3, r9, r3
 8005504:	4313      	orrs	r3, r2
 8005506:	46a2      	mov	sl, r4
 8005508:	9304      	str	r3, [sp, #16]
 800550a:	e7d2      	b.n	80054b2 <_vfiprintf_r+0xe2>
 800550c:	9b03      	ldr	r3, [sp, #12]
 800550e:	1d19      	adds	r1, r3, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	9103      	str	r1, [sp, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	bfbb      	ittet	lt
 8005518:	425b      	neglt	r3, r3
 800551a:	f042 0202 	orrlt.w	r2, r2, #2
 800551e:	9307      	strge	r3, [sp, #28]
 8005520:	9307      	strlt	r3, [sp, #28]
 8005522:	bfb8      	it	lt
 8005524:	9204      	strlt	r2, [sp, #16]
 8005526:	7823      	ldrb	r3, [r4, #0]
 8005528:	2b2e      	cmp	r3, #46	; 0x2e
 800552a:	d10c      	bne.n	8005546 <_vfiprintf_r+0x176>
 800552c:	7863      	ldrb	r3, [r4, #1]
 800552e:	2b2a      	cmp	r3, #42	; 0x2a
 8005530:	d135      	bne.n	800559e <_vfiprintf_r+0x1ce>
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	3402      	adds	r4, #2
 8005536:	1d1a      	adds	r2, r3, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	9203      	str	r2, [sp, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfb8      	it	lt
 8005540:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005544:	9305      	str	r3, [sp, #20]
 8005546:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800562c <_vfiprintf_r+0x25c>
 800554a:	2203      	movs	r2, #3
 800554c:	4650      	mov	r0, sl
 800554e:	7821      	ldrb	r1, [r4, #0]
 8005550:	f000 fb42 	bl	8005bd8 <memchr>
 8005554:	b140      	cbz	r0, 8005568 <_vfiprintf_r+0x198>
 8005556:	2340      	movs	r3, #64	; 0x40
 8005558:	eba0 000a 	sub.w	r0, r0, sl
 800555c:	fa03 f000 	lsl.w	r0, r3, r0
 8005560:	9b04      	ldr	r3, [sp, #16]
 8005562:	3401      	adds	r4, #1
 8005564:	4303      	orrs	r3, r0
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556c:	2206      	movs	r2, #6
 800556e:	482c      	ldr	r0, [pc, #176]	; (8005620 <_vfiprintf_r+0x250>)
 8005570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005574:	f000 fb30 	bl	8005bd8 <memchr>
 8005578:	2800      	cmp	r0, #0
 800557a:	d03f      	beq.n	80055fc <_vfiprintf_r+0x22c>
 800557c:	4b29      	ldr	r3, [pc, #164]	; (8005624 <_vfiprintf_r+0x254>)
 800557e:	bb1b      	cbnz	r3, 80055c8 <_vfiprintf_r+0x1f8>
 8005580:	9b03      	ldr	r3, [sp, #12]
 8005582:	3307      	adds	r3, #7
 8005584:	f023 0307 	bic.w	r3, r3, #7
 8005588:	3308      	adds	r3, #8
 800558a:	9303      	str	r3, [sp, #12]
 800558c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558e:	443b      	add	r3, r7
 8005590:	9309      	str	r3, [sp, #36]	; 0x24
 8005592:	e767      	b.n	8005464 <_vfiprintf_r+0x94>
 8005594:	460c      	mov	r4, r1
 8005596:	2001      	movs	r0, #1
 8005598:	fb0c 3202 	mla	r2, ip, r2, r3
 800559c:	e7a5      	b.n	80054ea <_vfiprintf_r+0x11a>
 800559e:	2300      	movs	r3, #0
 80055a0:	f04f 0c0a 	mov.w	ip, #10
 80055a4:	4619      	mov	r1, r3
 80055a6:	3401      	adds	r4, #1
 80055a8:	9305      	str	r3, [sp, #20]
 80055aa:	4620      	mov	r0, r4
 80055ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055b0:	3a30      	subs	r2, #48	; 0x30
 80055b2:	2a09      	cmp	r2, #9
 80055b4:	d903      	bls.n	80055be <_vfiprintf_r+0x1ee>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0c5      	beq.n	8005546 <_vfiprintf_r+0x176>
 80055ba:	9105      	str	r1, [sp, #20]
 80055bc:	e7c3      	b.n	8005546 <_vfiprintf_r+0x176>
 80055be:	4604      	mov	r4, r0
 80055c0:	2301      	movs	r3, #1
 80055c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055c6:	e7f0      	b.n	80055aa <_vfiprintf_r+0x1da>
 80055c8:	ab03      	add	r3, sp, #12
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	462a      	mov	r2, r5
 80055ce:	4630      	mov	r0, r6
 80055d0:	4b15      	ldr	r3, [pc, #84]	; (8005628 <_vfiprintf_r+0x258>)
 80055d2:	a904      	add	r1, sp, #16
 80055d4:	f3af 8000 	nop.w
 80055d8:	4607      	mov	r7, r0
 80055da:	1c78      	adds	r0, r7, #1
 80055dc:	d1d6      	bne.n	800558c <_vfiprintf_r+0x1bc>
 80055de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055e0:	07d9      	lsls	r1, r3, #31
 80055e2:	d405      	bmi.n	80055f0 <_vfiprintf_r+0x220>
 80055e4:	89ab      	ldrh	r3, [r5, #12]
 80055e6:	059a      	lsls	r2, r3, #22
 80055e8:	d402      	bmi.n	80055f0 <_vfiprintf_r+0x220>
 80055ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ec:	f7ff fbb2 	bl	8004d54 <__retarget_lock_release_recursive>
 80055f0:	89ab      	ldrh	r3, [r5, #12]
 80055f2:	065b      	lsls	r3, r3, #25
 80055f4:	f53f af12 	bmi.w	800541c <_vfiprintf_r+0x4c>
 80055f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055fa:	e711      	b.n	8005420 <_vfiprintf_r+0x50>
 80055fc:	ab03      	add	r3, sp, #12
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	462a      	mov	r2, r5
 8005602:	4630      	mov	r0, r6
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <_vfiprintf_r+0x258>)
 8005606:	a904      	add	r1, sp, #16
 8005608:	f000 f882 	bl	8005710 <_printf_i>
 800560c:	e7e4      	b.n	80055d8 <_vfiprintf_r+0x208>
 800560e:	bf00      	nop
 8005610:	08005da0 	.word	0x08005da0
 8005614:	08005dc0 	.word	0x08005dc0
 8005618:	08005d80 	.word	0x08005d80
 800561c:	08005e96 	.word	0x08005e96
 8005620:	08005ea0 	.word	0x08005ea0
 8005624:	00000000 	.word	0x00000000
 8005628:	080053ab 	.word	0x080053ab
 800562c:	08005e9c 	.word	0x08005e9c

08005630 <_printf_common>:
 8005630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	4616      	mov	r6, r2
 8005636:	4699      	mov	r9, r3
 8005638:	688a      	ldr	r2, [r1, #8]
 800563a:	690b      	ldr	r3, [r1, #16]
 800563c:	4607      	mov	r7, r0
 800563e:	4293      	cmp	r3, r2
 8005640:	bfb8      	it	lt
 8005642:	4613      	movlt	r3, r2
 8005644:	6033      	str	r3, [r6, #0]
 8005646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800564a:	460c      	mov	r4, r1
 800564c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005650:	b10a      	cbz	r2, 8005656 <_printf_common+0x26>
 8005652:	3301      	adds	r3, #1
 8005654:	6033      	str	r3, [r6, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	0699      	lsls	r1, r3, #26
 800565a:	bf42      	ittt	mi
 800565c:	6833      	ldrmi	r3, [r6, #0]
 800565e:	3302      	addmi	r3, #2
 8005660:	6033      	strmi	r3, [r6, #0]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	f015 0506 	ands.w	r5, r5, #6
 8005668:	d106      	bne.n	8005678 <_printf_common+0x48>
 800566a:	f104 0a19 	add.w	sl, r4, #25
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	6832      	ldr	r2, [r6, #0]
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	42ab      	cmp	r3, r5
 8005676:	dc28      	bgt.n	80056ca <_printf_common+0x9a>
 8005678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800567c:	1e13      	subs	r3, r2, #0
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	bf18      	it	ne
 8005682:	2301      	movne	r3, #1
 8005684:	0692      	lsls	r2, r2, #26
 8005686:	d42d      	bmi.n	80056e4 <_printf_common+0xb4>
 8005688:	4649      	mov	r1, r9
 800568a:	4638      	mov	r0, r7
 800568c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005690:	47c0      	blx	r8
 8005692:	3001      	adds	r0, #1
 8005694:	d020      	beq.n	80056d8 <_printf_common+0xa8>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	68e5      	ldr	r5, [r4, #12]
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	2b04      	cmp	r3, #4
 80056a0:	bf18      	it	ne
 80056a2:	2500      	movne	r5, #0
 80056a4:	6832      	ldr	r2, [r6, #0]
 80056a6:	f04f 0600 	mov.w	r6, #0
 80056aa:	68a3      	ldr	r3, [r4, #8]
 80056ac:	bf08      	it	eq
 80056ae:	1aad      	subeq	r5, r5, r2
 80056b0:	6922      	ldr	r2, [r4, #16]
 80056b2:	bf08      	it	eq
 80056b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b8:	4293      	cmp	r3, r2
 80056ba:	bfc4      	itt	gt
 80056bc:	1a9b      	subgt	r3, r3, r2
 80056be:	18ed      	addgt	r5, r5, r3
 80056c0:	341a      	adds	r4, #26
 80056c2:	42b5      	cmp	r5, r6
 80056c4:	d11a      	bne.n	80056fc <_printf_common+0xcc>
 80056c6:	2000      	movs	r0, #0
 80056c8:	e008      	b.n	80056dc <_printf_common+0xac>
 80056ca:	2301      	movs	r3, #1
 80056cc:	4652      	mov	r2, sl
 80056ce:	4649      	mov	r1, r9
 80056d0:	4638      	mov	r0, r7
 80056d2:	47c0      	blx	r8
 80056d4:	3001      	adds	r0, #1
 80056d6:	d103      	bne.n	80056e0 <_printf_common+0xb0>
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e0:	3501      	adds	r5, #1
 80056e2:	e7c4      	b.n	800566e <_printf_common+0x3e>
 80056e4:	2030      	movs	r0, #48	; 0x30
 80056e6:	18e1      	adds	r1, r4, r3
 80056e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056f2:	4422      	add	r2, r4
 80056f4:	3302      	adds	r3, #2
 80056f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056fa:	e7c5      	b.n	8005688 <_printf_common+0x58>
 80056fc:	2301      	movs	r3, #1
 80056fe:	4622      	mov	r2, r4
 8005700:	4649      	mov	r1, r9
 8005702:	4638      	mov	r0, r7
 8005704:	47c0      	blx	r8
 8005706:	3001      	adds	r0, #1
 8005708:	d0e6      	beq.n	80056d8 <_printf_common+0xa8>
 800570a:	3601      	adds	r6, #1
 800570c:	e7d9      	b.n	80056c2 <_printf_common+0x92>
	...

08005710 <_printf_i>:
 8005710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005714:	460c      	mov	r4, r1
 8005716:	7e27      	ldrb	r7, [r4, #24]
 8005718:	4691      	mov	r9, r2
 800571a:	2f78      	cmp	r7, #120	; 0x78
 800571c:	4680      	mov	r8, r0
 800571e:	469a      	mov	sl, r3
 8005720:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005726:	d807      	bhi.n	8005738 <_printf_i+0x28>
 8005728:	2f62      	cmp	r7, #98	; 0x62
 800572a:	d80a      	bhi.n	8005742 <_printf_i+0x32>
 800572c:	2f00      	cmp	r7, #0
 800572e:	f000 80d9 	beq.w	80058e4 <_printf_i+0x1d4>
 8005732:	2f58      	cmp	r7, #88	; 0x58
 8005734:	f000 80a4 	beq.w	8005880 <_printf_i+0x170>
 8005738:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800573c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005740:	e03a      	b.n	80057b8 <_printf_i+0xa8>
 8005742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005746:	2b15      	cmp	r3, #21
 8005748:	d8f6      	bhi.n	8005738 <_printf_i+0x28>
 800574a:	a001      	add	r0, pc, #4	; (adr r0, 8005750 <_printf_i+0x40>)
 800574c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005750:	080057a9 	.word	0x080057a9
 8005754:	080057bd 	.word	0x080057bd
 8005758:	08005739 	.word	0x08005739
 800575c:	08005739 	.word	0x08005739
 8005760:	08005739 	.word	0x08005739
 8005764:	08005739 	.word	0x08005739
 8005768:	080057bd 	.word	0x080057bd
 800576c:	08005739 	.word	0x08005739
 8005770:	08005739 	.word	0x08005739
 8005774:	08005739 	.word	0x08005739
 8005778:	08005739 	.word	0x08005739
 800577c:	080058cb 	.word	0x080058cb
 8005780:	080057ed 	.word	0x080057ed
 8005784:	080058ad 	.word	0x080058ad
 8005788:	08005739 	.word	0x08005739
 800578c:	08005739 	.word	0x08005739
 8005790:	080058ed 	.word	0x080058ed
 8005794:	08005739 	.word	0x08005739
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005739 	.word	0x08005739
 80057a0:	08005739 	.word	0x08005739
 80057a4:	080058b5 	.word	0x080058b5
 80057a8:	680b      	ldr	r3, [r1, #0]
 80057aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057ae:	1d1a      	adds	r2, r3, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	600a      	str	r2, [r1, #0]
 80057b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0a4      	b.n	8005906 <_printf_i+0x1f6>
 80057bc:	6825      	ldr	r5, [r4, #0]
 80057be:	6808      	ldr	r0, [r1, #0]
 80057c0:	062e      	lsls	r6, r5, #24
 80057c2:	f100 0304 	add.w	r3, r0, #4
 80057c6:	d50a      	bpl.n	80057de <_printf_i+0xce>
 80057c8:	6805      	ldr	r5, [r0, #0]
 80057ca:	600b      	str	r3, [r1, #0]
 80057cc:	2d00      	cmp	r5, #0
 80057ce:	da03      	bge.n	80057d8 <_printf_i+0xc8>
 80057d0:	232d      	movs	r3, #45	; 0x2d
 80057d2:	426d      	negs	r5, r5
 80057d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d8:	230a      	movs	r3, #10
 80057da:	485e      	ldr	r0, [pc, #376]	; (8005954 <_printf_i+0x244>)
 80057dc:	e019      	b.n	8005812 <_printf_i+0x102>
 80057de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057e2:	6805      	ldr	r5, [r0, #0]
 80057e4:	600b      	str	r3, [r1, #0]
 80057e6:	bf18      	it	ne
 80057e8:	b22d      	sxthne	r5, r5
 80057ea:	e7ef      	b.n	80057cc <_printf_i+0xbc>
 80057ec:	680b      	ldr	r3, [r1, #0]
 80057ee:	6825      	ldr	r5, [r4, #0]
 80057f0:	1d18      	adds	r0, r3, #4
 80057f2:	6008      	str	r0, [r1, #0]
 80057f4:	0628      	lsls	r0, r5, #24
 80057f6:	d501      	bpl.n	80057fc <_printf_i+0xec>
 80057f8:	681d      	ldr	r5, [r3, #0]
 80057fa:	e002      	b.n	8005802 <_printf_i+0xf2>
 80057fc:	0669      	lsls	r1, r5, #25
 80057fe:	d5fb      	bpl.n	80057f8 <_printf_i+0xe8>
 8005800:	881d      	ldrh	r5, [r3, #0]
 8005802:	2f6f      	cmp	r7, #111	; 0x6f
 8005804:	bf0c      	ite	eq
 8005806:	2308      	moveq	r3, #8
 8005808:	230a      	movne	r3, #10
 800580a:	4852      	ldr	r0, [pc, #328]	; (8005954 <_printf_i+0x244>)
 800580c:	2100      	movs	r1, #0
 800580e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005812:	6866      	ldr	r6, [r4, #4]
 8005814:	2e00      	cmp	r6, #0
 8005816:	bfa8      	it	ge
 8005818:	6821      	ldrge	r1, [r4, #0]
 800581a:	60a6      	str	r6, [r4, #8]
 800581c:	bfa4      	itt	ge
 800581e:	f021 0104 	bicge.w	r1, r1, #4
 8005822:	6021      	strge	r1, [r4, #0]
 8005824:	b90d      	cbnz	r5, 800582a <_printf_i+0x11a>
 8005826:	2e00      	cmp	r6, #0
 8005828:	d04d      	beq.n	80058c6 <_printf_i+0x1b6>
 800582a:	4616      	mov	r6, r2
 800582c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005830:	fb03 5711 	mls	r7, r3, r1, r5
 8005834:	5dc7      	ldrb	r7, [r0, r7]
 8005836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800583a:	462f      	mov	r7, r5
 800583c:	42bb      	cmp	r3, r7
 800583e:	460d      	mov	r5, r1
 8005840:	d9f4      	bls.n	800582c <_printf_i+0x11c>
 8005842:	2b08      	cmp	r3, #8
 8005844:	d10b      	bne.n	800585e <_printf_i+0x14e>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	07df      	lsls	r7, r3, #31
 800584a:	d508      	bpl.n	800585e <_printf_i+0x14e>
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	6861      	ldr	r1, [r4, #4]
 8005850:	4299      	cmp	r1, r3
 8005852:	bfde      	ittt	le
 8005854:	2330      	movle	r3, #48	; 0x30
 8005856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800585a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800585e:	1b92      	subs	r2, r2, r6
 8005860:	6122      	str	r2, [r4, #16]
 8005862:	464b      	mov	r3, r9
 8005864:	4621      	mov	r1, r4
 8005866:	4640      	mov	r0, r8
 8005868:	f8cd a000 	str.w	sl, [sp]
 800586c:	aa03      	add	r2, sp, #12
 800586e:	f7ff fedf 	bl	8005630 <_printf_common>
 8005872:	3001      	adds	r0, #1
 8005874:	d14c      	bne.n	8005910 <_printf_i+0x200>
 8005876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800587a:	b004      	add	sp, #16
 800587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005880:	4834      	ldr	r0, [pc, #208]	; (8005954 <_printf_i+0x244>)
 8005882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005886:	680e      	ldr	r6, [r1, #0]
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	f856 5b04 	ldr.w	r5, [r6], #4
 800588e:	061f      	lsls	r7, r3, #24
 8005890:	600e      	str	r6, [r1, #0]
 8005892:	d514      	bpl.n	80058be <_printf_i+0x1ae>
 8005894:	07d9      	lsls	r1, r3, #31
 8005896:	bf44      	itt	mi
 8005898:	f043 0320 	orrmi.w	r3, r3, #32
 800589c:	6023      	strmi	r3, [r4, #0]
 800589e:	b91d      	cbnz	r5, 80058a8 <_printf_i+0x198>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	f023 0320 	bic.w	r3, r3, #32
 80058a6:	6023      	str	r3, [r4, #0]
 80058a8:	2310      	movs	r3, #16
 80058aa:	e7af      	b.n	800580c <_printf_i+0xfc>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	f043 0320 	orr.w	r3, r3, #32
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	2378      	movs	r3, #120	; 0x78
 80058b6:	4828      	ldr	r0, [pc, #160]	; (8005958 <_printf_i+0x248>)
 80058b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058bc:	e7e3      	b.n	8005886 <_printf_i+0x176>
 80058be:	065e      	lsls	r6, r3, #25
 80058c0:	bf48      	it	mi
 80058c2:	b2ad      	uxthmi	r5, r5
 80058c4:	e7e6      	b.n	8005894 <_printf_i+0x184>
 80058c6:	4616      	mov	r6, r2
 80058c8:	e7bb      	b.n	8005842 <_printf_i+0x132>
 80058ca:	680b      	ldr	r3, [r1, #0]
 80058cc:	6826      	ldr	r6, [r4, #0]
 80058ce:	1d1d      	adds	r5, r3, #4
 80058d0:	6960      	ldr	r0, [r4, #20]
 80058d2:	600d      	str	r5, [r1, #0]
 80058d4:	0635      	lsls	r5, r6, #24
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	d501      	bpl.n	80058de <_printf_i+0x1ce>
 80058da:	6018      	str	r0, [r3, #0]
 80058dc:	e002      	b.n	80058e4 <_printf_i+0x1d4>
 80058de:	0671      	lsls	r1, r6, #25
 80058e0:	d5fb      	bpl.n	80058da <_printf_i+0x1ca>
 80058e2:	8018      	strh	r0, [r3, #0]
 80058e4:	2300      	movs	r3, #0
 80058e6:	4616      	mov	r6, r2
 80058e8:	6123      	str	r3, [r4, #16]
 80058ea:	e7ba      	b.n	8005862 <_printf_i+0x152>
 80058ec:	680b      	ldr	r3, [r1, #0]
 80058ee:	1d1a      	adds	r2, r3, #4
 80058f0:	600a      	str	r2, [r1, #0]
 80058f2:	681e      	ldr	r6, [r3, #0]
 80058f4:	2100      	movs	r1, #0
 80058f6:	4630      	mov	r0, r6
 80058f8:	6862      	ldr	r2, [r4, #4]
 80058fa:	f000 f96d 	bl	8005bd8 <memchr>
 80058fe:	b108      	cbz	r0, 8005904 <_printf_i+0x1f4>
 8005900:	1b80      	subs	r0, r0, r6
 8005902:	6060      	str	r0, [r4, #4]
 8005904:	6863      	ldr	r3, [r4, #4]
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	2300      	movs	r3, #0
 800590a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590e:	e7a8      	b.n	8005862 <_printf_i+0x152>
 8005910:	4632      	mov	r2, r6
 8005912:	4649      	mov	r1, r9
 8005914:	4640      	mov	r0, r8
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	47d0      	blx	sl
 800591a:	3001      	adds	r0, #1
 800591c:	d0ab      	beq.n	8005876 <_printf_i+0x166>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	079b      	lsls	r3, r3, #30
 8005922:	d413      	bmi.n	800594c <_printf_i+0x23c>
 8005924:	68e0      	ldr	r0, [r4, #12]
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	4298      	cmp	r0, r3
 800592a:	bfb8      	it	lt
 800592c:	4618      	movlt	r0, r3
 800592e:	e7a4      	b.n	800587a <_printf_i+0x16a>
 8005930:	2301      	movs	r3, #1
 8005932:	4632      	mov	r2, r6
 8005934:	4649      	mov	r1, r9
 8005936:	4640      	mov	r0, r8
 8005938:	47d0      	blx	sl
 800593a:	3001      	adds	r0, #1
 800593c:	d09b      	beq.n	8005876 <_printf_i+0x166>
 800593e:	3501      	adds	r5, #1
 8005940:	68e3      	ldr	r3, [r4, #12]
 8005942:	9903      	ldr	r1, [sp, #12]
 8005944:	1a5b      	subs	r3, r3, r1
 8005946:	42ab      	cmp	r3, r5
 8005948:	dcf2      	bgt.n	8005930 <_printf_i+0x220>
 800594a:	e7eb      	b.n	8005924 <_printf_i+0x214>
 800594c:	2500      	movs	r5, #0
 800594e:	f104 0619 	add.w	r6, r4, #25
 8005952:	e7f5      	b.n	8005940 <_printf_i+0x230>
 8005954:	08005ea7 	.word	0x08005ea7
 8005958:	08005eb8 	.word	0x08005eb8

0800595c <_read_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4604      	mov	r4, r0
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	2200      	movs	r2, #0
 8005966:	4d05      	ldr	r5, [pc, #20]	; (800597c <_read_r+0x20>)
 8005968:	602a      	str	r2, [r5, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f7fb f809 	bl	8000982 <_read>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_read_r+0x1e>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_read_r+0x1e>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	20002280 	.word	0x20002280

08005980 <__swbuf_r>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	460e      	mov	r6, r1
 8005984:	4614      	mov	r4, r2
 8005986:	4605      	mov	r5, r0
 8005988:	b118      	cbz	r0, 8005992 <__swbuf_r+0x12>
 800598a:	6983      	ldr	r3, [r0, #24]
 800598c:	b90b      	cbnz	r3, 8005992 <__swbuf_r+0x12>
 800598e:	f7ff f91d 	bl	8004bcc <__sinit>
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <__swbuf_r+0x98>)
 8005994:	429c      	cmp	r4, r3
 8005996:	d12b      	bne.n	80059f0 <__swbuf_r+0x70>
 8005998:	686c      	ldr	r4, [r5, #4]
 800599a:	69a3      	ldr	r3, [r4, #24]
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	071a      	lsls	r2, r3, #28
 80059a2:	d52f      	bpl.n	8005a04 <__swbuf_r+0x84>
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	b36b      	cbz	r3, 8005a04 <__swbuf_r+0x84>
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	b2f6      	uxtb	r6, r6
 80059ae:	1ac0      	subs	r0, r0, r3
 80059b0:	6963      	ldr	r3, [r4, #20]
 80059b2:	4637      	mov	r7, r6
 80059b4:	4283      	cmp	r3, r0
 80059b6:	dc04      	bgt.n	80059c2 <__swbuf_r+0x42>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f7ff fc20 	bl	8005200 <_fflush_r>
 80059c0:	bb30      	cbnz	r0, 8005a10 <__swbuf_r+0x90>
 80059c2:	68a3      	ldr	r3, [r4, #8]
 80059c4:	3001      	adds	r0, #1
 80059c6:	3b01      	subs	r3, #1
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	701e      	strb	r6, [r3, #0]
 80059d2:	6963      	ldr	r3, [r4, #20]
 80059d4:	4283      	cmp	r3, r0
 80059d6:	d004      	beq.n	80059e2 <__swbuf_r+0x62>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	07db      	lsls	r3, r3, #31
 80059dc:	d506      	bpl.n	80059ec <__swbuf_r+0x6c>
 80059de:	2e0a      	cmp	r6, #10
 80059e0:	d104      	bne.n	80059ec <__swbuf_r+0x6c>
 80059e2:	4621      	mov	r1, r4
 80059e4:	4628      	mov	r0, r5
 80059e6:	f7ff fc0b 	bl	8005200 <_fflush_r>
 80059ea:	b988      	cbnz	r0, 8005a10 <__swbuf_r+0x90>
 80059ec:	4638      	mov	r0, r7
 80059ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <__swbuf_r+0x9c>)
 80059f2:	429c      	cmp	r4, r3
 80059f4:	d101      	bne.n	80059fa <__swbuf_r+0x7a>
 80059f6:	68ac      	ldr	r4, [r5, #8]
 80059f8:	e7cf      	b.n	800599a <__swbuf_r+0x1a>
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <__swbuf_r+0xa0>)
 80059fc:	429c      	cmp	r4, r3
 80059fe:	bf08      	it	eq
 8005a00:	68ec      	ldreq	r4, [r5, #12]
 8005a02:	e7ca      	b.n	800599a <__swbuf_r+0x1a>
 8005a04:	4621      	mov	r1, r4
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 f80c 	bl	8005a24 <__swsetup_r>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d0cb      	beq.n	80059a8 <__swbuf_r+0x28>
 8005a10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005a14:	e7ea      	b.n	80059ec <__swbuf_r+0x6c>
 8005a16:	bf00      	nop
 8005a18:	08005da0 	.word	0x08005da0
 8005a1c:	08005dc0 	.word	0x08005dc0
 8005a20:	08005d80 	.word	0x08005d80

08005a24 <__swsetup_r>:
 8005a24:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <__swsetup_r+0xcc>)
 8005a26:	b570      	push	{r4, r5, r6, lr}
 8005a28:	681d      	ldr	r5, [r3, #0]
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	b125      	cbz	r5, 8005a3a <__swsetup_r+0x16>
 8005a30:	69ab      	ldr	r3, [r5, #24]
 8005a32:	b913      	cbnz	r3, 8005a3a <__swsetup_r+0x16>
 8005a34:	4628      	mov	r0, r5
 8005a36:	f7ff f8c9 	bl	8004bcc <__sinit>
 8005a3a:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <__swsetup_r+0xd0>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d10f      	bne.n	8005a60 <__swsetup_r+0x3c>
 8005a40:	686c      	ldr	r4, [r5, #4]
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a48:	0719      	lsls	r1, r3, #28
 8005a4a:	d42c      	bmi.n	8005aa6 <__swsetup_r+0x82>
 8005a4c:	06dd      	lsls	r5, r3, #27
 8005a4e:	d411      	bmi.n	8005a74 <__swsetup_r+0x50>
 8005a50:	2309      	movs	r3, #9
 8005a52:	6033      	str	r3, [r6, #0]
 8005a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	e03e      	b.n	8005ade <__swsetup_r+0xba>
 8005a60:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <__swsetup_r+0xd4>)
 8005a62:	429c      	cmp	r4, r3
 8005a64:	d101      	bne.n	8005a6a <__swsetup_r+0x46>
 8005a66:	68ac      	ldr	r4, [r5, #8]
 8005a68:	e7eb      	b.n	8005a42 <__swsetup_r+0x1e>
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <__swsetup_r+0xd8>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	bf08      	it	eq
 8005a70:	68ec      	ldreq	r4, [r5, #12]
 8005a72:	e7e6      	b.n	8005a42 <__swsetup_r+0x1e>
 8005a74:	0758      	lsls	r0, r3, #29
 8005a76:	d512      	bpl.n	8005a9e <__swsetup_r+0x7a>
 8005a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7a:	b141      	cbz	r1, 8005a8e <__swsetup_r+0x6a>
 8005a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a80:	4299      	cmp	r1, r3
 8005a82:	d002      	beq.n	8005a8a <__swsetup_r+0x66>
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff fc2f 	bl	80052e8 <_free_r>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6063      	str	r3, [r4, #4]
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f043 0308 	orr.w	r3, r3, #8
 8005aa4:	81a3      	strh	r3, [r4, #12]
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	b94b      	cbnz	r3, 8005abe <__swsetup_r+0x9a>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab4:	d003      	beq.n	8005abe <__swsetup_r+0x9a>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f000 f84d 	bl	8005b58 <__smakebuf_r>
 8005abe:	89a0      	ldrh	r0, [r4, #12]
 8005ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac4:	f010 0301 	ands.w	r3, r0, #1
 8005ac8:	d00a      	beq.n	8005ae0 <__swsetup_r+0xbc>
 8005aca:	2300      	movs	r3, #0
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	6963      	ldr	r3, [r4, #20]
 8005ad0:	425b      	negs	r3, r3
 8005ad2:	61a3      	str	r3, [r4, #24]
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b943      	cbnz	r3, 8005aea <__swsetup_r+0xc6>
 8005ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005adc:	d1ba      	bne.n	8005a54 <__swsetup_r+0x30>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	0781      	lsls	r1, r0, #30
 8005ae2:	bf58      	it	pl
 8005ae4:	6963      	ldrpl	r3, [r4, #20]
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	e7f4      	b.n	8005ad4 <__swsetup_r+0xb0>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e7f7      	b.n	8005ade <__swsetup_r+0xba>
 8005aee:	bf00      	nop
 8005af0:	20000514 	.word	0x20000514
 8005af4:	08005da0 	.word	0x08005da0
 8005af8:	08005dc0 	.word	0x08005dc0
 8005afc:	08005d80 	.word	0x08005d80

08005b00 <abort>:
 8005b00:	2006      	movs	r0, #6
 8005b02:	b508      	push	{r3, lr}
 8005b04:	f000 f89e 	bl	8005c44 <raise>
 8005b08:	2001      	movs	r0, #1
 8005b0a:	f7fa ff30 	bl	800096e <_exit>

08005b0e <__swhatbuf_r>:
 8005b0e:	b570      	push	{r4, r5, r6, lr}
 8005b10:	460e      	mov	r6, r1
 8005b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b16:	4614      	mov	r4, r2
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	461d      	mov	r5, r3
 8005b1c:	b096      	sub	sp, #88	; 0x58
 8005b1e:	da07      	bge.n	8005b30 <__swhatbuf_r+0x22>
 8005b20:	2300      	movs	r3, #0
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	89b3      	ldrh	r3, [r6, #12]
 8005b26:	061a      	lsls	r2, r3, #24
 8005b28:	d410      	bmi.n	8005b4c <__swhatbuf_r+0x3e>
 8005b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b2e:	e00e      	b.n	8005b4e <__swhatbuf_r+0x40>
 8005b30:	466a      	mov	r2, sp
 8005b32:	f000 f8a3 	bl	8005c7c <_fstat_r>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	dbf2      	blt.n	8005b20 <__swhatbuf_r+0x12>
 8005b3a:	9a01      	ldr	r2, [sp, #4]
 8005b3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b44:	425a      	negs	r2, r3
 8005b46:	415a      	adcs	r2, r3
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	e7ee      	b.n	8005b2a <__swhatbuf_r+0x1c>
 8005b4c:	2340      	movs	r3, #64	; 0x40
 8005b4e:	2000      	movs	r0, #0
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	b016      	add	sp, #88	; 0x58
 8005b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b58 <__smakebuf_r>:
 8005b58:	898b      	ldrh	r3, [r1, #12]
 8005b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b5c:	079d      	lsls	r5, r3, #30
 8005b5e:	4606      	mov	r6, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	d507      	bpl.n	8005b74 <__smakebuf_r+0x1c>
 8005b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	6123      	str	r3, [r4, #16]
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	6163      	str	r3, [r4, #20]
 8005b70:	b002      	add	sp, #8
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	466a      	mov	r2, sp
 8005b76:	ab01      	add	r3, sp, #4
 8005b78:	f7ff ffc9 	bl	8005b0e <__swhatbuf_r>
 8005b7c:	9900      	ldr	r1, [sp, #0]
 8005b7e:	4605      	mov	r5, r0
 8005b80:	4630      	mov	r0, r6
 8005b82:	f7ff f8f1 	bl	8004d68 <_malloc_r>
 8005b86:	b948      	cbnz	r0, 8005b9c <__smakebuf_r+0x44>
 8005b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8c:	059a      	lsls	r2, r3, #22
 8005b8e:	d4ef      	bmi.n	8005b70 <__smakebuf_r+0x18>
 8005b90:	f023 0303 	bic.w	r3, r3, #3
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	81a3      	strh	r3, [r4, #12]
 8005b9a:	e7e3      	b.n	8005b64 <__smakebuf_r+0xc>
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <__smakebuf_r+0x7c>)
 8005b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	6020      	str	r0, [r4, #0]
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	6120      	str	r0, [r4, #16]
 8005bae:	6163      	str	r3, [r4, #20]
 8005bb0:	9b01      	ldr	r3, [sp, #4]
 8005bb2:	b15b      	cbz	r3, 8005bcc <__smakebuf_r+0x74>
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bba:	f000 f871 	bl	8005ca0 <_isatty_r>
 8005bbe:	b128      	cbz	r0, 8005bcc <__smakebuf_r+0x74>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	89a0      	ldrh	r0, [r4, #12]
 8005bce:	4305      	orrs	r5, r0
 8005bd0:	81a5      	strh	r5, [r4, #12]
 8005bd2:	e7cd      	b.n	8005b70 <__smakebuf_r+0x18>
 8005bd4:	08004b65 	.word	0x08004b65

08005bd8 <memchr>:
 8005bd8:	4603      	mov	r3, r0
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	b2c9      	uxtb	r1, r1
 8005bde:	4402      	add	r2, r0
 8005be0:	4293      	cmp	r3, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	d101      	bne.n	8005bea <memchr+0x12>
 8005be6:	2000      	movs	r0, #0
 8005be8:	e003      	b.n	8005bf2 <memchr+0x1a>
 8005bea:	7804      	ldrb	r4, [r0, #0]
 8005bec:	3301      	adds	r3, #1
 8005bee:	428c      	cmp	r4, r1
 8005bf0:	d1f6      	bne.n	8005be0 <memchr+0x8>
 8005bf2:	bd10      	pop	{r4, pc}

08005bf4 <_raise_r>:
 8005bf4:	291f      	cmp	r1, #31
 8005bf6:	b538      	push	{r3, r4, r5, lr}
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	d904      	bls.n	8005c08 <_raise_r+0x14>
 8005bfe:	2316      	movs	r3, #22
 8005c00:	6003      	str	r3, [r0, #0]
 8005c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c0a:	b112      	cbz	r2, 8005c12 <_raise_r+0x1e>
 8005c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c10:	b94b      	cbnz	r3, 8005c26 <_raise_r+0x32>
 8005c12:	4620      	mov	r0, r4
 8005c14:	f000 f830 	bl	8005c78 <_getpid_r>
 8005c18:	462a      	mov	r2, r5
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c22:	f000 b817 	b.w	8005c54 <_kill_r>
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d00a      	beq.n	8005c40 <_raise_r+0x4c>
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	d103      	bne.n	8005c36 <_raise_r+0x42>
 8005c2e:	2316      	movs	r3, #22
 8005c30:	6003      	str	r3, [r0, #0]
 8005c32:	2001      	movs	r0, #1
 8005c34:	e7e7      	b.n	8005c06 <_raise_r+0x12>
 8005c36:	2400      	movs	r4, #0
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c3e:	4798      	blx	r3
 8005c40:	2000      	movs	r0, #0
 8005c42:	e7e0      	b.n	8005c06 <_raise_r+0x12>

08005c44 <raise>:
 8005c44:	4b02      	ldr	r3, [pc, #8]	; (8005c50 <raise+0xc>)
 8005c46:	4601      	mov	r1, r0
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	f7ff bfd3 	b.w	8005bf4 <_raise_r>
 8005c4e:	bf00      	nop
 8005c50:	20000514 	.word	0x20000514

08005c54 <_kill_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	2300      	movs	r3, #0
 8005c58:	4d06      	ldr	r5, [pc, #24]	; (8005c74 <_kill_r+0x20>)
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	4611      	mov	r1, r2
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	f7fa fe74 	bl	800094e <_kill>
 8005c66:	1c43      	adds	r3, r0, #1
 8005c68:	d102      	bne.n	8005c70 <_kill_r+0x1c>
 8005c6a:	682b      	ldr	r3, [r5, #0]
 8005c6c:	b103      	cbz	r3, 8005c70 <_kill_r+0x1c>
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop
 8005c74:	20002280 	.word	0x20002280

08005c78 <_getpid_r>:
 8005c78:	f7fa be62 	b.w	8000940 <_getpid>

08005c7c <_fstat_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4d06      	ldr	r5, [pc, #24]	; (8005c9c <_fstat_r+0x20>)
 8005c82:	4604      	mov	r4, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	602b      	str	r3, [r5, #0]
 8005c8a:	f7fa febe 	bl	8000a0a <_fstat>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	d102      	bne.n	8005c98 <_fstat_r+0x1c>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	b103      	cbz	r3, 8005c98 <_fstat_r+0x1c>
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20002280 	.word	0x20002280

08005ca0 <_isatty_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	4d05      	ldr	r5, [pc, #20]	; (8005cbc <_isatty_r+0x1c>)
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	602b      	str	r3, [r5, #0]
 8005cac:	f7fa febc 	bl	8000a28 <_isatty>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_isatty_r+0x1a>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_isatty_r+0x1a>
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	20002280 	.word	0x20002280

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
